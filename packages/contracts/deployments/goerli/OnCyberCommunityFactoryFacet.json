{
  "address": "0xc7832ada2537d9a11cab4507d4b6bf3d2a77a39f",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "DropCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Minted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "accountsByToken",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_timeStart",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timeEnd",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountCap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_shareCyber",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "createDrop",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        }
      ],
      "name": "dropMintCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getDrop",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "timeStart",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timeEnd",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountCap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shareCyber",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minted",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_trustedForwarder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_opensea",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oncyber",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        }
      ],
      "name": "minterNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oncyber",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "tokensByAccount",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "totalHolders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x083f90c6714d32e10e8c26041d04855128c2134296ab358db8c6e43c3572a652",
  "receipt": {
    "to": null,
    "from": "0x422226357641b8daf8fc23e2cc306c282e87817c",
    "contractAddress": "0xc7832ada2537d9a11cab4507d4b6bf3d2a77a39f",
    "transactionIndex": "0xe",
    "gasUsed": "0x4c5243",
    "logsBloom": "0x
    "blockHash": "0x049283b26f10112d461eb4c3024b84885324431d4578d1f3595ad227f5531adf",
    "transactionHash": "0x1cc53b164ad77d5cde23f813c189b8496b6e512a6f7ead2b029501ffa6625063",
    "logs": [],
    "blockNumber": "0x783705",
    "cumulativeGasUsed": "0x9c7740",
    "status": "0x1"
  },
  "args": [],
  "solcInputHash": "d8757e24b16838a4f225bdb77282daf9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"DropCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"accountsByToken\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_timeStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_shareCyber\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"createDrop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"dropMintCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getDrop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timeStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareCyber\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minted\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trustedForwarder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_opensea\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oncyber\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"minterNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oncyber\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"tokensByAccount\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"accountsByToken(uint256)\":{\"params\":{\"id\":\"token id to query\"},\"returns\":{\"_0\":\"list of holder addresses\"}},\"balanceOf(address,uint256)\":{\"params\":{\"account\":\"address to query\",\"id\":\"token to query\"},\"returns\":{\"_0\":\"token balance\"}},\"balanceOfBatch(address[],uint256[])\":{\"params\":{\"accounts\":\"addresss to query\",\"ids\":\"tokens to query\"},\"returns\":{\"_0\":\"token balances\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"account\":\"address to query for approval granted\",\"operator\":\"address to query for approval received\"},\"returns\":{\"_0\":\"whether operator is approved to spend tokens held by account\"}},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"params\":{\"amounts\":\"list of quantities of tokens to transfer\",\"data\":\"data payload\",\"from\":\"sender of tokens\",\"ids\":\"list of token IDs\",\"to\":\"receiver of tokens\"}},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"params\":{\"amount\":\"quantity of tokens to transfer\",\"data\":\"data payload\",\"from\":\"sender of tokens\",\"id\":\"token ID\",\"to\":\"receiver of tokens\"}},\"setApprovalForAll(address,bool)\":{\"params\":{\"operator\":\"address whose approval status to update\",\"status\":\"whether operator should be considered approved\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"interface id\"},\"returns\":{\"_0\":\"bool whether interface is supported\"}},\"tokensByAccount(address)\":{\"params\":{\"account\":\"address to query\"},\"returns\":{\"_0\":\"list of token ids\"}},\"totalHolders(uint256)\":{\"params\":{\"id\":\"token id to query\"},\"returns\":{\"_0\":\"quantity of holders\"}},\"totalSupply(uint256)\":{\"params\":{\"id\":\"token id to query\"},\"returns\":{\"_0\":\"token supply\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"accountsByToken(uint256)\":{\"notice\":\"query holders of given token\"},\"balanceOf(address,uint256)\":{\"notice\":\"query the balance of given token held by given address\"},\"balanceOfBatch(address[],uint256[])\":{\"notice\":\"query the balances of given tokens held by given addresses\"},\"isApprovedForAll(address,address)\":{\"notice\":\"query approval status of given operator with respect to given address\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"transfer batch of tokens between given addresses, checking for ERC1155Receiver implementation if applicable\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"notice\":\"transfer tokens between given addresses, checking for ERC1155Receiver implementation if applicable\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"grant approval to or revoke approval from given operator to spend held tokens\"},\"supportsInterface(bytes4)\":{\"notice\":\"query whether contract has registered support for given interface\"},\"tokensByAccount(address)\":{\"notice\":\"query tokens held by given address\"},\"totalHolders(uint256)\":{\"notice\":\"query total number of holders for given token\"},\"totalSupply(uint256)\":{\"notice\":\"query total minted supply of given token\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Diamantaires/Community/OnCyberCommunityFactoryFacet.sol\":\"OnCyberCommunityFactoryFacet\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x84ac2d2f343df1e683da7a12bbcf70db542a7a7a0cea90a5d70fcb5e5d035481\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC165 } from './IERC165.sol';\\nimport { ERC165Storage } from './ERC165Storage.sol';\\n\\n/**\\n * @title ERC165 implementation\\n */\\nabstract contract ERC165 is IERC165 {\\n    using ERC165Storage for ERC165Storage.Layout;\\n\\n    /**\\n     * @inheritdoc IERC165\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return ERC165Storage.layout().isSupportedInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xc4a0b280ce381af99e8be8d7fb59f3c71690230d12d07c7beffe5594ceac7cf7\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary ERC165Storage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC165');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    function isSupportedInterface(Layout storage l, bytes4 interfaceId)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return l.supportedInterfaces[interfaceId];\\n    }\\n\\n    function setSupportedInterface(\\n        Layout storage l,\\n        bytes4 interfaceId,\\n        bool status\\n    ) internal {\\n        require(interfaceId != 0xffffffff, 'ERC165: invalid interface id');\\n        l.supportedInterfaces[interfaceId] = status;\\n    }\\n}\\n\",\"keccak256\":\"0x61f281af116b703f31c0fdd8616cab9c5ad71f7d5d0038b60ec1512587b2f91d\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC165 interface registration interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-165\\n */\\ninterface IERC165 {\\n    /**\\n     * @notice query whether contract has registered support for given interface\\n     * @param interfaceId interface id\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x19d0bf328e3ea589cd4fa37a487cc33aa7ac293656e11a268f46161470b111c6\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ERC165 } from '../../introspection/ERC165.sol';\\nimport { ERC1155Base, ERC1155BaseInternal } from './base/ERC1155Base.sol';\\nimport { ERC1155Enumerable } from './enumerable/ERC1155Enumerable.sol';\\nimport { ERC1155Metadata } from './metadata/ERC1155Metadata.sol';\\n\\n/**\\n * @title SolidState ERC1155 implementation\\n */\\nabstract contract ERC1155 is\\n    ERC1155Base,\\n    ERC1155Enumerable,\\n    ERC1155Metadata,\\n    ERC165\\n{\\n    /**\\n     * @inheritdoc ERC1155BaseInternal\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override(ERC1155BaseInternal, ERC1155Enumerable) {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n    }\\n}\\n\",\"keccak256\":\"0xa71dcd8a1f1a488db7e1cbf073bb0bcd2a5a24af061043f3b9284481d99056d8\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC1155Internal } from './IERC1155Internal.sol';\\nimport { IERC165 } from '../../introspection/IERC165.sol';\\n\\n/**\\n * @notice ERC1155 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/1155\\n */\\ninterface IERC1155 is IERC1155Internal, IERC165 {\\n    /**\\n     * @notice query the balance of given token held by given address\\n     * @param account address to query\\n     * @param id token to query\\n     * @return token balance\\n     */\\n    function balanceOf(address account, uint256 id)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice query the balances of given tokens held by given addresses\\n     * @param accounts addresss to query\\n     * @param ids tokens to query\\n     * @return token balances\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @notice query approval status of given operator with respect to given address\\n     * @param account address to query for approval granted\\n     * @param operator address to query for approval received\\n     * @return whether operator is approved to spend tokens held by account\\n     */\\n    function isApprovedForAll(address account, address operator)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @notice grant approval to or revoke approval from given operator to spend held tokens\\n     * @param operator address whose approval status to update\\n     * @param status whether operator should be considered approved\\n     */\\n    function setApprovalForAll(address operator, bool status) external;\\n\\n    /**\\n     * @notice transfer tokens between given addresses, checking for ERC1155Receiver implementation if applicable\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice transfer batch of tokens between given addresses, checking for ERC1155Receiver implementation if applicable\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param ids list of token IDs\\n     * @param amounts list of quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8f5d42093f86830f6e7d2a8875eac8c2d7ff064859c13f9ffe237e4ccc2951c4\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/IERC1155Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC165 } from '../../introspection/IERC165.sol';\\n\\n/**\\n * @notice Partial ERC1155 interface needed by internal functions\\n */\\ninterface IERC1155Internal {\\n    event TransferSingle(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 id,\\n        uint256 value\\n    );\\n\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    event ApprovalForAll(\\n        address indexed account,\\n        address indexed operator,\\n        bool approved\\n    );\\n}\\n\",\"keccak256\":\"0x770e5cbe555d00fb78405e2d8c74ec6cdc9b84dcb5f73f4efa2cdc20cf57e026\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC165 } from '../../introspection/IERC165.sol';\\n\\n/**\\n * @title ERC1155 transfer receiver interface\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @notice validate receipt of ERC1155 transfer\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param id token ID received\\n     * @param value quantity of tokens received\\n     * @param data data payload\\n     * @return function's own selector if transfer is accepted\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @notice validate receipt of ERC1155 batch transfer\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param ids token IDs received\\n     * @param values quantities of tokens received\\n     * @param data data payload\\n     * @return function's own selector if transfer is accepted\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x31fcdbc3c885a95d0449d9b5f20a7ef0cae2fa63bd82195995d05a7eecaa5f74\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/base/ERC1155Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC1155 } from '../IERC1155.sol';\\nimport { IERC1155Receiver } from '../IERC1155Receiver.sol';\\nimport { ERC1155BaseInternal, ERC1155BaseStorage } from './ERC1155BaseInternal.sol';\\n\\n/**\\n * @title Base ERC1155 contract\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nabstract contract ERC1155Base is IERC1155, ERC1155BaseInternal {\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function balanceOf(address account, uint256 id)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _balanceOf(account, id);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(\\n            accounts.length == ids.length,\\n            'ERC1155: accounts and ids length mismatch'\\n        );\\n\\n        mapping(uint256 => mapping(address => uint256))\\n            storage balances = ERC1155BaseStorage.layout().balances;\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        unchecked {\\n            for (uint256 i; i < accounts.length; i++) {\\n                require(\\n                    accounts[i] != address(0),\\n                    'ERC1155: batch balance query for the zero address'\\n                );\\n                batchBalances[i] = balances[ids[i]][accounts[i]];\\n            }\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function isApprovedForAll(address account, address operator)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return ERC1155BaseStorage.layout().operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function setApprovalForAll(address operator, bool status)\\n        public\\n        virtual\\n        override\\n    {\\n        require(\\n            msg.sender != operator,\\n            'ERC1155: setting approval status for self'\\n        );\\n        ERC1155BaseStorage.layout().operatorApprovals[msg.sender][\\n            operator\\n        ] = status;\\n        emit ApprovalForAll(msg.sender, operator, status);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == msg.sender || isApprovedForAll(from, msg.sender),\\n            'ERC1155: caller is not owner nor approved'\\n        );\\n        _safeTransfer(msg.sender, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == msg.sender || isApprovedForAll(from, msg.sender),\\n            'ERC1155: caller is not owner nor approved'\\n        );\\n        _safeTransferBatch(msg.sender, from, to, ids, amounts, data);\\n    }\\n}\\n\",\"keccak256\":\"0xe2e044ac6fc81e938ae06bea0350352472c8a77ff29ac09263d268c6610f9b00\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/base/ERC1155BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { AddressUtils } from '../../../utils/AddressUtils.sol';\\nimport { IERC1155Internal } from '../IERC1155Internal.sol';\\nimport { IERC1155Receiver } from '../IERC1155Receiver.sol';\\nimport { ERC1155BaseStorage } from './ERC1155BaseStorage.sol';\\n\\n/**\\n * @title Base ERC1155 internal functions\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nabstract contract ERC1155BaseInternal is IERC1155Internal {\\n    using AddressUtils for address;\\n\\n    /**\\n     * @notice query the balance of given token held by given address\\n     * @param account address to query\\n     * @param id token to query\\n     * @return token balance\\n     */\\n    function _balanceOf(address account, uint256 id)\\n        internal\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        require(\\n            account != address(0),\\n            'ERC1155: balance query for the zero address'\\n        );\\n        return ERC1155BaseStorage.layout().balances[id][account];\\n    }\\n\\n    /**\\n     * @notice mint given quantity of tokens for given address\\n     * @dev ERC1155Receiver implementation is not checked\\n     * @param account beneficiary of minting\\n     * @param id token ID\\n     * @param amount quantity of tokens to mint\\n     * @param data data payload\\n     */\\n    function _mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(account != address(0), 'ERC1155: mint to the zero address');\\n\\n        _beforeTokenTransfer(\\n            msg.sender,\\n            address(0),\\n            account,\\n            _asSingletonArray(id),\\n            _asSingletonArray(amount),\\n            data\\n        );\\n\\n        mapping(address => uint256) storage balances = ERC1155BaseStorage\\n            .layout()\\n            .balances[id];\\n        balances[account] += amount;\\n\\n        emit TransferSingle(msg.sender, address(0), account, id, amount);\\n    }\\n\\n    /**\\n     * @notice mint given quantity of tokens for given address\\n     * @param account beneficiary of minting\\n     * @param id token ID\\n     * @param amount quantity of tokens to mint\\n     * @param data data payload\\n     */\\n    function _safeMint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(account, id, amount, data);\\n\\n        _doSafeTransferAcceptanceCheck(\\n            msg.sender,\\n            address(0),\\n            account,\\n            id,\\n            amount,\\n            data\\n        );\\n    }\\n\\n    /**\\n     * @notice mint batch of tokens for given address\\n     * @dev ERC1155Receiver implementation is not checked\\n     * @param account beneficiary of minting\\n     * @param ids list of token IDs\\n     * @param amounts list of quantities of tokens to mint\\n     * @param data data payload\\n     */\\n    function _mintBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(account != address(0), 'ERC1155: mint to the zero address');\\n        require(\\n            ids.length == amounts.length,\\n            'ERC1155: ids and amounts length mismatch'\\n        );\\n\\n        _beforeTokenTransfer(\\n            msg.sender,\\n            address(0),\\n            account,\\n            ids,\\n            amounts,\\n            data\\n        );\\n\\n        mapping(uint256 => mapping(address => uint256))\\n            storage balances = ERC1155BaseStorage.layout().balances;\\n\\n        for (uint256 i; i < ids.length; i++) {\\n            balances[ids[i]][account] += amounts[i];\\n        }\\n\\n        emit TransferBatch(msg.sender, address(0), account, ids, amounts);\\n    }\\n\\n    /**\\n     * @notice mint batch of tokens for given address\\n     * @param account beneficiary of minting\\n     * @param ids list of token IDs\\n     * @param amounts list of quantities of tokens to mint\\n     * @param data data payload\\n     */\\n    function _safeMintBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        _mintBatch(account, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(\\n            msg.sender,\\n            address(0),\\n            account,\\n            ids,\\n            amounts,\\n            data\\n        );\\n    }\\n\\n    /**\\n     * @notice burn given quantity of tokens held by given address\\n     * @param account holder of tokens to burn\\n     * @param id token ID\\n     * @param amount quantity of tokens to burn\\n     */\\n    function _burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(account != address(0), 'ERC1155: burn from the zero address');\\n\\n        _beforeTokenTransfer(\\n            msg.sender,\\n            account,\\n            address(0),\\n            _asSingletonArray(id),\\n            _asSingletonArray(amount),\\n            ''\\n        );\\n\\n        mapping(address => uint256) storage balances = ERC1155BaseStorage\\n            .layout()\\n            .balances[id];\\n\\n        unchecked {\\n            require(\\n                balances[account] >= amount,\\n                'ERC1155: burn amount exceeds balances'\\n            );\\n            balances[account] -= amount;\\n        }\\n\\n        emit TransferSingle(msg.sender, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @notice burn given batch of tokens held by given address\\n     * @param account holder of tokens to burn\\n     * @param ids token IDs\\n     * @param amounts quantities of tokens to burn\\n     */\\n    function _burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(account != address(0), 'ERC1155: burn from the zero address');\\n        require(\\n            ids.length == amounts.length,\\n            'ERC1155: ids and amounts length mismatch'\\n        );\\n\\n        _beforeTokenTransfer(msg.sender, account, address(0), ids, amounts, '');\\n\\n        mapping(uint256 => mapping(address => uint256))\\n            storage balances = ERC1155BaseStorage.layout().balances;\\n\\n        unchecked {\\n            for (uint256 i; i < ids.length; i++) {\\n                uint256 id = ids[i];\\n                require(\\n                    balances[id][account] >= amounts[i],\\n                    'ERC1155: burn amount exceeds balance'\\n                );\\n                balances[id][account] -= amounts[i];\\n            }\\n        }\\n\\n        emit TransferBatch(msg.sender, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @notice transfer tokens between given addresses\\n     * @dev ERC1155Receiver implementation is not checked\\n     * @param operator executor of transfer\\n     * @param sender sender of tokens\\n     * @param recipient receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _transfer(\\n        address operator,\\n        address sender,\\n        address recipient,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(\\n            recipient != address(0),\\n            'ERC1155: transfer to the zero address'\\n        );\\n\\n        _beforeTokenTransfer(\\n            operator,\\n            sender,\\n            recipient,\\n            _asSingletonArray(id),\\n            _asSingletonArray(amount),\\n            data\\n        );\\n\\n        mapping(uint256 => mapping(address => uint256))\\n            storage balances = ERC1155BaseStorage.layout().balances;\\n\\n        unchecked {\\n            uint256 senderBalance = balances[id][sender];\\n            require(\\n                senderBalance >= amount,\\n                'ERC1155: insufficient balances for transfer'\\n            );\\n            balances[id][sender] = senderBalance - amount;\\n        }\\n\\n        balances[id][recipient] += amount;\\n\\n        emit TransferSingle(operator, sender, recipient, id, amount);\\n    }\\n\\n    /**\\n     * @notice transfer tokens between given addresses\\n     * @param operator executor of transfer\\n     * @param sender sender of tokens\\n     * @param recipient receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _safeTransfer(\\n        address operator,\\n        address sender,\\n        address recipient,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(operator, sender, recipient, id, amount, data);\\n\\n        _doSafeTransferAcceptanceCheck(\\n            operator,\\n            sender,\\n            recipient,\\n            id,\\n            amount,\\n            data\\n        );\\n    }\\n\\n    /**\\n     * @notice transfer batch of tokens between given addresses\\n     * @dev ERC1155Receiver implementation is not checked\\n     * @param operator executor of transfer\\n     * @param sender sender of tokens\\n     * @param recipient receiver of tokens\\n     * @param ids token IDs\\n     * @param amounts quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _transferBatch(\\n        address operator,\\n        address sender,\\n        address recipient,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(\\n            recipient != address(0),\\n            'ERC1155: transfer to the zero address'\\n        );\\n        require(\\n            ids.length == amounts.length,\\n            'ERC1155: ids and amounts length mismatch'\\n        );\\n\\n        _beforeTokenTransfer(operator, sender, recipient, ids, amounts, data);\\n\\n        mapping(uint256 => mapping(address => uint256))\\n            storage balances = ERC1155BaseStorage.layout().balances;\\n\\n        for (uint256 i; i < ids.length; i++) {\\n            uint256 token = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            unchecked {\\n                uint256 senderBalance = balances[token][sender];\\n                require(\\n                    senderBalance >= amount,\\n                    'ERC1155: insufficient balances for transfer'\\n                );\\n                balances[token][sender] = senderBalance - amount;\\n            }\\n\\n            balances[token][recipient] += amount;\\n        }\\n\\n        emit TransferBatch(operator, sender, recipient, ids, amounts);\\n    }\\n\\n    /**\\n     * @notice transfer batch of tokens between given addresses\\n     * @param operator executor of transfer\\n     * @param sender sender of tokens\\n     * @param recipient receiver of tokens\\n     * @param ids token IDs\\n     * @param amounts quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _safeTransferBatch(\\n        address operator,\\n        address sender,\\n        address recipient,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        _transferBatch(operator, sender, recipient, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(\\n            operator,\\n            sender,\\n            recipient,\\n            ids,\\n            amounts,\\n            data\\n        );\\n    }\\n\\n    /**\\n     * @notice wrap given element in array of length 1\\n     * @param element element to wrap\\n     * @return singleton array\\n     */\\n    function _asSingletonArray(uint256 element)\\n        private\\n        pure\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n        return array;\\n    }\\n\\n    /**\\n     * @notice revert if applicable transfer recipient is not valid ERC1155Receiver\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try\\n                IERC1155Receiver(to).onERC1155Received(\\n                    operator,\\n                    from,\\n                    id,\\n                    amount,\\n                    data\\n                )\\n            returns (bytes4 response) {\\n                require(\\n                    response == IERC1155Receiver.onERC1155Received.selector,\\n                    'ERC1155: ERC1155Receiver rejected tokens'\\n                );\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert('ERC1155: transfer to non ERC1155Receiver implementer');\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice revert if applicable transfer recipient is not valid ERC1155Receiver\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param ids token IDs\\n     * @param amounts quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try\\n                IERC1155Receiver(to).onERC1155BatchReceived(\\n                    operator,\\n                    from,\\n                    ids,\\n                    amounts,\\n                    data\\n                )\\n            returns (bytes4 response) {\\n                require(\\n                    response ==\\n                        IERC1155Receiver.onERC1155BatchReceived.selector,\\n                    'ERC1155: ERC1155Receiver rejected tokens'\\n                );\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert('ERC1155: transfer to non ERC1155Receiver implementer');\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice ERC1155 hook, called before all transfers including mint and burn\\n     * @dev function should be overridden and new implementation must call super\\n     * @dev called for both single and batch transfers\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param ids token IDs\\n     * @param amounts quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x16e4fd77dcb8f4cd933b209137560afb59b4e7bec7b64ee39cc24f1594b356a9\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/base/ERC1155BaseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary ERC1155BaseStorage {\\n    struct Layout {\\n        mapping(uint256 => mapping(address => uint256)) balances;\\n        mapping(address => mapping(address => bool)) operatorApprovals;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC1155Base');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8db92a910e779b41952ea8c28ee143ccdf6d4bc43b0ca984ceda9ef67956493d\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/enumerable/ERC1155Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { EnumerableSet } from '../../../utils/EnumerableSet.sol';\\nimport { ERC1155Base, ERC1155BaseInternal } from '../base/ERC1155Base.sol';\\nimport { IERC1155Enumerable } from './IERC1155Enumerable.sol';\\nimport { ERC1155EnumerableInternal, ERC1155EnumerableStorage } from './ERC1155EnumerableInternal.sol';\\n\\n/**\\n * @title ERC1155 implementation including enumerable and aggregate functions\\n */\\nabstract contract ERC1155Enumerable is\\n    IERC1155Enumerable,\\n    ERC1155Base,\\n    ERC1155EnumerableInternal\\n{\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    /**\\n     * @inheritdoc IERC1155Enumerable\\n     */\\n    function totalSupply(uint256 id)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return ERC1155EnumerableStorage.layout().totalSupply[id];\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155Enumerable\\n     */\\n    function totalHolders(uint256 id)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return ERC1155EnumerableStorage.layout().accountsByToken[id].length();\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155Enumerable\\n     */\\n    function accountsByToken(uint256 id)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (address[] memory)\\n    {\\n        EnumerableSet.AddressSet storage accounts = ERC1155EnumerableStorage\\n            .layout()\\n            .accountsByToken[id];\\n\\n        address[] memory addresses = new address[](accounts.length());\\n\\n        for (uint256 i; i < accounts.length(); i++) {\\n            addresses[i] = accounts.at(i);\\n        }\\n\\n        return addresses;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155Enumerable\\n     */\\n    function tokensByAccount(address account)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        EnumerableSet.UintSet storage tokens = ERC1155EnumerableStorage\\n            .layout()\\n            .tokensByAccount[account];\\n\\n        uint256[] memory ids = new uint256[](tokens.length());\\n\\n        for (uint256 i; i < tokens.length(); i++) {\\n            ids[i] = tokens.at(i);\\n        }\\n\\n        return ids;\\n    }\\n\\n    /**\\n     * @notice ERC1155 hook: update aggregate values\\n     * @inheritdoc ERC1155EnumerableInternal\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        internal\\n        virtual\\n        override(ERC1155BaseInternal, ERC1155EnumerableInternal)\\n    {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n    }\\n}\\n\",\"keccak256\":\"0xcb9cfd2b1663c96f6eada653fb403b27362a8fe23e5f8eaf4c8ffd6c9e4a446e\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/enumerable/ERC1155EnumerableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { EnumerableSet } from '../../../utils/EnumerableSet.sol';\\nimport { ERC1155BaseInternal, ERC1155BaseStorage } from '../base/ERC1155BaseInternal.sol';\\nimport { ERC1155EnumerableStorage } from './ERC1155EnumerableStorage.sol';\\n\\n/**\\n * @title ERC1155Enumerable internal functions\\n */\\nabstract contract ERC1155EnumerableInternal is ERC1155BaseInternal {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    /**\\n     * @notice ERC1155 hook: update aggregate values\\n     * @inheritdoc ERC1155BaseInternal\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        if (from != to) {\\n            ERC1155EnumerableStorage.Layout storage l = ERC1155EnumerableStorage\\n                .layout();\\n            mapping(uint256 => EnumerableSet.AddressSet)\\n                storage tokenAccounts = l.accountsByToken;\\n            EnumerableSet.UintSet storage fromTokens = l.tokensByAccount[from];\\n            EnumerableSet.UintSet storage toTokens = l.tokensByAccount[to];\\n\\n            for (uint256 i; i < ids.length; i++) {\\n                uint256 amount = amounts[i];\\n\\n                if (amount > 0) {\\n                    uint256 id = ids[i];\\n\\n                    if (from == address(0)) {\\n                        l.totalSupply[id] += amount;\\n                    } else if (_balanceOf(from, id) == amount) {\\n                        tokenAccounts[id].remove(from);\\n                        fromTokens.remove(id);\\n                    }\\n\\n                    if (to == address(0)) {\\n                        l.totalSupply[id] -= amount;\\n                    } else if (_balanceOf(to, id) == 0) {\\n                        tokenAccounts[id].add(to);\\n                        toTokens.add(id);\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ff538c74c04001dadf6fe1b4d8d1f028d09f75edb52b1f21dd0c2aff688ba45\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/enumerable/ERC1155EnumerableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { EnumerableSet } from '../../../utils/EnumerableSet.sol';\\n\\nlibrary ERC1155EnumerableStorage {\\n    struct Layout {\\n        mapping(uint256 => uint256) totalSupply;\\n        mapping(uint256 => EnumerableSet.AddressSet) accountsByToken;\\n        mapping(address => EnumerableSet.UintSet) tokensByAccount;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC1155Enumerable');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x33c415a72189dd74fcccf1a3737ed6a6991edb4ec410952adef1410a22bce57a\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/enumerable/IERC1155Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC1155 enumerable and aggregate function interface\\n */\\ninterface IERC1155Enumerable {\\n    /**\\n     * @notice query total minted supply of given token\\n     * @param id token id to query\\n     * @return token supply\\n     */\\n    function totalSupply(uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @notice query total number of holders for given token\\n     * @param id token id to query\\n     * @return quantity of holders\\n     */\\n    function totalHolders(uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @notice query holders of given token\\n     * @param id token id to query\\n     * @return list of holder addresses\\n     */\\n    function accountsByToken(uint256 id)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    /**\\n     * @notice query tokens held by given address\\n     * @param account address to query\\n     * @return list of token ids\\n     */\\n    function tokensByAccount(address account)\\n        external\\n        view\\n        returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0xbef598a8755a36981932f7cf4ada1d25890971ab7144a117c0ed88cab0511e04\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/metadata/ERC1155Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { UintUtils } from '../../../utils/UintUtils.sol';\\nimport { IERC1155Metadata } from './IERC1155Metadata.sol';\\nimport { ERC1155MetadataInternal } from './ERC1155MetadataInternal.sol';\\nimport { ERC1155MetadataStorage } from './ERC1155MetadataStorage.sol';\\n\\n/**\\n * @notice ERC1155 metadata extensions\\n */\\nabstract contract ERC1155Metadata is IERC1155Metadata, ERC1155MetadataInternal {\\n    using UintUtils for uint256;\\n\\n    /**\\n     * @notice inheritdoc IERC1155Metadata\\n     */\\n    function uri(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        ERC1155MetadataStorage.Layout storage l = ERC1155MetadataStorage\\n            .layout();\\n\\n        string memory tokenIdURI = l.tokenURIs[tokenId];\\n        string memory baseURI = l.baseURI;\\n\\n        if (bytes(baseURI).length == 0) {\\n            return tokenIdURI;\\n        } else if (bytes(tokenIdURI).length > 0) {\\n            return string(abi.encodePacked(baseURI, tokenIdURI));\\n        } else {\\n            return string(abi.encodePacked(baseURI, tokenId.toString()));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6322c9474aa916850b855eb9bce0e56e85705740e78b9e9028fccca907d235bb\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/metadata/ERC1155MetadataInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC1155MetadataInternal } from './IERC1155MetadataInternal.sol';\\nimport { ERC1155MetadataStorage } from './ERC1155MetadataStorage.sol';\\n\\n/**\\n * @notice ERC1155Metadata internal functions\\n */\\nabstract contract ERC1155MetadataInternal is IERC1155MetadataInternal {\\n    /**\\n     * @notice set base metadata URI\\n     * @dev base URI is a non-standard feature adapted from the ERC721 specification\\n     * @param baseURI base URI\\n     */\\n    function _setBaseURI(string memory baseURI) internal {\\n        ERC1155MetadataStorage.layout().baseURI = baseURI;\\n    }\\n\\n    /**\\n     * @notice set per-token metadata URI\\n     * @param tokenId token whose metadata URI to set\\n     * @param tokenURI per-token URI\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory tokenURI) internal {\\n        ERC1155MetadataStorage.layout().tokenURIs[tokenId] = tokenURI;\\n        emit URI(tokenURI, tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x922b91abc8972541855e56fd93468ee9f0178a68551c6b4ece6df639accf6d68\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/metadata/ERC1155MetadataStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @notice ERC1155 metadata extensions\\n */\\nlibrary ERC1155MetadataStorage {\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC1155Metadata');\\n\\n    struct Layout {\\n        string baseURI;\\n        mapping(uint256 => string) tokenURIs;\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbb01fdd26dbaf6423ff6b208fd58cfefd84dbaf9a0bebcd64f3ff7467e691c6a\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/metadata/IERC1155Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC1155Metadata interface\\n */\\ninterface IERC1155Metadata {\\n    /**\\n     * @notice get generated URI for given token\\n     * @return token URI\\n     */\\n    function uri(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xf0fcc6093a6eb3c0254814f365cc11cb5ec8e7b66493d52a02d9892de2fc198c\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/metadata/IERC1155MetadataInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Partial ERC1155Metadata interface needed by internal functions\\n */\\ninterface IERC1155MetadataInternal {\\n    event URI(string value, uint256 indexed tokenId);\\n}\\n\",\"keccak256\":\"0xe379314dbf1cfb48fc693a904e845a56d88056376b571a52f5a54a14a390c475\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/AddressUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary AddressUtils {\\n    function toString(address account) internal pure returns (string memory) {\\n        bytes32 value = bytes32(uint256(uint160(account)));\\n        bytes memory alphabet = '0123456789abcdef';\\n        bytes memory chars = new bytes(42);\\n\\n        chars[0] = '0';\\n        chars[1] = 'x';\\n\\n        for (uint256 i = 0; i < 20; i++) {\\n            chars[2 + i * 2] = alphabet[uint8(value[i + 12] >> 4)];\\n            chars[3 + i * 2] = alphabet[uint8(value[i + 12] & 0x0f)];\\n        }\\n\\n        return string(chars);\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function sendValue(address payable account, uint256 amount) internal {\\n        (bool success, ) = account.call{ value: amount }('');\\n        require(success, 'AddressUtils: failed to send value');\\n    }\\n\\n    function functionCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return\\n            functionCall(target, data, 'AddressUtils: failed low-level call');\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, error);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                'AddressUtils: failed low-level call with value'\\n            );\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        require(\\n            address(this).balance >= value,\\n            'AddressUtils: insufficient balance for call'\\n        );\\n        return _functionCallWithValue(target, data, value, error);\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) private returns (bytes memory) {\\n        require(\\n            isContract(target),\\n            'AddressUtils: function call to non-contract'\\n        );\\n\\n        (bool success, bytes memory returnData) = target.call{ value: value }(\\n            data\\n        );\\n\\n        if (success) {\\n            return returnData;\\n        } else if (returnData.length > 0) {\\n            assembly {\\n                let returnData_size := mload(returnData)\\n                revert(add(32, returnData), returnData_size)\\n            }\\n        } else {\\n            revert(error);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x427b64d138edb39914556505367376c7d5ad00ecca42db79dca8276404393e0b\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Set implementation with enumeration functions\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nlibrary EnumerableSet {\\n    struct Set {\\n        bytes32[] _values;\\n        // 1-indexed to allow 0 to signify nonexistence\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    function at(Bytes32Set storage set, uint256 index)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        return _at(set._inner, index);\\n    }\\n\\n    function at(AddressSet storage set, uint256 index)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    function at(UintSet storage set, uint256 index)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    function contains(Bytes32Set storage set, bytes32 value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, value);\\n    }\\n\\n    function contains(AddressSet storage set, address value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function contains(UintSet storage set, uint256 value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    function indexOf(Bytes32Set storage set, bytes32 value)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _indexOf(set._inner, value);\\n    }\\n\\n    function indexOf(AddressSet storage set, address value)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _indexOf(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function indexOf(UintSet storage set, uint256 value)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _indexOf(set._inner, bytes32(value));\\n    }\\n\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function add(Bytes32Set storage set, bytes32 value)\\n        internal\\n        returns (bool)\\n    {\\n        return _add(set._inner, value);\\n    }\\n\\n    function add(AddressSet storage set, address value)\\n        internal\\n        returns (bool)\\n    {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    function remove(Bytes32Set storage set, bytes32 value)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(set._inner, value);\\n    }\\n\\n    function remove(AddressSet storage set, address value)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function remove(UintSet storage set, uint256 value)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    function _at(Set storage set, uint256 index)\\n        private\\n        view\\n        returns (bytes32)\\n    {\\n        require(\\n            set._values.length > index,\\n            'EnumerableSet: index out of bounds'\\n        );\\n        return set._values[index];\\n    }\\n\\n    function _contains(Set storage set, bytes32 value)\\n        private\\n        view\\n        returns (bool)\\n    {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    function _indexOf(Set storage set, bytes32 value)\\n        private\\n        view\\n        returns (uint256)\\n    {\\n        unchecked {\\n            return set._indexes[value] - 1;\\n        }\\n    }\\n\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            uint256 index = valueIndex - 1;\\n            bytes32 last = set._values[set._values.length - 1];\\n\\n            // move last value to now-vacant index\\n\\n            set._values[index] = last;\\n            set._indexes[last] = index + 1;\\n\\n            // clear last index\\n\\n            set._values.pop();\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x42e1b641451347b1f3b7dc523fbea5c50e99793f56e3d7b11561fb56f00bc432\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/UintUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary UintUtils {\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0';\\n        }\\n\\n        uint256 temp = value;\\n        uint256 digits;\\n\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n\\n        bytes memory buffer = new bytes(digits);\\n\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x58c2a621bfa49d032bee277f6f1803b95567cb42178e33d3c0e0a04066991b62\",\"license\":\"MIT\"},\"contracts/BaseRelayRecipient/BaseRelayRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport '@openzeppelin/contracts/utils/Context.sol';\\nimport './BaseRelayRecipientStorage.sol';\\n\\n/**\\n * A base contract to be inherited by any contract that want to receive relayed transactions\\n * A subclass must use \\\"_msgSender()\\\" instead of \\\"msg.sender\\\"\\n */\\n\\nabstract contract BaseRelayRecipient is Context {\\n  /*\\n   * require a function to be called through GSN only\\n   */\\n  //  modifier trustedForwarderOnly() {\\n  //    require(msg.sender == address(s.trustedForwarder), \\\"Function can only be called through the trusted Forwarder\\\");\\n  //    _;\\n  //  }\\n\\n  function isTrustedForwarder(address forwarder) public view returns (bool) {\\n    return forwarder == BaseRelayRecipientStorage.layout().trustedForwarder;\\n  }\\n\\n  /**\\n   * return the sender of this call.\\n   * if the call came through our trusted forwarder, return the original sender.\\n   * otherwise, return `msg.sender`.\\n   * should be used in the contract anywhere instead of msg.sender\\n   */\\n  function _msgSender() internal view virtual override returns (address ret) {\\n    if (msg.data.length >= 24 && isTrustedForwarder(msg.sender)) {\\n      // At this point we know that the sender is a trusted forwarder,\\n      // so we trust that the last bytes of msg.data are the verified sender address.\\n      // extract sender address from the end of msg.data\\n      assembly {\\n        ret := shr(96, calldataload(sub(calldatasize(), 20)))\\n      }\\n    } else {\\n      return msg.sender;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xdc6b83ea96e8f275d8089e71fe292fb3b8050958cd8782455df44b6f3a689a02\",\"license\":\"MIT\"},\"contracts/BaseRelayRecipient/BaseRelayRecipientStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nlibrary BaseRelayRecipientStorage {\\n  bytes32 internal constant STORAGE_SLOT = keccak256('diamond.storage.BaseRelayRecipientStorage');\\n\\n  struct Layout {\\n    /*\\n     * Forwarder singleton we accept calls from\\n     */\\n    address trustedForwarder;\\n  }\\n\\n  function layout() internal pure returns (Layout storage lay) {\\n    bytes32 slot = STORAGE_SLOT;\\n    assembly {\\n      lay.slot := slot\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x70b05cd88aedcf18c1eaf4c789e1c9630b17fd3c2963ad5c752aa390e6ddc90e\",\"license\":\"MIT\"},\"contracts/CyberDropBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\n//\\nimport '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\\nimport '@openzeppelin/contracts/utils/Counters.sol';\\n\\nimport './libraries/LibAppStorage.sol';\\nimport './libraries/LibDropStorage.sol';\\nimport './CyberTokenBase.sol';\\n\\ncontract CyberDropBase is CyberTokenBase {\\n  using ECDSA for bytes32;\\n  using Counters for Counters.Counter;\\n\\n  event DropCreated(address indexed account, uint256 indexed tokenId);\\n\\n  function dropMintCounter(uint256 _tokenId, address _minter) external view returns (uint256) {\\n    LibDropStorage.Drop storage drop = LibDropStorage.layout().drops[_tokenId];\\n    require(drop.amountCap != 0, 'DNE');\\n    return drop.mintCounter[_minter].current();\\n  }\\n\\n  function getDrop(uint256 _tokenId)\\n    external\\n    view\\n    returns (\\n      uint256 timeStart,\\n      uint256 timeEnd,\\n      uint256 price,\\n      uint256 amountCap,\\n      uint256 shareCyber,\\n      address creator,\\n      uint256 minted\\n    )\\n  {\\n    LibDropStorage.Drop storage drop = LibDropStorage.layout().drops[_tokenId];\\n    require(drop.amountCap != 0, 'DNE');\\n    return (drop.timeStart, drop.timeEnd, drop.price, drop.amountCap, drop.shareCyber, drop.creator, drop.minted);\\n  }\\n\\n  function createDrop(\\n    string memory _uri,\\n    uint256 _timeStart,\\n    uint256 _timeEnd,\\n    uint256 _price,\\n    uint256 _amountCap,\\n    uint256 _shareCyber,\\n    bytes memory _signature\\n  ) external returns (uint256 tokenId) {\\n    require(_timeEnd - _timeStart > 0, 'IT');\\n    require(_shareCyber <= 100, 'ISO');\\n    require(_amountCap > 0, 'IAC');\\n\\n    LibAppStorage.Layout storage layout = LibAppStorage.layout();\\n    address sender = _msgSender();\\n    uint256 nonce = minterNonce(sender);\\n    bytes memory _message = abi.encodePacked(\\n      _uri,\\n      _timeStart,\\n      _timeEnd,\\n      _price,\\n      _amountCap,\\n      _shareCyber,\\n      sender,\\n      nonce\\n    );\\n    address recoveredAddress = keccak256(_message).toEthSignedMessageHash().recover(_signature);\\n    require(recoveredAddress == layout.manager, 'NM');\\n    tokenId = layout.totalSupply.current();\\n\\n    // Effects\\n    setTokenURI(tokenId, _uri);\\n    layout.totalSupply.increment();\\n    layout.minterNonce[sender].increment();\\n\\n    LibDropStorage.Drop storage drop = LibDropStorage.layout().drops[tokenId];\\n    drop.timeStart = _timeStart;\\n    drop.timeEnd = _timeEnd;\\n    drop.price = _price;\\n    drop.amountCap = _amountCap;\\n    drop.shareCyber = _shareCyber;\\n    drop.creator = payable(sender);\\n\\n    emit DropCreated(sender, tokenId);\\n  }\\n\\n  function mint(\\n    uint256 _tokenId,\\n    uint256 _quantity,\\n    bytes memory _signature\\n  ) external payable returns (bool success) {\\n    address sender = _msgSender();\\n    LibDropStorage.Drop storage drop = LibDropStorage.layout().drops[_tokenId];\\n\\n    require(drop.amountCap - drop.minted >= _quantity, 'CR');\\n\\n    require(block.timestamp > drop.timeStart && block.timestamp <= drop.timeEnd, 'OOT');\\n\\n    require(msg.value == drop.price * _quantity, 'IA');\\n\\n    uint256 senderDropNonce = drop.mintCounter[sender].current();\\n    bytes memory _message = abi.encodePacked(_tokenId, _quantity, sender, senderDropNonce);\\n    LibAppStorage.Layout storage layout = LibAppStorage.layout();\\n    address recoveredAddress = keccak256(_message).toEthSignedMessageHash().recover(_signature);\\n    require(recoveredAddress == layout.manager, 'NM');\\n\\n    // Effects\\n    drop.minted += _quantity;\\n    drop.mintCounter[sender].increment();\\n    _safeMint(sender, _tokenId, _quantity, '');\\n\\n    if (drop.price > 0) {\\n      uint256 amountOnCyber = (msg.value * drop.shareCyber) / 100;\\n      uint256 amountCreator = msg.value - amountOnCyber;\\n\\n      drop.creator.transfer(amountCreator);\\n      payable(layout.oncyber).transfer(amountOnCyber);\\n    }\\n\\n    emit Minted(sender, _tokenId, _quantity);\\n\\n    return true;\\n  }\\n}\\n\",\"keccak256\":\"0xc792fcd3c0b94abdd17109f285de6c19b804aa0c5d444f1b729c0ff2215d1d5f\",\"license\":\"MIT\"},\"contracts/CyberTokenBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\n//\\nimport '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\\nimport '@openzeppelin/contracts/utils/Counters.sol';\\nimport '@solidstate/contracts/token/ERC1155/IERC1155.sol';\\nimport './BaseRelayRecipient/BaseRelayRecipient.sol';\\nimport './BaseRelayRecipient/BaseRelayRecipientStorage.sol';\\nimport './Diamond/LibDiamond.sol';\\nimport './ERC1155URI/ERC1155URI.sol';\\n\\nimport './libraries/LibAppStorage.sol';\\n\\ncontract CyberTokenBase is BaseRelayRecipient, ERC1155URI {\\n  using ECDSA for bytes32;\\n  using Counters for Counters.Counter;\\n\\n  event Minted(address indexed account, uint256 indexed tokenId, uint256 indexed amount);\\n\\n  function initialize(\\n    string memory _uri,\\n    address _manager,\\n    address _trustedForwarder,\\n    address _opensea,\\n    address _oncyber\\n  ) public virtual {\\n    require(LibDiamond.diamondStorage().contractOwner == msg.sender, 'NO');\\n\\n    BaseRelayRecipientStorage.layout().trustedForwarder = _trustedForwarder;\\n    LibDiamond.diamondStorage().supportedInterfaces[type(IERC1155).interfaceId] = true;\\n    setURI(_uri);\\n    LibAppStorage.layout().manager = _manager;\\n    LibAppStorage.layout().opensea = _opensea;\\n    LibAppStorage.layout().oncyber = _oncyber;\\n  }\\n\\n  function totalSupply() public view returns (uint256) {\\n    return LibAppStorage.layout().totalSupply.current();\\n  }\\n\\n  function manager() public view returns (address) {\\n    return LibAppStorage.layout().manager;\\n  }\\n\\n  function oncyber() public view returns (address) {\\n    return LibAppStorage.layout().oncyber;\\n  }\\n\\n  function minterNonce(address _minter) public view returns (uint256) {\\n    return LibAppStorage.layout().minterNonce[_minter].current();\\n  }\\n}\\n\",\"keccak256\":\"0xd2c78638b24a8137cc5b4359192ad68006b106c3e9202fcb4fa559ac1ddbcab3\",\"license\":\"MIT\"},\"contracts/Diamantaires/Community/OnCyberCommunityFactoryFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\n//\\nimport '../../CyberDropBase.sol';\\n\\ncontract OnCyberCommunityFactoryFacet is CyberDropBase {}\\n\",\"keccak256\":\"0x519af8ae8bb74798eb313c425d29fc8d2af7e7e26a1b70a391aa193a278631d7\",\"license\":\"MIT\"},\"contracts/Diamond/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nlibrary LibDiamond {\\n  bytes32 public constant DIAMOND_STORAGE_POSITION = keccak256('diamond.standard.diamond.storage');\\n\\n  struct FacetAddressAndPosition {\\n    address facetAddress;\\n    uint16 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n  }\\n\\n  struct FacetFunctionSelectors {\\n    bytes4[] functionSelectors;\\n    uint16 facetAddressPosition; // position of facetAddress in facetAddresses array\\n  }\\n\\n  struct DiamondStorage {\\n    // maps function selector to the facet address and\\n    // the position of the selector in the facetFunctionSelectors.selectors array\\n    mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n    // maps facet addresses to function selectors\\n    mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n    // facet addresses\\n    address[] facetAddresses;\\n    // Used to query if a contract implements an interface.\\n    // Used to implement ERC-165.\\n    mapping(bytes4 => bool) supportedInterfaces;\\n    // owner of the contract\\n    address contractOwner;\\n  }\\n\\n  function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n    bytes32 position = DIAMOND_STORAGE_POSITION;\\n    assembly {\\n      ds.slot := position\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x6a24487e68ce45b38fe1a5403f4fa2289f8c380bab11c116a84345424c1e1e41\",\"license\":\"MIT\"},\"contracts/ERC1155URI/ERC1155URI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport '@solidstate/contracts/token/ERC1155/ERC1155.sol';\\nimport './ERC1155URIStorage.sol';\\n\\nabstract contract ERC1155URI is ERC1155 {\\n  function uri(uint256 _tokenId) public view virtual override returns (string memory) {\\n    string memory tokenURI = ERC1155URIStorage.layout().tokenURIs[_tokenId];\\n    require(bytes(tokenURI).length != 0, 'ERC1155URI: tokenId not exist');\\n    return string(abi.encodePacked(ERC1155URIStorage.layout().uri, tokenURI));\\n  }\\n\\n  function setURI(string memory newUri) internal virtual {\\n    ERC1155URIStorage.layout().uri = newUri;\\n  }\\n\\n  function setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n    ERC1155URIStorage.layout().tokenURIs[tokenId] = _tokenURI;\\n  }\\n}\\n\",\"keccak256\":\"0x2715c4f7facb6b86328f9476db4c1763e79757ece73936f53ef7c1ad275a7212\",\"license\":\"MIT\"},\"contracts/ERC1155URI/ERC1155URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nlibrary ERC1155URIStorage {\\n  bytes32 internal constant STORAGESLOT = keccak256('diamond.storage.ERC1155URI');\\n\\n  struct Layout {\\n    mapping(uint256 => string) tokenURIs;\\n    string uri;\\n  }\\n\\n  function layout() internal pure returns (Layout storage lay) {\\n    bytes32 slot = STORAGESLOT;\\n    assembly {\\n      lay.slot := slot\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x6464720e555c147745804afb8b1c64c9b23f011ca6dd28cac46e4cef764e3ff4\",\"license\":\"MIT\"},\"contracts/libraries/LibAppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport '@openzeppelin/contracts/utils/Counters.sol';\\n\\n//\\n\\nlibrary LibAppStorage {\\n  bytes32 public constant STORAGE_SLOT = keccak256('app.storage');\\n\\n  struct Layout {\\n    address manager;\\n    address opensea;\\n    Counters.Counter totalSupply;\\n    mapping(address => Counters.Counter) minterNonce;\\n    address oncyber;\\n  }\\n\\n  function layout() internal pure returns (Layout storage lay) {\\n    bytes32 slot = STORAGE_SLOT;\\n    assembly {\\n      lay.slot := slot\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x6e358a29e3e4bf729ae9f78f09abff0f22a8a939d2253d1d1c36f7c2daa09c9c\",\"license\":\"MIT\"},\"contracts/libraries/LibDropStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\n//\\nimport '@openzeppelin/contracts/utils/Counters.sol';\\n\\nlibrary LibDropStorage {\\n  bytes32 public constant STORAGE_SLOT = keccak256('drop.app.storage');\\n  // Deprecated\\n  struct DropV1 {\\n    uint256 timeStart;\\n    uint256 timeEnd;\\n    uint256 priceStart;\\n    uint256 priceEnd;\\n    uint256 stepDuration;\\n    uint256 amountCap;\\n    uint256 shareCyber;\\n    address payable creator;\\n    Counters.Counter minted;\\n    mapping(address => Counters.Counter) mintCounter;\\n  }\\n\\n  struct Layout {\\n    mapping(uint256 => DropV1) dropsV1; // Deprecated\\n    mapping(uint256 => Drop) drops;\\n  }\\n\\n  function layout() internal pure returns (Layout storage lay) {\\n    bytes32 slot = STORAGE_SLOT;\\n    assembly {\\n      lay.slot := slot\\n    }\\n  }\\n\\n  struct Drop {\\n    uint256 timeStart;\\n    uint256 timeEnd;\\n    uint256 price;\\n    uint256 amountCap;\\n    uint256 shareCyber;\\n    address payable creator;\\n    uint256 minted;\\n    mapping(address => Counters.Counter) mintCounter;\\n  }\\n}\\n\",\"keccak256\":\"0x5ea5592d7b46ce1d63a7e3ca5d36cf91bffcc3d046b50444abb9932eeca9d5b0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506159f080620000216000396000f3fe6080604052600436106101345760003560e01c8063572b6c05116100ab578063b3a721d11161006f578063b3a721d1146104a2578063bc01188e146104df578063bd85b0391461050a578063e751c98114610547578063e985e9c514610584578063f242432a146105c157610134565b8063572b6c051461037f5780636787d449146103bc5780636dcfd841146103ff57806385bff2e71461043c578063a22cb4651461047957610134565b806313ba55df116100fd57806313ba55df1461024957806318160ddd146102865780631b023947146102b15780632eb2c2d6146102ee578063481c6a75146103175780634e1273f41461034257610134565b8062fdd58e1461013957806301ffc9a71461017657806308dc9f42146101b35780630b885ac3146101e35780630e89341c1461020c575b600080fd5b34801561014557600080fd5b50610160600480360381019061015b919061353d565b6105ea565b60405161016d919061358c565b60405180910390f35b34801561018257600080fd5b5061019d600480360381019061019891906135ff565b6105fe565b6040516101aa9190613647565b60405180910390f35b6101cd60048036038101906101c891906137a8565b610621565b6040516101da9190613647565b60405180910390f35b3480156101ef57600080fd5b5061020a600480360381019061020591906138b8565b610a71565b005b34801561021857600080fd5b50610233600480360381019061022e919061394f565b610cd5565b6040516102409190613a04565b60405180910390f35b34801561025557600080fd5b50610270600480360381019061026b919061394f565b610df8565b60405161027d919061358c565b60405180910390f35b34801561029257600080fd5b5061029b610e25565b6040516102a8919061358c565b60405180910390f35b3480156102bd57600080fd5b506102d860048036038101906102d39190613a26565b610e3f565b6040516102e5919061358c565b60405180910390f35b3480156102fa57600080fd5b5061031560048036038101906103109190613b1b565b610e98565b005b34801561032357600080fd5b5061032c610f2c565b6040516103399190613bf9565b60405180910390f35b34801561034e57600080fd5b5061036960048036038101906103649190613cd7565b610f5f565b6040516103769190613e0d565b60405180910390f35b34801561038b57600080fd5b506103a660048036038101906103a19190613a26565b611153565b6040516103b39190613647565b60405180910390f35b3480156103c857600080fd5b506103e360048036038101906103de919061394f565b6111b6565b6040516103f69796959493929190613e2f565b60405180910390f35b34801561040b57600080fd5b506104266004803603810190610421919061394f565b611284565b6040516104339190613f5c565b60405180910390f35b34801561044857600080fd5b50610463600480360381019061045e9190613a26565b61138c565b6040516104709190613e0d565b60405180910390f35b34801561048557600080fd5b506104a0600480360381019061049b9190613faa565b611492565b005b3480156104ae57600080fd5b506104c960048036038101906104c49190613fea565b611606565b6040516104d6919061358c565b60405180910390f35b3480156104eb57600080fd5b506104f46116c0565b6040516105019190613bf9565b60405180910390f35b34801561051657600080fd5b50610531600480360381019061052c919061394f565b6116f3565b60405161053e919061358c565b60405180910390f35b34801561055357600080fd5b5061056e6004803603810190610569919061402a565b611719565b60405161057b919061358c565b60405180910390f35b34801561059057600080fd5b506105ab60048036038101906105a69190614104565b611a50565b6040516105b89190613647565b60405180910390f35b3480156105cd57600080fd5b506105e860048036038101906105e39190614144565b611aed565b005b60006105f68383611b81565b905092915050565b600061061a8261060c611c53565b611c8090919063ffffffff16565b9050919050565b60008061062c611ceb565b90506000610638611d27565b600101600087815260200190815260200160002090508481600601548260030154610663919061420a565b10156106a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069b9061428a565b60405180910390fd5b8060000154421180156106bb575080600101544211155b6106fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f1906142f6565b60405180910390fd5b84816002015461070a9190614316565b341461074b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610742906143bc565b60405180910390fd5b60006107968260070160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611d54565b90506000878785846040516020016107b19493929190614445565b604051602081830303815290604052905060006107cc611d62565b905060006107f2886107e48580519060200120611d8f565b611dbf90919063ffffffff16565b90508160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610886576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087d906144df565b60405180910390fd5b8885600601600082825461089a91906144ff565b925050819055506108ea8560070160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611de6565b610905868b8b60405180602001604052806000815250611dfc565b600085600201541115610a1b57600060648660040154346109269190614316565b6109309190614584565b905060008134610940919061420a565b90508660050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156109ac573d6000803e3d6000fd5b508360040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610a17573d6000803e3d6000fd5b5050505b888a8773ffffffffffffffffffffffffffffffffffffffff167f25b428dfde728ccfaddad7e29e4ac23c24ed7fd1a6e3e3f91894a9a073f5dfff60405160405180910390a4600196505050505050509392505050565b3373ffffffffffffffffffffffffffffffffffffffff16610a90611e1d565b60040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610b0a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0190614601565b60405180910390fd5b82610b13611e4a565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001610b5e611e1d565b60030160007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff021916908315150217905550610bf085611e77565b83610bf9611d62565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081610c43611d62565b60010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080610c8d611d62565b60040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505050565b60606000610ce1611e93565b60000160008481526020019081526020016000208054610d0090614650565b80601f0160208091040260200160405190810160405280929190818152602001828054610d2c90614650565b8015610d795780601f10610d4e57610100808354040283529160200191610d79565b820191906000526020600020905b815481529060010190602001808311610d5c57829003601f168201915b505050505090506000815103610dc4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dbb906146cd565b60405180910390fd5b610dcc611e93565b60010181604051602001610de19291906147c1565b604051602081830303815290604052915050919050565b6000610e1e610e05611ec0565b6001016000848152602001908152602001600020611eed565b9050919050565b6000610e3a610e32611d62565b600201611d54565b905090565b6000610e91610e4c611d62565b60030160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611d54565b9050919050565b3373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480610ed85750610ed78533611a50565b5b610f17576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0e90614857565b60405180910390fd5b610f25338686868686611f02565b5050505050565b6000610f36611d62565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60608151835114610fa5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f9c906148e9565b60405180910390fd5b6000610faf611f26565b60000190506000845167ffffffffffffffff811115610fd157610fd061367d565b5b604051908082528060200260200182016040528015610fff5781602001602082028036833780820191505090505b50905060005b855181101561114757600073ffffffffffffffffffffffffffffffffffffffff1686828151811061103957611038614909565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1603611097576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108e906149aa565b60405180910390fd5b8260008683815181106110ad576110ac614909565b5b6020026020010151815260200190815260200160002060008783815181106110d8576110d7614909565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482828151811061112e5761112d614909565b5b6020026020010181815250508080600101915050611005565b50809250505092915050565b600061115d611e4a565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b6000806000806000806000806111ca611d27565b60010160008a815260200190815260200160002090506000816003015403611227576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161121e90614a16565b60405180910390fd5b806000015481600101548260020154836003015484600401548560050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168660060154975097509750975097509750975050919395979092949650565b60606000611290611ec0565b6001016000848152602001908152602001600020905060006112b182611eed565b67ffffffffffffffff8111156112ca576112c961367d565b5b6040519080825280602002602001820160405280156112f85781602001602082028036833780820191505090505b50905060005b61130783611eed565b811015611381576113218184611f5390919063ffffffff16565b82828151811061133457611333614909565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050808061137990614a36565b9150506112fe565b508092505050919050565b60606000611398611ec0565b60020160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060006113e582611f6d565b67ffffffffffffffff8111156113fe576113fd61367d565b5b60405190808252806020026020018201604052801561142c5781602001602082028036833780820191505090505b50905060005b61143b83611f6d565b811015611487576114558184611f8290919063ffffffff16565b82828151811061146857611467614909565b5b602002602001018181525050808061147f90614a36565b915050611432565b508092505050919050565b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1603611500576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114f790614af0565b60405180910390fd5b80611509611f26565b60010160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516115fa9190613647565b60405180910390a35050565b600080611611611d27565b60010160008581526020019081526020016000209050600081600301540361166e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161166590614a16565b60405180910390fd5b6116b78160070160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611d54565b91505092915050565b60006116ca611d62565b60040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006116fd611ec0565b6000016000838152602001908152602001600020549050919050565b6000808787611728919061420a565b11611768576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161175f90614b5c565b60405180910390fd5b60648311156117ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117a390614bc8565b60405180910390fd5b600084116117ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117e690614c34565b60405180910390fd5b60006117f9611d62565b90506000611805611ceb565b9050600061181282610e3f565b905060008b8b8b8b8b8b8888604051602001611835989796959493929190614c54565b6040516020818303038152906040529050600061186a8761185c8480519060200120611d8f565b611dbf90919063ffffffff16565b90508460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146118fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f5906144df565b60405180910390fd5b61190a85600201611d54565b9550611916868e611f9c565b61192285600201611de6565b61196b8560030160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611de6565b6000611975611d27565b600101600088815260200190815260200160002090508c81600001819055508b81600101819055508a8160020181905550898160030181905550888160040181905550848160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550868573ffffffffffffffffffffffffffffffffffffffff167f4011446e11141f68f741bffe55d700b48cbc73fb927148a01c8f4664c3be014260405160405180910390a3505050505050979650505050505050565b6000611a5a611f26565b60010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b3373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480611b2d5750611b2c8533611a50565b5b611b6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b6390614857565b60405180910390fd5b611b7a338686868686611fca565b5050505050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611bf1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611be890614d54565b60405180910390fd5b611bf9611f26565b600001600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000807f326d0c59a7612f6a9919e2a8ee333c80ba689d8ba2634de89c85cbb04832e70590508091505090565b6000826000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff16905092915050565b60006018600036905010158015611d075750611d0633611153565b5b15611d1b57601436033560601c9050611d23565b339050611d24565b5b90565b6000807f6862122c88c20d0f389f9211fb45e4a0982f5f74838cd11cfb5e8c8b41fbe65990508091505090565b600081600001549050919050565b6000807f47dc25f21c7793543edaeb1ef19d41726ddbada967ae9a7980b9bd8a45228a5e90508091505090565b600081604051602001611da29190614deb565b604051602081830303815290604052805190602001209050919050565b6000806000611dce8585611fee565b91509150611ddb8161206f565b819250505092915050565b6001816000016000828254019250508190555050565b611e088484848461223b565b611e17336000868686866123c4565b50505050565b6000807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90508091505090565b6000807fa5e014e253d3b66bd348c3cdd05f38b9805fff0b6471d004b58c6ada26cae99390508091505090565b80611e80611e93565b6001019081611e8f9190614fa8565b5050565b6000807fb3408a5d8f30170919d3996b6cc182726500ad24733d17ace2f621485f6e7c8390508091505090565b6000807fb31c2c74f86ca3ce94d901f5f5bbe66f7161eec2f7b5aa0b75a86371436424ea90508091505090565b6000611efb8260000161259b565b9050919050565b611f108686868686866125ac565b611f1e8686868686866128b7565b505050505050565b6000807f1799cf914cb0cb442ca7c7ac709ee40d0cb89e87351dc08d517fbda27d50c68b90508091505090565b6000611f628360000183612a8e565b60001c905092915050565b6000611f7b8260000161259b565b9050919050565b6000611f918360000183612a8e565b60001c905092915050565b80611fa5611e93565b60000160008481526020019081526020016000209081611fc59190614fa8565b505050565b611fd8868686868686612b02565b611fe68686868686866123c4565b505050505050565b600080604183510361202f5760008060006020860151925060408601519150606086015160001a905061202387828585612d79565b94509450505050612068565b604083510361205f576000806020850151915060408501519050612054868383612e85565b935093505050612068565b60006002915091505b9250929050565b600060048111156120835761208261507a565b5b8160048111156120965761209561507a565b5b031561223857600160048111156120b0576120af61507a565b5b8160048111156120c3576120c261507a565b5b03612103576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120fa906150f5565b60405180910390fd5b600260048111156121175761211661507a565b5b81600481111561212a5761212961507a565b5b0361216a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161216190615161565b60405180910390fd5b6003600481111561217e5761217d61507a565b5b8160048111156121915761219061507a565b5b036121d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121c8906151f3565b60405180910390fd5b6004808111156121e4576121e361507a565b5b8160048111156121f7576121f661507a565b5b03612237576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161222e90615285565b60405180910390fd5b5b50565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036122aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122a190615317565b60405180910390fd5b6122c9336000866122ba87612ee4565b6122c387612ee4565b86612f5e565b60006122d3611f26565b60000160008581526020019081526020016000209050828160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461233791906144ff565b925050819055508473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6287876040516123b5929190615337565b60405180910390a45050505050565b6123e38473ffffffffffffffffffffffffffffffffffffffff16612f74565b15612593578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b81526004016124299594939291906153b5565b6020604051808303816000875af192505050801561246557506040513d601f19601f820116820180604052508101906124629190615424565b60015b61250a5761247161545e565b806308c379a0036124cd5750612485615480565b8061249057506124cf565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124c49190613a04565b60405180910390fd5b505b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161250190615582565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612591576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161258890615614565b60405180910390fd5b505b505050505050565b600081600001805490509050919050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff160361261b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612612906156a6565b60405180910390fd5b815183511461265f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161265690615738565b60405180910390fd5b61266d868686868686612f5e565b6000612677611f26565b600001905060005b845181101561282f57600085828151811061269d5761269c614909565b5b6020026020010151905060008583815181106126bc576126bb614909565b5b60200260200101519050600084600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561275d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612754906157ca565b60405180910390fd5b81810385600085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550508084600084815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461281391906144ff565b925050819055505050808061282790614a36565b91505061267f565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516128a69291906157ea565b60405180910390a450505050505050565b6128d68473ffffffffffffffffffffffffffffffffffffffff16612f74565b15612a86578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b815260040161291c959493929190615821565b6020604051808303816000875af192505050801561295857506040513d601f19601f820116820180604052508101906129559190615424565b60015b6129fd5761296461545e565b806308c379a0036129c05750612978615480565b8061298357506129c2565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129b79190613a04565b60405180910390fd5b505b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129f490615582565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612a84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a7b90615614565b60405180910390fd5b505b505050505050565b600081836000018054905011612ad9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ad0906158fb565b60405180910390fd5b826000018281548110612aef57612aee614909565b5b9060005260206000200154905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603612b71576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b68906156a6565b60405180910390fd5b612b8f868686612b8087612ee4565b612b8987612ee4565b86612f5e565b6000612b99611f26565b6000019050600081600086815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905083811015612c35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c2c906157ca565b60405180910390fd5b83810382600087815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550508281600086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612ceb91906144ff565b925050819055508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628787604051612d68929190615337565b60405180910390a450505050505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c1115612db4576000600391509150612e7c565b601b8560ff1614158015612dcc5750601c8560ff1614155b15612dde576000600491509150612e7c565b600060018787878760405160008152602001604052604051612e039493929190615946565b6020604051602081039080840390855afa158015612e25573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612e7357600060019250925050612e7c565b80600092509250505b94509492505050565b60008060007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60001b841690506000601b60ff8660001c901c612ec891906144ff565b9050612ed687828885612d79565b935093505050935093915050565b60606000600167ffffffffffffffff811115612f0357612f0261367d565b5b604051908082528060200260200182016040528015612f315781602001602082028036833780820191505090505b5090508281600081518110612f4957612f48614909565b5b60200260200101818152505080915050919050565b612f6c868686868686612f87565b505050505050565b600080823b905060008111915050919050565b612f95868686868686612f9d565b505050505050565b612fab868686868686613254565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161461324c576000612fe8611ec0565b9050600081600101905060008260020160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008360020160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060005b875181101561324657600087828151811061309d5761309c614909565b5b6020026020010151905060008111156132325760008983815181106130c5576130c4614909565b5b60200260200101519050600073ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff16036131345781876000016000838152602001908152602001600020600082825461312891906144ff565b9250508190555061317f565b8161313f8d83611b81565b0361317e576131688c87600084815260200190815260200160002061325c90919063ffffffff16565b5061317c818661328c90919063ffffffff16565b505b5b600073ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff16036131e4578187600001600083815260200190815260200160002060008282546131d8919061420a565b92505081905550613230565b60006131f08c83611b81565b0361322f576132198b8760008481526020019081526020016000206132a690919063ffffffff16565b5061322d81856132d690919063ffffffff16565b505b5b505b50808061323e90614a36565b91505061307f565b50505050505b505050505050565b505050505050565b6000613284836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6132f0565b905092915050565b600061329e836000018360001b6132f0565b905092915050565b60006132ce836000018373ffffffffffffffffffffffffffffffffffffffff1660001b613402565b905092915050565b60006132e8836000018360001b613402565b905092915050565b600080836001016000848152602001908152602001600020549050600081146133f6576000600182613322919061420a565b90506000856000016001876000018054905061333e919061420a565b8154811061334f5761334e614909565b5b906000526020600020015490508086600001838154811061337357613372614909565b5b906000526020600020018190555060018261338e91906144ff565b86600101600083815260200190815260200160002081905550856000018054806133bb576133ba61598b565b5b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506133fc565b60009150505b92915050565b600061340e8383613472565b61346757826000018290806001815401808255809150506001900390600052602060002001600090919091909150558260000180549050836001016000848152602001908152602001600020819055506001905061346c565b600090505b92915050565b600080836001016000848152602001908152602001600020541415905092915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006134d4826134a9565b9050919050565b6134e4816134c9565b81146134ef57600080fd5b50565b600081359050613501816134db565b92915050565b6000819050919050565b61351a81613507565b811461352557600080fd5b50565b60008135905061353781613511565b92915050565b600080604083850312156135545761355361349f565b5b6000613562858286016134f2565b925050602061357385828601613528565b9150509250929050565b61358681613507565b82525050565b60006020820190506135a1600083018461357d565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6135dc816135a7565b81146135e757600080fd5b50565b6000813590506135f9816135d3565b92915050565b6000602082840312156136155761361461349f565b5b6000613623848285016135ea565b91505092915050565b60008115159050919050565b6136418161362c565b82525050565b600060208201905061365c6000830184613638565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6136b58261366c565b810181811067ffffffffffffffff821117156136d4576136d361367d565b5b80604052505050565b60006136e7613495565b90506136f382826136ac565b919050565b600067ffffffffffffffff8211156137135761371261367d565b5b61371c8261366c565b9050602081019050919050565b82818337600083830152505050565b600061374b613746846136f8565b6136dd565b90508281526020810184848401111561376757613766613667565b5b613772848285613729565b509392505050565b600082601f83011261378f5761378e613662565b5b813561379f848260208601613738565b91505092915050565b6000806000606084860312156137c1576137c061349f565b5b60006137cf86828701613528565b93505060206137e086828701613528565b925050604084013567ffffffffffffffff811115613801576138006134a4565b5b61380d8682870161377a565b9150509250925092565b600067ffffffffffffffff8211156138325761383161367d565b5b61383b8261366c565b9050602081019050919050565b600061385b61385684613817565b6136dd565b90508281526020810184848401111561387757613876613667565b5b613882848285613729565b509392505050565b600082601f83011261389f5761389e613662565b5b81356138af848260208601613848565b91505092915050565b600080600080600060a086880312156138d4576138d361349f565b5b600086013567ffffffffffffffff8111156138f2576138f16134a4565b5b6138fe8882890161388a565b955050602061390f888289016134f2565b9450506040613920888289016134f2565b9350506060613931888289016134f2565b9250506080613942888289016134f2565b9150509295509295909350565b6000602082840312156139655761396461349f565b5b600061397384828501613528565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156139b657808201518184015260208101905061399b565b838111156139c5576000848401525b50505050565b60006139d68261397c565b6139e08185613987565b93506139f0818560208601613998565b6139f98161366c565b840191505092915050565b60006020820190508181036000830152613a1e81846139cb565b905092915050565b600060208284031215613a3c57613a3b61349f565b5b6000613a4a848285016134f2565b91505092915050565b600067ffffffffffffffff821115613a6e57613a6d61367d565b5b602082029050602081019050919050565b600080fd5b6000613a97613a9284613a53565b6136dd565b90508083825260208201905060208402830185811115613aba57613ab9613a7f565b5b835b81811015613ae35780613acf8882613528565b845260208401935050602081019050613abc565b5050509392505050565b600082601f830112613b0257613b01613662565b5b8135613b12848260208601613a84565b91505092915050565b600080600080600060a08688031215613b3757613b3661349f565b5b6000613b45888289016134f2565b9550506020613b56888289016134f2565b945050604086013567ffffffffffffffff811115613b7757613b766134a4565b5b613b8388828901613aed565b935050606086013567ffffffffffffffff811115613ba457613ba36134a4565b5b613bb088828901613aed565b925050608086013567ffffffffffffffff811115613bd157613bd06134a4565b5b613bdd8882890161377a565b9150509295509295909350565b613bf3816134c9565b82525050565b6000602082019050613c0e6000830184613bea565b92915050565b600067ffffffffffffffff821115613c2f57613c2e61367d565b5b602082029050602081019050919050565b6000613c53613c4e84613c14565b6136dd565b90508083825260208201905060208402830185811115613c7657613c75613a7f565b5b835b81811015613c9f5780613c8b88826134f2565b845260208401935050602081019050613c78565b5050509392505050565b600082601f830112613cbe57613cbd613662565b5b8135613cce848260208601613c40565b91505092915050565b60008060408385031215613cee57613ced61349f565b5b600083013567ffffffffffffffff811115613d0c57613d0b6134a4565b5b613d1885828601613ca9565b925050602083013567ffffffffffffffff811115613d3957613d386134a4565b5b613d4585828601613aed565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613d8481613507565b82525050565b6000613d968383613d7b565b60208301905092915050565b6000602082019050919050565b6000613dba82613d4f565b613dc48185613d5a565b9350613dcf83613d6b565b8060005b83811015613e00578151613de78882613d8a565b9750613df283613da2565b925050600181019050613dd3565b5085935050505092915050565b60006020820190508181036000830152613e278184613daf565b905092915050565b600060e082019050613e44600083018a61357d565b613e51602083018961357d565b613e5e604083018861357d565b613e6b606083018761357d565b613e78608083018661357d565b613e8560a0830185613bea565b613e9260c083018461357d565b98975050505050505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613ed3816134c9565b82525050565b6000613ee58383613eca565b60208301905092915050565b6000602082019050919050565b6000613f0982613e9e565b613f138185613ea9565b9350613f1e83613eba565b8060005b83811015613f4f578151613f368882613ed9565b9750613f4183613ef1565b925050600181019050613f22565b5085935050505092915050565b60006020820190508181036000830152613f768184613efe565b905092915050565b613f878161362c565b8114613f9257600080fd5b50565b600081359050613fa481613f7e565b92915050565b60008060408385031215613fc157613fc061349f565b5b6000613fcf858286016134f2565b9250506020613fe085828601613f95565b9150509250929050565b600080604083850312156140015761400061349f565b5b600061400f85828601613528565b9250506020614020858286016134f2565b9150509250929050565b600080600080600080600060e0888a0312156140495761404861349f565b5b600088013567ffffffffffffffff811115614067576140666134a4565b5b6140738a828b0161388a565b97505060206140848a828b01613528565b96505060406140958a828b01613528565b95505060606140a68a828b01613528565b94505060806140b78a828b01613528565b93505060a06140c88a828b01613528565b92505060c088013567ffffffffffffffff8111156140e9576140e86134a4565b5b6140f58a828b0161377a565b91505092959891949750929550565b6000806040838503121561411b5761411a61349f565b5b6000614129858286016134f2565b925050602061413a858286016134f2565b9150509250929050565b600080600080600060a086880312156141605761415f61349f565b5b600061416e888289016134f2565b955050602061417f888289016134f2565b945050604061419088828901613528565b93505060606141a188828901613528565b925050608086013567ffffffffffffffff8111156141c2576141c16134a4565b5b6141ce8882890161377a565b9150509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061421582613507565b915061422083613507565b925082821015614233576142326141db565b5b828203905092915050565b7f4352000000000000000000000000000000000000000000000000000000000000600082015250565b6000614274600283613987565b915061427f8261423e565b602082019050919050565b600060208201905081810360008301526142a381614267565b9050919050565b7f4f4f540000000000000000000000000000000000000000000000000000000000600082015250565b60006142e0600383613987565b91506142eb826142aa565b602082019050919050565b6000602082019050818103600083015261430f816142d3565b9050919050565b600061432182613507565b915061432c83613507565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614365576143646141db565b5b828202905092915050565b7f4941000000000000000000000000000000000000000000000000000000000000600082015250565b60006143a6600283613987565b91506143b182614370565b602082019050919050565b600060208201905081810360008301526143d581614399565b9050919050565b6000819050919050565b6143f76143f282613507565b6143dc565b82525050565b60008160601b9050919050565b6000614415826143fd565b9050919050565b60006144278261440a565b9050919050565b61443f61443a826134c9565b61441c565b82525050565b600061445182876143e6565b60208201915061446182866143e6565b602082019150614471828561442e565b60148201915061448182846143e6565b60208201915081905095945050505050565b7f4e4d000000000000000000000000000000000000000000000000000000000000600082015250565b60006144c9600283613987565b91506144d482614493565b602082019050919050565b600060208201905081810360008301526144f8816144bc565b9050919050565b600061450a82613507565b915061451583613507565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561454a576145496141db565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061458f82613507565b915061459a83613507565b9250826145aa576145a9614555565b5b828204905092915050565b7f4e4f000000000000000000000000000000000000000000000000000000000000600082015250565b60006145eb600283613987565b91506145f6826145b5565b602082019050919050565b6000602082019050818103600083015261461a816145de565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061466857607f821691505b60208210810361467b5761467a614621565b5b50919050565b7f455243313135355552493a20746f6b656e4964206e6f74206578697374000000600082015250565b60006146b7601d83613987565b91506146c282614681565b602082019050919050565b600060208201905081810360008301526146e6816146aa565b9050919050565b600081905092915050565b60008190508160005260206000209050919050565b6000815461471a81614650565b61472481866146ed565b9450600182166000811461473f576001811461475457614787565b60ff1983168652811515820286019350614787565b61475d856146f8565b60005b8381101561477f57815481890152600182019150602081019050614760565b838801955050505b50505092915050565b600061479b8261397c565b6147a581856146ed565b93506147b5818560208601613998565b80840191505092915050565b60006147cd828561470d565b91506147d98284614790565b91508190509392505050565b7f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260008201527f20617070726f7665640000000000000000000000000000000000000000000000602082015250565b6000614841602983613987565b915061484c826147e5565b604082019050919050565b6000602082019050818103600083015261487081614834565b9050919050565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b60006148d3602983613987565b91506148de82614877565b604082019050919050565b60006020820190508181036000830152614902816148c6565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f455243313135353a2062617463682062616c616e636520717565727920666f7260008201527f20746865207a65726f2061646472657373000000000000000000000000000000602082015250565b6000614994603183613987565b915061499f82614938565b604082019050919050565b600060208201905081810360008301526149c381614987565b9050919050565b7f444e450000000000000000000000000000000000000000000000000000000000600082015250565b6000614a00600383613987565b9150614a0b826149ca565b602082019050919050565b60006020820190508181036000830152614a2f816149f3565b9050919050565b6000614a4182613507565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203614a7357614a726141db565b5b600182019050919050565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b6000614ada602983613987565b9150614ae582614a7e565b604082019050919050565b60006020820190508181036000830152614b0981614acd565b9050919050565b7f4954000000000000000000000000000000000000000000000000000000000000600082015250565b6000614b46600283613987565b9150614b5182614b10565b602082019050919050565b60006020820190508181036000830152614b7581614b39565b9050919050565b7f49534f0000000000000000000000000000000000000000000000000000000000600082015250565b6000614bb2600383613987565b9150614bbd82614b7c565b602082019050919050565b60006020820190508181036000830152614be181614ba5565b9050919050565b7f4941430000000000000000000000000000000000000000000000000000000000600082015250565b6000614c1e600383613987565b9150614c2982614be8565b602082019050919050565b60006020820190508181036000830152614c4d81614c11565b9050919050565b6000614c60828b614790565b9150614c6c828a6143e6565b602082019150614c7c82896143e6565b602082019150614c8c82886143e6565b602082019150614c9c82876143e6565b602082019150614cac82866143e6565b602082019150614cbc828561442e565b601482019150614ccc82846143e6565b6020820191508190509998505050505050505050565b7f455243313135353a2062616c616e636520717565727920666f7220746865207a60008201527f65726f2061646472657373000000000000000000000000000000000000000000602082015250565b6000614d3e602b83613987565b9150614d4982614ce2565b604082019050919050565b60006020820190508181036000830152614d6d81614d31565b9050919050565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b6000614daa601c836146ed565b9150614db582614d74565b601c82019050919050565b6000819050919050565b6000819050919050565b614de5614de082614dc0565b614dca565b82525050565b6000614df682614d9d565b9150614e028284614dd4565b60208201915081905092915050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302614e5e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82614e21565b614e688683614e21565b95508019841693508086168417925050509392505050565b6000819050919050565b6000614ea5614ea0614e9b84613507565b614e80565b613507565b9050919050565b6000819050919050565b614ebf83614e8a565b614ed3614ecb82614eac565b848454614e2e565b825550505050565b600090565b614ee8614edb565b614ef3818484614eb6565b505050565b5b81811015614f1757614f0c600082614ee0565b600181019050614ef9565b5050565b601f821115614f5c57614f2d816146f8565b614f3684614e11565b81016020851015614f45578190505b614f59614f5185614e11565b830182614ef8565b50505b505050565b600082821c905092915050565b6000614f7f60001984600802614f61565b1980831691505092915050565b6000614f988383614f6e565b9150826002028217905092915050565b614fb18261397c565b67ffffffffffffffff811115614fca57614fc961367d565b5b614fd48254614650565b614fdf828285614f1b565b600060209050601f8311600181146150125760008415615000578287015190505b61500a8582614f8c565b865550615072565b601f198416615020866146f8565b60005b8281101561504857848901518255600182019150602085019450602081019050615023565b868310156150655784890151615061601f891682614f6e565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b60006150df601883613987565b91506150ea826150a9565b602082019050919050565b6000602082019050818103600083015261510e816150d2565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b600061514b601f83613987565b915061515682615115565b602082019050919050565b6000602082019050818103600083015261517a8161513e565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b60006151dd602283613987565b91506151e882615181565b604082019050919050565b6000602082019050818103600083015261520c816151d0565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b600061526f602283613987565b915061527a82615213565b604082019050919050565b6000602082019050818103600083015261529e81615262565b9050919050565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000615301602183613987565b915061530c826152a5565b604082019050919050565b60006020820190508181036000830152615330816152f4565b9050919050565b600060408201905061534c600083018561357d565b615359602083018461357d565b9392505050565b600081519050919050565b600082825260208201905092915050565b600061538782615360565b615391818561536b565b93506153a1818560208601613998565b6153aa8161366c565b840191505092915050565b600060a0820190506153ca6000830188613bea565b6153d76020830187613bea565b6153e4604083018661357d565b6153f1606083018561357d565b8181036080830152615403818461537c565b90509695505050505050565b60008151905061541e816135d3565b92915050565b60006020828403121561543a5761543961349f565b5b60006154488482850161540f565b91505092915050565b60008160e01c9050919050565b600060033d111561547d5760046000803e61547a600051615451565b90505b90565b600060443d1061550d57615492613495565b60043d036004823e80513d602482011167ffffffffffffffff821117156154ba57505061550d565b808201805167ffffffffffffffff8111156154d8575050505061550d565b80602083010160043d0385018111156154f557505050505061550d565b615504826020018501866136ac565b82955050505050505b90565b7f455243313135353a207472616e7366657220746f206e6f6e204552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b600061556c603483613987565b915061557782615510565b604082019050919050565b6000602082019050818103600083015261559b8161555f565b9050919050565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b60006155fe602883613987565b9150615609826155a2565b604082019050919050565b6000602082019050818103600083015261562d816155f1565b9050919050565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000615690602583613987565b915061569b82615634565b604082019050919050565b600060208201905081810360008301526156bf81615683565b9050919050565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b6000615722602883613987565b915061572d826156c6565b604082019050919050565b6000602082019050818103600083015261575181615715565b9050919050565b7f455243313135353a20696e73756666696369656e742062616c616e636573206660008201527f6f72207472616e73666572000000000000000000000000000000000000000000602082015250565b60006157b4602b83613987565b91506157bf82615758565b604082019050919050565b600060208201905081810360008301526157e3816157a7565b9050919050565b600060408201905081810360008301526158048185613daf565b905081810360208301526158188184613daf565b90509392505050565b600060a0820190506158366000830188613bea565b6158436020830187613bea565b81810360408301526158558186613daf565b905081810360608301526158698185613daf565b9050818103608083015261587d818461537c565b90509695505050505050565b7f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e60008201527f6473000000000000000000000000000000000000000000000000000000000000602082015250565b60006158e5602283613987565b91506158f082615889565b604082019050919050565b60006020820190508181036000830152615914816158d8565b9050919050565b61592481614dc0565b82525050565b600060ff82169050919050565b6159408161592a565b82525050565b600060808201905061595b600083018761591b565b6159686020830186615937565b615975604083018561591b565b615982606083018461591b565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea26469706673582212205ef0dd6a770a79b48fb9c392d329c80ac29ae85522a1e1992d44e48ca3f9894664736f6c634300080f0033",
  "deployedBytecode": "0x6080604052600436106101345760003560e01c8063572b6c05116100ab578063b3a721d11161006f578063b3a721d1146104a2578063bc01188e146104df578063bd85b0391461050a578063e751c98114610547578063e985e9c514610584578063f242432a146105c157610134565b8063572b6c051461037f5780636787d449146103bc5780636dcfd841146103ff57806385bff2e71461043c578063a22cb4651461047957610134565b806313ba55df116100fd57806313ba55df1461024957806318160ddd146102865780631b023947146102b15780632eb2c2d6146102ee578063481c6a75146103175780634e1273f41461034257610134565b8062fdd58e1461013957806301ffc9a71461017657806308dc9f42146101b35780630b885ac3146101e35780630e89341c1461020c575b600080fd5b34801561014557600080fd5b50610160600480360381019061015b919061353d565b6105ea565b60405161016d919061358c565b60405180910390f35b34801561018257600080fd5b5061019d600480360381019061019891906135ff565b6105fe565b6040516101aa9190613647565b60405180910390f35b6101cd60048036038101906101c891906137a8565b610621565b6040516101da9190613647565b60405180910390f35b3480156101ef57600080fd5b5061020a600480360381019061020591906138b8565b610a71565b005b34801561021857600080fd5b50610233600480360381019061022e919061394f565b610cd5565b6040516102409190613a04565b60405180910390f35b34801561025557600080fd5b50610270600480360381019061026b919061394f565b610df8565b60405161027d919061358c565b60405180910390f35b34801561029257600080fd5b5061029b610e25565b6040516102a8919061358c565b60405180910390f35b3480156102bd57600080fd5b506102d860048036038101906102d39190613a26565b610e3f565b6040516102e5919061358c565b60405180910390f35b3480156102fa57600080fd5b5061031560048036038101906103109190613b1b565b610e98565b005b34801561032357600080fd5b5061032c610f2c565b6040516103399190613bf9565b60405180910390f35b34801561034e57600080fd5b5061036960048036038101906103649190613cd7565b610f5f565b6040516103769190613e0d565b60405180910390f35b34801561038b57600080fd5b506103a660048036038101906103a19190613a26565b611153565b6040516103b39190613647565b60405180910390f35b3480156103c857600080fd5b506103e360048036038101906103de919061394f565b6111b6565b6040516103f69796959493929190613e2f565b60405180910390f35b34801561040b57600080fd5b506104266004803603810190610421919061394f565b611284565b6040516104339190613f5c565b60405180910390f35b34801561044857600080fd5b50610463600480360381019061045e9190613a26565b61138c565b6040516104709190613e0d565b60405180910390f35b34801561048557600080fd5b506104a0600480360381019061049b9190613faa565b611492565b005b3480156104ae57600080fd5b506104c960048036038101906104c49190613fea565b611606565b6040516104d6919061358c565b60405180910390f35b3480156104eb57600080fd5b506104f46116c0565b6040516105019190613bf9565b60405180910390f35b34801561051657600080fd5b50610531600480360381019061052c919061394f565b6116f3565b60405161053e919061358c565b60405180910390f35b34801561055357600080fd5b5061056e6004803603810190610569919061402a565b611719565b60405161057b919061358c565b60405180910390f35b34801561059057600080fd5b506105ab60048036038101906105a69190614104565b611a50565b6040516105b89190613647565b60405180910390f35b3480156105cd57600080fd5b506105e860048036038101906105e39190614144565b611aed565b005b60006105f68383611b81565b905092915050565b600061061a8261060c611c53565b611c8090919063ffffffff16565b9050919050565b60008061062c611ceb565b90506000610638611d27565b600101600087815260200190815260200160002090508481600601548260030154610663919061420a565b10156106a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069b9061428a565b60405180910390fd5b8060000154421180156106bb575080600101544211155b6106fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f1906142f6565b60405180910390fd5b84816002015461070a9190614316565b341461074b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610742906143bc565b60405180910390fd5b60006107968260070160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611d54565b90506000878785846040516020016107b19493929190614445565b604051602081830303815290604052905060006107cc611d62565b905060006107f2886107e48580519060200120611d8f565b611dbf90919063ffffffff16565b90508160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610886576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087d906144df565b60405180910390fd5b8885600601600082825461089a91906144ff565b925050819055506108ea8560070160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611de6565b610905868b8b60405180602001604052806000815250611dfc565b600085600201541115610a1b57600060648660040154346109269190614316565b6109309190614584565b905060008134610940919061420a565b90508660050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156109ac573d6000803e3d6000fd5b508360040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610a17573d6000803e3d6000fd5b5050505b888a8773ffffffffffffffffffffffffffffffffffffffff167f25b428dfde728ccfaddad7e29e4ac23c24ed7fd1a6e3e3f91894a9a073f5dfff60405160405180910390a4600196505050505050509392505050565b3373ffffffffffffffffffffffffffffffffffffffff16610a90611e1d565b60040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610b0a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0190614601565b60405180910390fd5b82610b13611e4a565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001610b5e611e1d565b60030160007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff021916908315150217905550610bf085611e77565b83610bf9611d62565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081610c43611d62565b60010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080610c8d611d62565b60040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505050565b60606000610ce1611e93565b60000160008481526020019081526020016000208054610d0090614650565b80601f0160208091040260200160405190810160405280929190818152602001828054610d2c90614650565b8015610d795780601f10610d4e57610100808354040283529160200191610d79565b820191906000526020600020905b815481529060010190602001808311610d5c57829003601f168201915b505050505090506000815103610dc4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dbb906146cd565b60405180910390fd5b610dcc611e93565b60010181604051602001610de19291906147c1565b604051602081830303815290604052915050919050565b6000610e1e610e05611ec0565b6001016000848152602001908152602001600020611eed565b9050919050565b6000610e3a610e32611d62565b600201611d54565b905090565b6000610e91610e4c611d62565b60030160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611d54565b9050919050565b3373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480610ed85750610ed78533611a50565b5b610f17576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0e90614857565b60405180910390fd5b610f25338686868686611f02565b5050505050565b6000610f36611d62565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60608151835114610fa5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f9c906148e9565b60405180910390fd5b6000610faf611f26565b60000190506000845167ffffffffffffffff811115610fd157610fd061367d565b5b604051908082528060200260200182016040528015610fff5781602001602082028036833780820191505090505b50905060005b855181101561114757600073ffffffffffffffffffffffffffffffffffffffff1686828151811061103957611038614909565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1603611097576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161108e906149aa565b60405180910390fd5b8260008683815181106110ad576110ac614909565b5b6020026020010151815260200190815260200160002060008783815181106110d8576110d7614909565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482828151811061112e5761112d614909565b5b6020026020010181815250508080600101915050611005565b50809250505092915050565b600061115d611e4a565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b6000806000806000806000806111ca611d27565b60010160008a815260200190815260200160002090506000816003015403611227576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161121e90614a16565b60405180910390fd5b806000015481600101548260020154836003015484600401548560050160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168660060154975097509750975097509750975050919395979092949650565b60606000611290611ec0565b6001016000848152602001908152602001600020905060006112b182611eed565b67ffffffffffffffff8111156112ca576112c961367d565b5b6040519080825280602002602001820160405280156112f85781602001602082028036833780820191505090505b50905060005b61130783611eed565b811015611381576113218184611f5390919063ffffffff16565b82828151811061133457611333614909565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050808061137990614a36565b9150506112fe565b508092505050919050565b60606000611398611ec0565b60020160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060006113e582611f6d565b67ffffffffffffffff8111156113fe576113fd61367d565b5b60405190808252806020026020018201604052801561142c5781602001602082028036833780820191505090505b50905060005b61143b83611f6d565b811015611487576114558184611f8290919063ffffffff16565b82828151811061146857611467614909565b5b602002602001018181525050808061147f90614a36565b915050611432565b508092505050919050565b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1603611500576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114f790614af0565b60405180910390fd5b80611509611f26565b60010160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516115fa9190613647565b60405180910390a35050565b600080611611611d27565b60010160008581526020019081526020016000209050600081600301540361166e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161166590614a16565b60405180910390fd5b6116b78160070160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611d54565b91505092915050565b60006116ca611d62565b60040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006116fd611ec0565b6000016000838152602001908152602001600020549050919050565b6000808787611728919061420a565b11611768576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161175f90614b5c565b60405180910390fd5b60648311156117ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117a390614bc8565b60405180910390fd5b600084116117ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117e690614c34565b60405180910390fd5b60006117f9611d62565b90506000611805611ceb565b9050600061181282610e3f565b905060008b8b8b8b8b8b8888604051602001611835989796959493929190614c54565b6040516020818303038152906040529050600061186a8761185c8480519060200120611d8f565b611dbf90919063ffffffff16565b90508460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146118fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f5906144df565b60405180910390fd5b61190a85600201611d54565b9550611916868e611f9c565b61192285600201611de6565b61196b8560030160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611de6565b6000611975611d27565b600101600088815260200190815260200160002090508c81600001819055508b81600101819055508a8160020181905550898160030181905550888160040181905550848160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550868573ffffffffffffffffffffffffffffffffffffffff167f4011446e11141f68f741bffe55d700b48cbc73fb927148a01c8f4664c3be014260405160405180910390a3505050505050979650505050505050565b6000611a5a611f26565b60010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b3373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480611b2d5750611b2c8533611a50565b5b611b6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b6390614857565b60405180910390fd5b611b7a338686868686611fca565b5050505050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611bf1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611be890614d54565b60405180910390fd5b611bf9611f26565b600001600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000807f326d0c59a7612f6a9919e2a8ee333c80ba689d8ba2634de89c85cbb04832e70590508091505090565b6000826000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff16905092915050565b60006018600036905010158015611d075750611d0633611153565b5b15611d1b57601436033560601c9050611d23565b339050611d24565b5b90565b6000807f6862122c88c20d0f389f9211fb45e4a0982f5f74838cd11cfb5e8c8b41fbe65990508091505090565b600081600001549050919050565b6000807f47dc25f21c7793543edaeb1ef19d41726ddbada967ae9a7980b9bd8a45228a5e90508091505090565b600081604051602001611da29190614deb565b604051602081830303815290604052805190602001209050919050565b6000806000611dce8585611fee565b91509150611ddb8161206f565b819250505092915050565b6001816000016000828254019250508190555050565b611e088484848461223b565b611e17336000868686866123c4565b50505050565b6000807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90508091505090565b6000807fa5e014e253d3b66bd348c3cdd05f38b9805fff0b6471d004b58c6ada26cae99390508091505090565b80611e80611e93565b6001019081611e8f9190614fa8565b5050565b6000807fb3408a5d8f30170919d3996b6cc182726500ad24733d17ace2f621485f6e7c8390508091505090565b6000807fb31c2c74f86ca3ce94d901f5f5bbe66f7161eec2f7b5aa0b75a86371436424ea90508091505090565b6000611efb8260000161259b565b9050919050565b611f108686868686866125ac565b611f1e8686868686866128b7565b505050505050565b6000807f1799cf914cb0cb442ca7c7ac709ee40d0cb89e87351dc08d517fbda27d50c68b90508091505090565b6000611f628360000183612a8e565b60001c905092915050565b6000611f7b8260000161259b565b9050919050565b6000611f918360000183612a8e565b60001c905092915050565b80611fa5611e93565b60000160008481526020019081526020016000209081611fc59190614fa8565b505050565b611fd8868686868686612b02565b611fe68686868686866123c4565b505050505050565b600080604183510361202f5760008060006020860151925060408601519150606086015160001a905061202387828585612d79565b94509450505050612068565b604083510361205f576000806020850151915060408501519050612054868383612e85565b935093505050612068565b60006002915091505b9250929050565b600060048111156120835761208261507a565b5b8160048111156120965761209561507a565b5b031561223857600160048111156120b0576120af61507a565b5b8160048111156120c3576120c261507a565b5b03612103576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120fa906150f5565b60405180910390fd5b600260048111156121175761211661507a565b5b81600481111561212a5761212961507a565b5b0361216a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161216190615161565b60405180910390fd5b6003600481111561217e5761217d61507a565b5b8160048111156121915761219061507a565b5b036121d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121c8906151f3565b60405180910390fd5b6004808111156121e4576121e361507a565b5b8160048111156121f7576121f661507a565b5b03612237576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161222e90615285565b60405180910390fd5b5b50565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036122aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122a190615317565b60405180910390fd5b6122c9336000866122ba87612ee4565b6122c387612ee4565b86612f5e565b60006122d3611f26565b60000160008581526020019081526020016000209050828160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461233791906144ff565b925050819055508473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6287876040516123b5929190615337565b60405180910390a45050505050565b6123e38473ffffffffffffffffffffffffffffffffffffffff16612f74565b15612593578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b81526004016124299594939291906153b5565b6020604051808303816000875af192505050801561246557506040513d601f19601f820116820180604052508101906124629190615424565b60015b61250a5761247161545e565b806308c379a0036124cd5750612485615480565b8061249057506124cf565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124c49190613a04565b60405180910390fd5b505b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161250190615582565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612591576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161258890615614565b60405180910390fd5b505b505050505050565b600081600001805490509050919050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff160361261b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612612906156a6565b60405180910390fd5b815183511461265f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161265690615738565b60405180910390fd5b61266d868686868686612f5e565b6000612677611f26565b600001905060005b845181101561282f57600085828151811061269d5761269c614909565b5b6020026020010151905060008583815181106126bc576126bb614909565b5b60200260200101519050600084600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561275d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612754906157ca565b60405180910390fd5b81810385600085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550508084600084815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461281391906144ff565b925050819055505050808061282790614a36565b91505061267f565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516128a69291906157ea565b60405180910390a450505050505050565b6128d68473ffffffffffffffffffffffffffffffffffffffff16612f74565b15612a86578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b815260040161291c959493929190615821565b6020604051808303816000875af192505050801561295857506040513d601f19601f820116820180604052508101906129559190615424565b60015b6129fd5761296461545e565b806308c379a0036129c05750612978615480565b8061298357506129c2565b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129b79190613a04565b60405180910390fd5b505b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129f490615582565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614612a84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a7b90615614565b60405180910390fd5b505b505050505050565b600081836000018054905011612ad9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ad0906158fb565b60405180910390fd5b826000018281548110612aef57612aee614909565b5b9060005260206000200154905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603612b71576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b68906156a6565b60405180910390fd5b612b8f868686612b8087612ee4565b612b8987612ee4565b86612f5e565b6000612b99611f26565b6000019050600081600086815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905083811015612c35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c2c906157ca565b60405180910390fd5b83810382600087815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550508281600086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612ceb91906144ff565b925050819055508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628787604051612d68929190615337565b60405180910390a450505050505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c1115612db4576000600391509150612e7c565b601b8560ff1614158015612dcc5750601c8560ff1614155b15612dde576000600491509150612e7c565b600060018787878760405160008152602001604052604051612e039493929190615946565b6020604051602081039080840390855afa158015612e25573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612e7357600060019250925050612e7c565b80600092509250505b94509492505050565b60008060007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60001b841690506000601b60ff8660001c901c612ec891906144ff565b9050612ed687828885612d79565b935093505050935093915050565b60606000600167ffffffffffffffff811115612f0357612f0261367d565b5b604051908082528060200260200182016040528015612f315781602001602082028036833780820191505090505b5090508281600081518110612f4957612f48614909565b5b60200260200101818152505080915050919050565b612f6c868686868686612f87565b505050505050565b600080823b905060008111915050919050565b612f95868686868686612f9d565b505050505050565b612fab868686868686613254565b8373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161461324c576000612fe8611ec0565b9050600081600101905060008260020160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008360020160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060005b875181101561324657600087828151811061309d5761309c614909565b5b6020026020010151905060008111156132325760008983815181106130c5576130c4614909565b5b60200260200101519050600073ffffffffffffffffffffffffffffffffffffffff168c73ffffffffffffffffffffffffffffffffffffffff16036131345781876000016000838152602001908152602001600020600082825461312891906144ff565b9250508190555061317f565b8161313f8d83611b81565b0361317e576131688c87600084815260200190815260200160002061325c90919063ffffffff16565b5061317c818661328c90919063ffffffff16565b505b5b600073ffffffffffffffffffffffffffffffffffffffff168b73ffffffffffffffffffffffffffffffffffffffff16036131e4578187600001600083815260200190815260200160002060008282546131d8919061420a565b92505081905550613230565b60006131f08c83611b81565b0361322f576132198b8760008481526020019081526020016000206132a690919063ffffffff16565b5061322d81856132d690919063ffffffff16565b505b5b505b50808061323e90614a36565b91505061307f565b50505050505b505050505050565b505050505050565b6000613284836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6132f0565b905092915050565b600061329e836000018360001b6132f0565b905092915050565b60006132ce836000018373ffffffffffffffffffffffffffffffffffffffff1660001b613402565b905092915050565b60006132e8836000018360001b613402565b905092915050565b600080836001016000848152602001908152602001600020549050600081146133f6576000600182613322919061420a565b90506000856000016001876000018054905061333e919061420a565b8154811061334f5761334e614909565b5b906000526020600020015490508086600001838154811061337357613372614909565b5b906000526020600020018190555060018261338e91906144ff565b86600101600083815260200190815260200160002081905550856000018054806133bb576133ba61598b565b5b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506133fc565b60009150505b92915050565b600061340e8383613472565b61346757826000018290806001815401808255809150506001900390600052602060002001600090919091909150558260000180549050836001016000848152602001908152602001600020819055506001905061346c565b600090505b92915050565b600080836001016000848152602001908152602001600020541415905092915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006134d4826134a9565b9050919050565b6134e4816134c9565b81146134ef57600080fd5b50565b600081359050613501816134db565b92915050565b6000819050919050565b61351a81613507565b811461352557600080fd5b50565b60008135905061353781613511565b92915050565b600080604083850312156135545761355361349f565b5b6000613562858286016134f2565b925050602061357385828601613528565b9150509250929050565b61358681613507565b82525050565b60006020820190506135a1600083018461357d565b92915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6135dc816135a7565b81146135e757600080fd5b50565b6000813590506135f9816135d3565b92915050565b6000602082840312156136155761361461349f565b5b6000613623848285016135ea565b91505092915050565b60008115159050919050565b6136418161362c565b82525050565b600060208201905061365c6000830184613638565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6136b58261366c565b810181811067ffffffffffffffff821117156136d4576136d361367d565b5b80604052505050565b60006136e7613495565b90506136f382826136ac565b919050565b600067ffffffffffffffff8211156137135761371261367d565b5b61371c8261366c565b9050602081019050919050565b82818337600083830152505050565b600061374b613746846136f8565b6136dd565b90508281526020810184848401111561376757613766613667565b5b613772848285613729565b509392505050565b600082601f83011261378f5761378e613662565b5b813561379f848260208601613738565b91505092915050565b6000806000606084860312156137c1576137c061349f565b5b60006137cf86828701613528565b93505060206137e086828701613528565b925050604084013567ffffffffffffffff811115613801576138006134a4565b5b61380d8682870161377a565b9150509250925092565b600067ffffffffffffffff8211156138325761383161367d565b5b61383b8261366c565b9050602081019050919050565b600061385b61385684613817565b6136dd565b90508281526020810184848401111561387757613876613667565b5b613882848285613729565b509392505050565b600082601f83011261389f5761389e613662565b5b81356138af848260208601613848565b91505092915050565b600080600080600060a086880312156138d4576138d361349f565b5b600086013567ffffffffffffffff8111156138f2576138f16134a4565b5b6138fe8882890161388a565b955050602061390f888289016134f2565b9450506040613920888289016134f2565b9350506060613931888289016134f2565b9250506080613942888289016134f2565b9150509295509295909350565b6000602082840312156139655761396461349f565b5b600061397384828501613528565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156139b657808201518184015260208101905061399b565b838111156139c5576000848401525b50505050565b60006139d68261397c565b6139e08185613987565b93506139f0818560208601613998565b6139f98161366c565b840191505092915050565b60006020820190508181036000830152613a1e81846139cb565b905092915050565b600060208284031215613a3c57613a3b61349f565b5b6000613a4a848285016134f2565b91505092915050565b600067ffffffffffffffff821115613a6e57613a6d61367d565b5b602082029050602081019050919050565b600080fd5b6000613a97613a9284613a53565b6136dd565b90508083825260208201905060208402830185811115613aba57613ab9613a7f565b5b835b81811015613ae35780613acf8882613528565b845260208401935050602081019050613abc565b5050509392505050565b600082601f830112613b0257613b01613662565b5b8135613b12848260208601613a84565b91505092915050565b600080600080600060a08688031215613b3757613b3661349f565b5b6000613b45888289016134f2565b9550506020613b56888289016134f2565b945050604086013567ffffffffffffffff811115613b7757613b766134a4565b5b613b8388828901613aed565b935050606086013567ffffffffffffffff811115613ba457613ba36134a4565b5b613bb088828901613aed565b925050608086013567ffffffffffffffff811115613bd157613bd06134a4565b5b613bdd8882890161377a565b9150509295509295909350565b613bf3816134c9565b82525050565b6000602082019050613c0e6000830184613bea565b92915050565b600067ffffffffffffffff821115613c2f57613c2e61367d565b5b602082029050602081019050919050565b6000613c53613c4e84613c14565b6136dd565b90508083825260208201905060208402830185811115613c7657613c75613a7f565b5b835b81811015613c9f5780613c8b88826134f2565b845260208401935050602081019050613c78565b5050509392505050565b600082601f830112613cbe57613cbd613662565b5b8135613cce848260208601613c40565b91505092915050565b60008060408385031215613cee57613ced61349f565b5b600083013567ffffffffffffffff811115613d0c57613d0b6134a4565b5b613d1885828601613ca9565b925050602083013567ffffffffffffffff811115613d3957613d386134a4565b5b613d4585828601613aed565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613d8481613507565b82525050565b6000613d968383613d7b565b60208301905092915050565b6000602082019050919050565b6000613dba82613d4f565b613dc48185613d5a565b9350613dcf83613d6b565b8060005b83811015613e00578151613de78882613d8a565b9750613df283613da2565b925050600181019050613dd3565b5085935050505092915050565b60006020820190508181036000830152613e278184613daf565b905092915050565b600060e082019050613e44600083018a61357d565b613e51602083018961357d565b613e5e604083018861357d565b613e6b606083018761357d565b613e78608083018661357d565b613e8560a0830185613bea565b613e9260c083018461357d565b98975050505050505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613ed3816134c9565b82525050565b6000613ee58383613eca565b60208301905092915050565b6000602082019050919050565b6000613f0982613e9e565b613f138185613ea9565b9350613f1e83613eba565b8060005b83811015613f4f578151613f368882613ed9565b9750613f4183613ef1565b925050600181019050613f22565b5085935050505092915050565b60006020820190508181036000830152613f768184613efe565b905092915050565b613f878161362c565b8114613f9257600080fd5b50565b600081359050613fa481613f7e565b92915050565b60008060408385031215613fc157613fc061349f565b5b6000613fcf858286016134f2565b9250506020613fe085828601613f95565b9150509250929050565b600080604083850312156140015761400061349f565b5b600061400f85828601613528565b9250506020614020858286016134f2565b9150509250929050565b600080600080600080600060e0888a0312156140495761404861349f565b5b600088013567ffffffffffffffff811115614067576140666134a4565b5b6140738a828b0161388a565b97505060206140848a828b01613528565b96505060406140958a828b01613528565b95505060606140a68a828b01613528565b94505060806140b78a828b01613528565b93505060a06140c88a828b01613528565b92505060c088013567ffffffffffffffff8111156140e9576140e86134a4565b5b6140f58a828b0161377a565b91505092959891949750929550565b6000806040838503121561411b5761411a61349f565b5b6000614129858286016134f2565b925050602061413a858286016134f2565b9150509250929050565b600080600080600060a086880312156141605761415f61349f565b5b600061416e888289016134f2565b955050602061417f888289016134f2565b945050604061419088828901613528565b93505060606141a188828901613528565b925050608086013567ffffffffffffffff8111156141c2576141c16134a4565b5b6141ce8882890161377a565b9150509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061421582613507565b915061422083613507565b925082821015614233576142326141db565b5b828203905092915050565b7f4352000000000000000000000000000000000000000000000000000000000000600082015250565b6000614274600283613987565b915061427f8261423e565b602082019050919050565b600060208201905081810360008301526142a381614267565b9050919050565b7f4f4f540000000000000000000000000000000000000000000000000000000000600082015250565b60006142e0600383613987565b91506142eb826142aa565b602082019050919050565b6000602082019050818103600083015261430f816142d3565b9050919050565b600061432182613507565b915061432c83613507565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614365576143646141db565b5b828202905092915050565b7f4941000000000000000000000000000000000000000000000000000000000000600082015250565b60006143a6600283613987565b91506143b182614370565b602082019050919050565b600060208201905081810360008301526143d581614399565b9050919050565b6000819050919050565b6143f76143f282613507565b6143dc565b82525050565b60008160601b9050919050565b6000614415826143fd565b9050919050565b60006144278261440a565b9050919050565b61443f61443a826134c9565b61441c565b82525050565b600061445182876143e6565b60208201915061446182866143e6565b602082019150614471828561442e565b60148201915061448182846143e6565b60208201915081905095945050505050565b7f4e4d000000000000000000000000000000000000000000000000000000000000600082015250565b60006144c9600283613987565b91506144d482614493565b602082019050919050565b600060208201905081810360008301526144f8816144bc565b9050919050565b600061450a82613507565b915061451583613507565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561454a576145496141db565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061458f82613507565b915061459a83613507565b9250826145aa576145a9614555565b5b828204905092915050565b7f4e4f000000000000000000000000000000000000000000000000000000000000600082015250565b60006145eb600283613987565b91506145f6826145b5565b602082019050919050565b6000602082019050818103600083015261461a816145de565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061466857607f821691505b60208210810361467b5761467a614621565b5b50919050565b7f455243313135355552493a20746f6b656e4964206e6f74206578697374000000600082015250565b60006146b7601d83613987565b91506146c282614681565b602082019050919050565b600060208201905081810360008301526146e6816146aa565b9050919050565b600081905092915050565b60008190508160005260206000209050919050565b6000815461471a81614650565b61472481866146ed565b9450600182166000811461473f576001811461475457614787565b60ff1983168652811515820286019350614787565b61475d856146f8565b60005b8381101561477f57815481890152600182019150602081019050614760565b838801955050505b50505092915050565b600061479b8261397c565b6147a581856146ed565b93506147b5818560208601613998565b80840191505092915050565b60006147cd828561470d565b91506147d98284614790565b91508190509392505050565b7f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260008201527f20617070726f7665640000000000000000000000000000000000000000000000602082015250565b6000614841602983613987565b915061484c826147e5565b604082019050919050565b6000602082019050818103600083015261487081614834565b9050919050565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b60006148d3602983613987565b91506148de82614877565b604082019050919050565b60006020820190508181036000830152614902816148c6565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f455243313135353a2062617463682062616c616e636520717565727920666f7260008201527f20746865207a65726f2061646472657373000000000000000000000000000000602082015250565b6000614994603183613987565b915061499f82614938565b604082019050919050565b600060208201905081810360008301526149c381614987565b9050919050565b7f444e450000000000000000000000000000000000000000000000000000000000600082015250565b6000614a00600383613987565b9150614a0b826149ca565b602082019050919050565b60006020820190508181036000830152614a2f816149f3565b9050919050565b6000614a4182613507565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203614a7357614a726141db565b5b600182019050919050565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b6000614ada602983613987565b9150614ae582614a7e565b604082019050919050565b60006020820190508181036000830152614b0981614acd565b9050919050565b7f4954000000000000000000000000000000000000000000000000000000000000600082015250565b6000614b46600283613987565b9150614b5182614b10565b602082019050919050565b60006020820190508181036000830152614b7581614b39565b9050919050565b7f49534f0000000000000000000000000000000000000000000000000000000000600082015250565b6000614bb2600383613987565b9150614bbd82614b7c565b602082019050919050565b60006020820190508181036000830152614be181614ba5565b9050919050565b7f4941430000000000000000000000000000000000000000000000000000000000600082015250565b6000614c1e600383613987565b9150614c2982614be8565b602082019050919050565b60006020820190508181036000830152614c4d81614c11565b9050919050565b6000614c60828b614790565b9150614c6c828a6143e6565b602082019150614c7c82896143e6565b602082019150614c8c82886143e6565b602082019150614c9c82876143e6565b602082019150614cac82866143e6565b602082019150614cbc828561442e565b601482019150614ccc82846143e6565b6020820191508190509998505050505050505050565b7f455243313135353a2062616c616e636520717565727920666f7220746865207a60008201527f65726f2061646472657373000000000000000000000000000000000000000000602082015250565b6000614d3e602b83613987565b9150614d4982614ce2565b604082019050919050565b60006020820190508181036000830152614d6d81614d31565b9050919050565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b6000614daa601c836146ed565b9150614db582614d74565b601c82019050919050565b6000819050919050565b6000819050919050565b614de5614de082614dc0565b614dca565b82525050565b6000614df682614d9d565b9150614e028284614dd4565b60208201915081905092915050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302614e5e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82614e21565b614e688683614e21565b95508019841693508086168417925050509392505050565b6000819050919050565b6000614ea5614ea0614e9b84613507565b614e80565b613507565b9050919050565b6000819050919050565b614ebf83614e8a565b614ed3614ecb82614eac565b848454614e2e565b825550505050565b600090565b614ee8614edb565b614ef3818484614eb6565b505050565b5b81811015614f1757614f0c600082614ee0565b600181019050614ef9565b5050565b601f821115614f5c57614f2d816146f8565b614f3684614e11565b81016020851015614f45578190505b614f59614f5185614e11565b830182614ef8565b50505b505050565b600082821c905092915050565b6000614f7f60001984600802614f61565b1980831691505092915050565b6000614f988383614f6e565b9150826002028217905092915050565b614fb18261397c565b67ffffffffffffffff811115614fca57614fc961367d565b5b614fd48254614650565b614fdf828285614f1b565b600060209050601f8311600181146150125760008415615000578287015190505b61500a8582614f8c565b865550615072565b601f198416615020866146f8565b60005b8281101561504857848901518255600182019150602085019450602081019050615023565b868310156150655784890151615061601f891682614f6e565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b60006150df601883613987565b91506150ea826150a9565b602082019050919050565b6000602082019050818103600083015261510e816150d2565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b600061514b601f83613987565b915061515682615115565b602082019050919050565b6000602082019050818103600083015261517a8161513e565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b60006151dd602283613987565b91506151e882615181565b604082019050919050565b6000602082019050818103600083015261520c816151d0565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b600061526f602283613987565b915061527a82615213565b604082019050919050565b6000602082019050818103600083015261529e81615262565b9050919050565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000615301602183613987565b915061530c826152a5565b604082019050919050565b60006020820190508181036000830152615330816152f4565b9050919050565b600060408201905061534c600083018561357d565b615359602083018461357d565b9392505050565b600081519050919050565b600082825260208201905092915050565b600061538782615360565b615391818561536b565b93506153a1818560208601613998565b6153aa8161366c565b840191505092915050565b600060a0820190506153ca6000830188613bea565b6153d76020830187613bea565b6153e4604083018661357d565b6153f1606083018561357d565b8181036080830152615403818461537c565b90509695505050505050565b60008151905061541e816135d3565b92915050565b60006020828403121561543a5761543961349f565b5b60006154488482850161540f565b91505092915050565b60008160e01c9050919050565b600060033d111561547d5760046000803e61547a600051615451565b90505b90565b600060443d1061550d57615492613495565b60043d036004823e80513d602482011167ffffffffffffffff821117156154ba57505061550d565b808201805167ffffffffffffffff8111156154d8575050505061550d565b80602083010160043d0385018111156154f557505050505061550d565b615504826020018501866136ac565b82955050505050505b90565b7f455243313135353a207472616e7366657220746f206e6f6e204552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b600061556c603483613987565b915061557782615510565b604082019050919050565b6000602082019050818103600083015261559b8161555f565b9050919050565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b60006155fe602883613987565b9150615609826155a2565b604082019050919050565b6000602082019050818103600083015261562d816155f1565b9050919050565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000615690602583613987565b915061569b82615634565b604082019050919050565b600060208201905081810360008301526156bf81615683565b9050919050565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b6000615722602883613987565b915061572d826156c6565b604082019050919050565b6000602082019050818103600083015261575181615715565b9050919050565b7f455243313135353a20696e73756666696369656e742062616c616e636573206660008201527f6f72207472616e73666572000000000000000000000000000000000000000000602082015250565b60006157b4602b83613987565b91506157bf82615758565b604082019050919050565b600060208201905081810360008301526157e3816157a7565b9050919050565b600060408201905081810360008301526158048185613daf565b905081810360208301526158188184613daf565b90509392505050565b600060a0820190506158366000830188613bea565b6158436020830187613bea565b81810360408301526158558186613daf565b905081810360608301526158698185613daf565b9050818103608083015261587d818461537c565b90509695505050505050565b7f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e60008201527f6473000000000000000000000000000000000000000000000000000000000000602082015250565b60006158e5602283613987565b91506158f082615889565b604082019050919050565b60006020820190508181036000830152615914816158d8565b9050919050565b61592481614dc0565b82525050565b600060ff82169050919050565b6159408161592a565b82525050565b600060808201905061595b600083018761591b565b6159686020830186615937565b615975604083018561591b565b615982606083018461591b565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea26469706673582212205ef0dd6a770a79b48fb9c392d329c80ac29ae85522a1e1992d44e48ca3f9894664736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "accountsByToken(uint256)": {
        "params": {
          "id": "token id to query"
        },
        "returns": {
          "_0": "list of holder addresses"
        }
      },
      "balanceOf(address,uint256)": {
        "params": {
          "account": "address to query",
          "id": "token to query"
        },
        "returns": {
          "_0": "token balance"
        }
      },
      "balanceOfBatch(address[],uint256[])": {
        "params": {
          "accounts": "addresss to query",
          "ids": "tokens to query"
        },
        "returns": {
          "_0": "token balances"
        }
      },
      "isApprovedForAll(address,address)": {
        "params": {
          "account": "address to query for approval granted",
          "operator": "address to query for approval received"
        },
        "returns": {
          "_0": "whether operator is approved to spend tokens held by account"
        }
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "params": {
          "amounts": "list of quantities of tokens to transfer",
          "data": "data payload",
          "from": "sender of tokens",
          "ids": "list of token IDs",
          "to": "receiver of tokens"
        }
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "params": {
          "amount": "quantity of tokens to transfer",
          "data": "data payload",
          "from": "sender of tokens",
          "id": "token ID",
          "to": "receiver of tokens"
        }
      },
      "setApprovalForAll(address,bool)": {
        "params": {
          "operator": "address whose approval status to update",
          "status": "whether operator should be considered approved"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceId": "interface id"
        },
        "returns": {
          "_0": "bool whether interface is supported"
        }
      },
      "tokensByAccount(address)": {
        "params": {
          "account": "address to query"
        },
        "returns": {
          "_0": "list of token ids"
        }
      },
      "totalHolders(uint256)": {
        "params": {
          "id": "token id to query"
        },
        "returns": {
          "_0": "quantity of holders"
        }
      },
      "totalSupply(uint256)": {
        "params": {
          "id": "token id to query"
        },
        "returns": {
          "_0": "token supply"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "accountsByToken(uint256)": {
        "notice": "query holders of given token"
      },
      "balanceOf(address,uint256)": {
        "notice": "query the balance of given token held by given address"
      },
      "balanceOfBatch(address[],uint256[])": {
        "notice": "query the balances of given tokens held by given addresses"
      },
      "isApprovedForAll(address,address)": {
        "notice": "query approval status of given operator with respect to given address"
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "notice": "transfer batch of tokens between given addresses, checking for ERC1155Receiver implementation if applicable"
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "notice": "transfer tokens between given addresses, checking for ERC1155Receiver implementation if applicable"
      },
      "setApprovalForAll(address,bool)": {
        "notice": "grant approval to or revoke approval from given operator to spend held tokens"
      },
      "supportsInterface(bytes4)": {
        "notice": "query whether contract has registered support for given interface"
      },
      "tokensByAccount(address)": {
        "notice": "query tokens held by given address"
      },
      "totalHolders(uint256)": {
        "notice": "query total number of holders for given token"
      },
      "totalSupply(uint256)": {
        "notice": "query total minted supply of given token"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}