{
  "address": "0x8Daa33B1C103Cc46f4fBDF035083A627cE4e64FA",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "DropCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Minted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "accountsByToken",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "burnTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_timeStart",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timeEnd",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountCap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_shareCyber",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "createDrop",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        }
      ],
      "name": "dropMintCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getDrop",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "timeStart",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timeEnd",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountCap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "shareCyber",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minted",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_trustedForwarder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_opensea",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oncyber",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        }
      ],
      "name": "minterNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oncyber",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "tokensByAccount",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "totalHolders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa4ad38c2473f683c069ceb37f0bc536a268d00c019497d00739c405825dd3213",
  "receipt": {
    "to": null,
    "from": "0x422226357641B8Daf8FC23E2cc306c282e87817C",
    "contractAddress": "0x8Daa33B1C103Cc46f4fBDF035083A627cE4e64FA",
    "transactionIndex": 36,
    "gasUsed": "3316429",
    "logsBloom": "0x
    "blockHash": "0xd2f694b5ddc8dccb102a3785e25ecebc699b57d5bc4b7ba9e6601263f19657a8",
    "transactionHash": "0xa4ad38c2473f683c069ceb37f0bc536a268d00c019497d00739c405825dd3213",
    "logs": [],
    "blockNumber": 8215045,
    "cumulativeGasUsed": "8810986",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "030078b044a1e032064fd2339cc65b55",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"DropCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"accountsByToken\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burnTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_timeStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_shareCyber\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"createDrop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"dropMintCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getDrop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timeStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareCyber\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minted\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trustedForwarder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_opensea\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oncyber\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"minterNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oncyber\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"tokensByAccount\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalHolders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"accountsByToken(uint256)\":{\"params\":{\"id\":\"token id to query\"},\"returns\":{\"_0\":\"list of holder addresses\"}},\"balanceOf(address,uint256)\":{\"params\":{\"account\":\"address to query\",\"id\":\"token to query\"},\"returns\":{\"_0\":\"token balance\"}},\"balanceOfBatch(address[],uint256[])\":{\"params\":{\"accounts\":\"addresss to query\",\"ids\":\"tokens to query\"},\"returns\":{\"_0\":\"token balances\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"account\":\"address to query for approval granted\",\"operator\":\"address to query for approval received\"},\"returns\":{\"_0\":\"whether operator is approved to spend tokens held by account\"}},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"params\":{\"amounts\":\"list of quantities of tokens to transfer\",\"data\":\"data payload\",\"from\":\"sender of tokens\",\"ids\":\"list of token IDs\",\"to\":\"receiver of tokens\"}},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"params\":{\"amount\":\"quantity of tokens to transfer\",\"data\":\"data payload\",\"from\":\"sender of tokens\",\"id\":\"token ID\",\"to\":\"receiver of tokens\"}},\"setApprovalForAll(address,bool)\":{\"params\":{\"operator\":\"address whose approval status to update\",\"status\":\"whether operator should be considered approved\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"interface id\"},\"returns\":{\"_0\":\"bool whether interface is supported\"}},\"tokensByAccount(address)\":{\"params\":{\"account\":\"address to query\"},\"returns\":{\"_0\":\"list of token ids\"}},\"totalHolders(uint256)\":{\"params\":{\"id\":\"token id to query\"},\"returns\":{\"_0\":\"quantity of holders\"}},\"totalSupply(uint256)\":{\"params\":{\"id\":\"token id to query\"},\"returns\":{\"_0\":\"token supply\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"accountsByToken(uint256)\":{\"notice\":\"query holders of given token\"},\"balanceOf(address,uint256)\":{\"notice\":\"query the balance of given token held by given address\"},\"balanceOfBatch(address[],uint256[])\":{\"notice\":\"query the balances of given tokens held by given addresses\"},\"isApprovedForAll(address,address)\":{\"notice\":\"query approval status of given operator with respect to given address\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"transfer batch of tokens between given addresses, checking for ERC1155Receiver implementation if applicable\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"notice\":\"transfer tokens between given addresses, checking for ERC1155Receiver implementation if applicable\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"grant approval to or revoke approval from given operator to spend held tokens\"},\"supportsInterface(bytes4)\":{\"notice\":\"query whether contract has registered support for given interface\"},\"tokensByAccount(address)\":{\"notice\":\"query tokens held by given address\"},\"totalHolders(uint256)\":{\"notice\":\"query total number of holders for given token\"},\"totalSupply(uint256)\":{\"notice\":\"query total minted supply of given token\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Diamantaires/DestinationUtility/CyberDestinationUtilityFactoryFacet.sol\":\"CyberDestinationUtilityFactoryFacet\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x84ac2d2f343df1e683da7a12bbcf70db542a7a7a0cea90a5d70fcb5e5d035481\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC165 } from './IERC165.sol';\\nimport { ERC165Storage } from './ERC165Storage.sol';\\n\\n/**\\n * @title ERC165 implementation\\n */\\nabstract contract ERC165 is IERC165 {\\n    using ERC165Storage for ERC165Storage.Layout;\\n\\n    /**\\n     * @inheritdoc IERC165\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override\\n        returns (bool)\\n    {\\n        return ERC165Storage.layout().isSupportedInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xc4a0b280ce381af99e8be8d7fb59f3c71690230d12d07c7beffe5594ceac7cf7\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary ERC165Storage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC165');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n\\n    function isSupportedInterface(Layout storage l, bytes4 interfaceId)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return l.supportedInterfaces[interfaceId];\\n    }\\n\\n    function setSupportedInterface(\\n        Layout storage l,\\n        bytes4 interfaceId,\\n        bool status\\n    ) internal {\\n        require(interfaceId != 0xffffffff, 'ERC165: invalid interface id');\\n        l.supportedInterfaces[interfaceId] = status;\\n    }\\n}\\n\",\"keccak256\":\"0x61f281af116b703f31c0fdd8616cab9c5ad71f7d5d0038b60ec1512587b2f91d\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC165 interface registration interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-165\\n */\\ninterface IERC165 {\\n    /**\\n     * @notice query whether contract has registered support for given interface\\n     * @param interfaceId interface id\\n     * @return bool whether interface is supported\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x19d0bf328e3ea589cd4fa37a487cc33aa7ac293656e11a268f46161470b111c6\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { ERC165 } from '../../introspection/ERC165.sol';\\nimport { ERC1155Base, ERC1155BaseInternal } from './base/ERC1155Base.sol';\\nimport { ERC1155Enumerable } from './enumerable/ERC1155Enumerable.sol';\\nimport { ERC1155Metadata } from './metadata/ERC1155Metadata.sol';\\n\\n/**\\n * @title SolidState ERC1155 implementation\\n */\\nabstract contract ERC1155 is\\n    ERC1155Base,\\n    ERC1155Enumerable,\\n    ERC1155Metadata,\\n    ERC165\\n{\\n    /**\\n     * @inheritdoc ERC1155BaseInternal\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override(ERC1155BaseInternal, ERC1155Enumerable) {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n    }\\n}\\n\",\"keccak256\":\"0xa71dcd8a1f1a488db7e1cbf073bb0bcd2a5a24af061043f3b9284481d99056d8\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC1155Internal } from './IERC1155Internal.sol';\\nimport { IERC165 } from '../../introspection/IERC165.sol';\\n\\n/**\\n * @notice ERC1155 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/1155\\n */\\ninterface IERC1155 is IERC1155Internal, IERC165 {\\n    /**\\n     * @notice query the balance of given token held by given address\\n     * @param account address to query\\n     * @param id token to query\\n     * @return token balance\\n     */\\n    function balanceOf(address account, uint256 id)\\n        external\\n        view\\n        returns (uint256);\\n\\n    /**\\n     * @notice query the balances of given tokens held by given addresses\\n     * @param accounts addresss to query\\n     * @param ids tokens to query\\n     * @return token balances\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @notice query approval status of given operator with respect to given address\\n     * @param account address to query for approval granted\\n     * @param operator address to query for approval received\\n     * @return whether operator is approved to spend tokens held by account\\n     */\\n    function isApprovedForAll(address account, address operator)\\n        external\\n        view\\n        returns (bool);\\n\\n    /**\\n     * @notice grant approval to or revoke approval from given operator to spend held tokens\\n     * @param operator address whose approval status to update\\n     * @param status whether operator should be considered approved\\n     */\\n    function setApprovalForAll(address operator, bool status) external;\\n\\n    /**\\n     * @notice transfer tokens between given addresses, checking for ERC1155Receiver implementation if applicable\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @notice transfer batch of tokens between given addresses, checking for ERC1155Receiver implementation if applicable\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param ids list of token IDs\\n     * @param amounts list of quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8f5d42093f86830f6e7d2a8875eac8c2d7ff064859c13f9ffe237e4ccc2951c4\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/IERC1155Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC165 } from '../../introspection/IERC165.sol';\\n\\n/**\\n * @notice Partial ERC1155 interface needed by internal functions\\n */\\ninterface IERC1155Internal {\\n    event TransferSingle(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 id,\\n        uint256 value\\n    );\\n\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    event ApprovalForAll(\\n        address indexed account,\\n        address indexed operator,\\n        bool approved\\n    );\\n}\\n\",\"keccak256\":\"0x770e5cbe555d00fb78405e2d8c74ec6cdc9b84dcb5f73f4efa2cdc20cf57e026\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC165 } from '../../introspection/IERC165.sol';\\n\\n/**\\n * @title ERC1155 transfer receiver interface\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @notice validate receipt of ERC1155 transfer\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param id token ID received\\n     * @param value quantity of tokens received\\n     * @param data data payload\\n     * @return function's own selector if transfer is accepted\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @notice validate receipt of ERC1155 batch transfer\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param ids token IDs received\\n     * @param values quantities of tokens received\\n     * @param data data payload\\n     * @return function's own selector if transfer is accepted\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x31fcdbc3c885a95d0449d9b5f20a7ef0cae2fa63bd82195995d05a7eecaa5f74\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/base/ERC1155Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC1155 } from '../IERC1155.sol';\\nimport { IERC1155Receiver } from '../IERC1155Receiver.sol';\\nimport { ERC1155BaseInternal, ERC1155BaseStorage } from './ERC1155BaseInternal.sol';\\n\\n/**\\n * @title Base ERC1155 contract\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nabstract contract ERC1155Base is IERC1155, ERC1155BaseInternal {\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function balanceOf(address account, uint256 id)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return _balanceOf(account, id);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(\\n            accounts.length == ids.length,\\n            'ERC1155: accounts and ids length mismatch'\\n        );\\n\\n        mapping(uint256 => mapping(address => uint256))\\n            storage balances = ERC1155BaseStorage.layout().balances;\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        unchecked {\\n            for (uint256 i; i < accounts.length; i++) {\\n                require(\\n                    accounts[i] != address(0),\\n                    'ERC1155: batch balance query for the zero address'\\n                );\\n                batchBalances[i] = balances[ids[i]][accounts[i]];\\n            }\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function isApprovedForAll(address account, address operator)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return ERC1155BaseStorage.layout().operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function setApprovalForAll(address operator, bool status)\\n        public\\n        virtual\\n        override\\n    {\\n        require(\\n            msg.sender != operator,\\n            'ERC1155: setting approval status for self'\\n        );\\n        ERC1155BaseStorage.layout().operatorApprovals[msg.sender][\\n            operator\\n        ] = status;\\n        emit ApprovalForAll(msg.sender, operator, status);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == msg.sender || isApprovedForAll(from, msg.sender),\\n            'ERC1155: caller is not owner nor approved'\\n        );\\n        _safeTransfer(msg.sender, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == msg.sender || isApprovedForAll(from, msg.sender),\\n            'ERC1155: caller is not owner nor approved'\\n        );\\n        _safeTransferBatch(msg.sender, from, to, ids, amounts, data);\\n    }\\n}\\n\",\"keccak256\":\"0xe2e044ac6fc81e938ae06bea0350352472c8a77ff29ac09263d268c6610f9b00\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/base/ERC1155BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { AddressUtils } from '../../../utils/AddressUtils.sol';\\nimport { IERC1155Internal } from '../IERC1155Internal.sol';\\nimport { IERC1155Receiver } from '../IERC1155Receiver.sol';\\nimport { ERC1155BaseStorage } from './ERC1155BaseStorage.sol';\\n\\n/**\\n * @title Base ERC1155 internal functions\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nabstract contract ERC1155BaseInternal is IERC1155Internal {\\n    using AddressUtils for address;\\n\\n    /**\\n     * @notice query the balance of given token held by given address\\n     * @param account address to query\\n     * @param id token to query\\n     * @return token balance\\n     */\\n    function _balanceOf(address account, uint256 id)\\n        internal\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        require(\\n            account != address(0),\\n            'ERC1155: balance query for the zero address'\\n        );\\n        return ERC1155BaseStorage.layout().balances[id][account];\\n    }\\n\\n    /**\\n     * @notice mint given quantity of tokens for given address\\n     * @dev ERC1155Receiver implementation is not checked\\n     * @param account beneficiary of minting\\n     * @param id token ID\\n     * @param amount quantity of tokens to mint\\n     * @param data data payload\\n     */\\n    function _mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(account != address(0), 'ERC1155: mint to the zero address');\\n\\n        _beforeTokenTransfer(\\n            msg.sender,\\n            address(0),\\n            account,\\n            _asSingletonArray(id),\\n            _asSingletonArray(amount),\\n            data\\n        );\\n\\n        mapping(address => uint256) storage balances = ERC1155BaseStorage\\n            .layout()\\n            .balances[id];\\n        balances[account] += amount;\\n\\n        emit TransferSingle(msg.sender, address(0), account, id, amount);\\n    }\\n\\n    /**\\n     * @notice mint given quantity of tokens for given address\\n     * @param account beneficiary of minting\\n     * @param id token ID\\n     * @param amount quantity of tokens to mint\\n     * @param data data payload\\n     */\\n    function _safeMint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(account, id, amount, data);\\n\\n        _doSafeTransferAcceptanceCheck(\\n            msg.sender,\\n            address(0),\\n            account,\\n            id,\\n            amount,\\n            data\\n        );\\n    }\\n\\n    /**\\n     * @notice mint batch of tokens for given address\\n     * @dev ERC1155Receiver implementation is not checked\\n     * @param account beneficiary of minting\\n     * @param ids list of token IDs\\n     * @param amounts list of quantities of tokens to mint\\n     * @param data data payload\\n     */\\n    function _mintBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(account != address(0), 'ERC1155: mint to the zero address');\\n        require(\\n            ids.length == amounts.length,\\n            'ERC1155: ids and amounts length mismatch'\\n        );\\n\\n        _beforeTokenTransfer(\\n            msg.sender,\\n            address(0),\\n            account,\\n            ids,\\n            amounts,\\n            data\\n        );\\n\\n        mapping(uint256 => mapping(address => uint256))\\n            storage balances = ERC1155BaseStorage.layout().balances;\\n\\n        for (uint256 i; i < ids.length; i++) {\\n            balances[ids[i]][account] += amounts[i];\\n        }\\n\\n        emit TransferBatch(msg.sender, address(0), account, ids, amounts);\\n    }\\n\\n    /**\\n     * @notice mint batch of tokens for given address\\n     * @param account beneficiary of minting\\n     * @param ids list of token IDs\\n     * @param amounts list of quantities of tokens to mint\\n     * @param data data payload\\n     */\\n    function _safeMintBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        _mintBatch(account, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(\\n            msg.sender,\\n            address(0),\\n            account,\\n            ids,\\n            amounts,\\n            data\\n        );\\n    }\\n\\n    /**\\n     * @notice burn given quantity of tokens held by given address\\n     * @param account holder of tokens to burn\\n     * @param id token ID\\n     * @param amount quantity of tokens to burn\\n     */\\n    function _burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(account != address(0), 'ERC1155: burn from the zero address');\\n\\n        _beforeTokenTransfer(\\n            msg.sender,\\n            account,\\n            address(0),\\n            _asSingletonArray(id),\\n            _asSingletonArray(amount),\\n            ''\\n        );\\n\\n        mapping(address => uint256) storage balances = ERC1155BaseStorage\\n            .layout()\\n            .balances[id];\\n\\n        unchecked {\\n            require(\\n                balances[account] >= amount,\\n                'ERC1155: burn amount exceeds balances'\\n            );\\n            balances[account] -= amount;\\n        }\\n\\n        emit TransferSingle(msg.sender, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @notice burn given batch of tokens held by given address\\n     * @param account holder of tokens to burn\\n     * @param ids token IDs\\n     * @param amounts quantities of tokens to burn\\n     */\\n    function _burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(account != address(0), 'ERC1155: burn from the zero address');\\n        require(\\n            ids.length == amounts.length,\\n            'ERC1155: ids and amounts length mismatch'\\n        );\\n\\n        _beforeTokenTransfer(msg.sender, account, address(0), ids, amounts, '');\\n\\n        mapping(uint256 => mapping(address => uint256))\\n            storage balances = ERC1155BaseStorage.layout().balances;\\n\\n        unchecked {\\n            for (uint256 i; i < ids.length; i++) {\\n                uint256 id = ids[i];\\n                require(\\n                    balances[id][account] >= amounts[i],\\n                    'ERC1155: burn amount exceeds balance'\\n                );\\n                balances[id][account] -= amounts[i];\\n            }\\n        }\\n\\n        emit TransferBatch(msg.sender, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @notice transfer tokens between given addresses\\n     * @dev ERC1155Receiver implementation is not checked\\n     * @param operator executor of transfer\\n     * @param sender sender of tokens\\n     * @param recipient receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _transfer(\\n        address operator,\\n        address sender,\\n        address recipient,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(\\n            recipient != address(0),\\n            'ERC1155: transfer to the zero address'\\n        );\\n\\n        _beforeTokenTransfer(\\n            operator,\\n            sender,\\n            recipient,\\n            _asSingletonArray(id),\\n            _asSingletonArray(amount),\\n            data\\n        );\\n\\n        mapping(uint256 => mapping(address => uint256))\\n            storage balances = ERC1155BaseStorage.layout().balances;\\n\\n        unchecked {\\n            uint256 senderBalance = balances[id][sender];\\n            require(\\n                senderBalance >= amount,\\n                'ERC1155: insufficient balances for transfer'\\n            );\\n            balances[id][sender] = senderBalance - amount;\\n        }\\n\\n        balances[id][recipient] += amount;\\n\\n        emit TransferSingle(operator, sender, recipient, id, amount);\\n    }\\n\\n    /**\\n     * @notice transfer tokens between given addresses\\n     * @param operator executor of transfer\\n     * @param sender sender of tokens\\n     * @param recipient receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _safeTransfer(\\n        address operator,\\n        address sender,\\n        address recipient,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(operator, sender, recipient, id, amount, data);\\n\\n        _doSafeTransferAcceptanceCheck(\\n            operator,\\n            sender,\\n            recipient,\\n            id,\\n            amount,\\n            data\\n        );\\n    }\\n\\n    /**\\n     * @notice transfer batch of tokens between given addresses\\n     * @dev ERC1155Receiver implementation is not checked\\n     * @param operator executor of transfer\\n     * @param sender sender of tokens\\n     * @param recipient receiver of tokens\\n     * @param ids token IDs\\n     * @param amounts quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _transferBatch(\\n        address operator,\\n        address sender,\\n        address recipient,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(\\n            recipient != address(0),\\n            'ERC1155: transfer to the zero address'\\n        );\\n        require(\\n            ids.length == amounts.length,\\n            'ERC1155: ids and amounts length mismatch'\\n        );\\n\\n        _beforeTokenTransfer(operator, sender, recipient, ids, amounts, data);\\n\\n        mapping(uint256 => mapping(address => uint256))\\n            storage balances = ERC1155BaseStorage.layout().balances;\\n\\n        for (uint256 i; i < ids.length; i++) {\\n            uint256 token = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            unchecked {\\n                uint256 senderBalance = balances[token][sender];\\n                require(\\n                    senderBalance >= amount,\\n                    'ERC1155: insufficient balances for transfer'\\n                );\\n                balances[token][sender] = senderBalance - amount;\\n            }\\n\\n            balances[token][recipient] += amount;\\n        }\\n\\n        emit TransferBatch(operator, sender, recipient, ids, amounts);\\n    }\\n\\n    /**\\n     * @notice transfer batch of tokens between given addresses\\n     * @param operator executor of transfer\\n     * @param sender sender of tokens\\n     * @param recipient receiver of tokens\\n     * @param ids token IDs\\n     * @param amounts quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _safeTransferBatch(\\n        address operator,\\n        address sender,\\n        address recipient,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        _transferBatch(operator, sender, recipient, ids, amounts, data);\\n\\n        _doSafeBatchTransferAcceptanceCheck(\\n            operator,\\n            sender,\\n            recipient,\\n            ids,\\n            amounts,\\n            data\\n        );\\n    }\\n\\n    /**\\n     * @notice wrap given element in array of length 1\\n     * @param element element to wrap\\n     * @return singleton array\\n     */\\n    function _asSingletonArray(uint256 element)\\n        private\\n        pure\\n        returns (uint256[] memory)\\n    {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n        return array;\\n    }\\n\\n    /**\\n     * @notice revert if applicable transfer recipient is not valid ERC1155Receiver\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param id token ID\\n     * @param amount quantity of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try\\n                IERC1155Receiver(to).onERC1155Received(\\n                    operator,\\n                    from,\\n                    id,\\n                    amount,\\n                    data\\n                )\\n            returns (bytes4 response) {\\n                require(\\n                    response == IERC1155Receiver.onERC1155Received.selector,\\n                    'ERC1155: ERC1155Receiver rejected tokens'\\n                );\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert('ERC1155: transfer to non ERC1155Receiver implementer');\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice revert if applicable transfer recipient is not valid ERC1155Receiver\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param ids token IDs\\n     * @param amounts quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try\\n                IERC1155Receiver(to).onERC1155BatchReceived(\\n                    operator,\\n                    from,\\n                    ids,\\n                    amounts,\\n                    data\\n                )\\n            returns (bytes4 response) {\\n                require(\\n                    response ==\\n                        IERC1155Receiver.onERC1155BatchReceived.selector,\\n                    'ERC1155: ERC1155Receiver rejected tokens'\\n                );\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert('ERC1155: transfer to non ERC1155Receiver implementer');\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice ERC1155 hook, called before all transfers including mint and burn\\n     * @dev function should be overridden and new implementation must call super\\n     * @dev called for both single and batch transfers\\n     * @param operator executor of transfer\\n     * @param from sender of tokens\\n     * @param to receiver of tokens\\n     * @param ids token IDs\\n     * @param amounts quantities of tokens to transfer\\n     * @param data data payload\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x16e4fd77dcb8f4cd933b209137560afb59b4e7bec7b64ee39cc24f1594b356a9\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/base/ERC1155BaseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary ERC1155BaseStorage {\\n    struct Layout {\\n        mapping(uint256 => mapping(address => uint256)) balances;\\n        mapping(address => mapping(address => bool)) operatorApprovals;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC1155Base');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8db92a910e779b41952ea8c28ee143ccdf6d4bc43b0ca984ceda9ef67956493d\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/enumerable/ERC1155Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { EnumerableSet } from '../../../utils/EnumerableSet.sol';\\nimport { ERC1155Base, ERC1155BaseInternal } from '../base/ERC1155Base.sol';\\nimport { IERC1155Enumerable } from './IERC1155Enumerable.sol';\\nimport { ERC1155EnumerableInternal, ERC1155EnumerableStorage } from './ERC1155EnumerableInternal.sol';\\n\\n/**\\n * @title ERC1155 implementation including enumerable and aggregate functions\\n */\\nabstract contract ERC1155Enumerable is\\n    IERC1155Enumerable,\\n    ERC1155Base,\\n    ERC1155EnumerableInternal\\n{\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    /**\\n     * @inheritdoc IERC1155Enumerable\\n     */\\n    function totalSupply(uint256 id)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return ERC1155EnumerableStorage.layout().totalSupply[id];\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155Enumerable\\n     */\\n    function totalHolders(uint256 id)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return ERC1155EnumerableStorage.layout().accountsByToken[id].length();\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155Enumerable\\n     */\\n    function accountsByToken(uint256 id)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (address[] memory)\\n    {\\n        EnumerableSet.AddressSet storage accounts = ERC1155EnumerableStorage\\n            .layout()\\n            .accountsByToken[id];\\n\\n        address[] memory addresses = new address[](accounts.length());\\n\\n        for (uint256 i; i < accounts.length(); i++) {\\n            addresses[i] = accounts.at(i);\\n        }\\n\\n        return addresses;\\n    }\\n\\n    /**\\n     * @inheritdoc IERC1155Enumerable\\n     */\\n    function tokensByAccount(address account)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        EnumerableSet.UintSet storage tokens = ERC1155EnumerableStorage\\n            .layout()\\n            .tokensByAccount[account];\\n\\n        uint256[] memory ids = new uint256[](tokens.length());\\n\\n        for (uint256 i; i < tokens.length(); i++) {\\n            ids[i] = tokens.at(i);\\n        }\\n\\n        return ids;\\n    }\\n\\n    /**\\n     * @notice ERC1155 hook: update aggregate values\\n     * @inheritdoc ERC1155EnumerableInternal\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        internal\\n        virtual\\n        override(ERC1155BaseInternal, ERC1155EnumerableInternal)\\n    {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n    }\\n}\\n\",\"keccak256\":\"0xcb9cfd2b1663c96f6eada653fb403b27362a8fe23e5f8eaf4c8ffd6c9e4a446e\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/enumerable/ERC1155EnumerableInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { EnumerableSet } from '../../../utils/EnumerableSet.sol';\\nimport { ERC1155BaseInternal, ERC1155BaseStorage } from '../base/ERC1155BaseInternal.sol';\\nimport { ERC1155EnumerableStorage } from './ERC1155EnumerableStorage.sol';\\n\\n/**\\n * @title ERC1155Enumerable internal functions\\n */\\nabstract contract ERC1155EnumerableInternal is ERC1155BaseInternal {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    /**\\n     * @notice ERC1155 hook: update aggregate values\\n     * @inheritdoc ERC1155BaseInternal\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        if (from != to) {\\n            ERC1155EnumerableStorage.Layout storage l = ERC1155EnumerableStorage\\n                .layout();\\n            mapping(uint256 => EnumerableSet.AddressSet)\\n                storage tokenAccounts = l.accountsByToken;\\n            EnumerableSet.UintSet storage fromTokens = l.tokensByAccount[from];\\n            EnumerableSet.UintSet storage toTokens = l.tokensByAccount[to];\\n\\n            for (uint256 i; i < ids.length; i++) {\\n                uint256 amount = amounts[i];\\n\\n                if (amount > 0) {\\n                    uint256 id = ids[i];\\n\\n                    if (from == address(0)) {\\n                        l.totalSupply[id] += amount;\\n                    } else if (_balanceOf(from, id) == amount) {\\n                        tokenAccounts[id].remove(from);\\n                        fromTokens.remove(id);\\n                    }\\n\\n                    if (to == address(0)) {\\n                        l.totalSupply[id] -= amount;\\n                    } else if (_balanceOf(to, id) == 0) {\\n                        tokenAccounts[id].add(to);\\n                        toTokens.add(id);\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ff538c74c04001dadf6fe1b4d8d1f028d09f75edb52b1f21dd0c2aff688ba45\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/enumerable/ERC1155EnumerableStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { EnumerableSet } from '../../../utils/EnumerableSet.sol';\\n\\nlibrary ERC1155EnumerableStorage {\\n    struct Layout {\\n        mapping(uint256 => uint256) totalSupply;\\n        mapping(uint256 => EnumerableSet.AddressSet) accountsByToken;\\n        mapping(address => EnumerableSet.UintSet) tokensByAccount;\\n    }\\n\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC1155Enumerable');\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x33c415a72189dd74fcccf1a3737ed6a6991edb4ec410952adef1410a22bce57a\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/enumerable/IERC1155Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC1155 enumerable and aggregate function interface\\n */\\ninterface IERC1155Enumerable {\\n    /**\\n     * @notice query total minted supply of given token\\n     * @param id token id to query\\n     * @return token supply\\n     */\\n    function totalSupply(uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @notice query total number of holders for given token\\n     * @param id token id to query\\n     * @return quantity of holders\\n     */\\n    function totalHolders(uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @notice query holders of given token\\n     * @param id token id to query\\n     * @return list of holder addresses\\n     */\\n    function accountsByToken(uint256 id)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    /**\\n     * @notice query tokens held by given address\\n     * @param account address to query\\n     * @return list of token ids\\n     */\\n    function tokensByAccount(address account)\\n        external\\n        view\\n        returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0xbef598a8755a36981932f7cf4ada1d25890971ab7144a117c0ed88cab0511e04\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/metadata/ERC1155Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { UintUtils } from '../../../utils/UintUtils.sol';\\nimport { IERC1155Metadata } from './IERC1155Metadata.sol';\\nimport { ERC1155MetadataInternal } from './ERC1155MetadataInternal.sol';\\nimport { ERC1155MetadataStorage } from './ERC1155MetadataStorage.sol';\\n\\n/**\\n * @notice ERC1155 metadata extensions\\n */\\nabstract contract ERC1155Metadata is IERC1155Metadata, ERC1155MetadataInternal {\\n    using UintUtils for uint256;\\n\\n    /**\\n     * @notice inheritdoc IERC1155Metadata\\n     */\\n    function uri(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        ERC1155MetadataStorage.Layout storage l = ERC1155MetadataStorage\\n            .layout();\\n\\n        string memory tokenIdURI = l.tokenURIs[tokenId];\\n        string memory baseURI = l.baseURI;\\n\\n        if (bytes(baseURI).length == 0) {\\n            return tokenIdURI;\\n        } else if (bytes(tokenIdURI).length > 0) {\\n            return string(abi.encodePacked(baseURI, tokenIdURI));\\n        } else {\\n            return string(abi.encodePacked(baseURI, tokenId.toString()));\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6322c9474aa916850b855eb9bce0e56e85705740e78b9e9028fccca907d235bb\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/metadata/ERC1155MetadataInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC1155MetadataInternal } from './IERC1155MetadataInternal.sol';\\nimport { ERC1155MetadataStorage } from './ERC1155MetadataStorage.sol';\\n\\n/**\\n * @notice ERC1155Metadata internal functions\\n */\\nabstract contract ERC1155MetadataInternal is IERC1155MetadataInternal {\\n    /**\\n     * @notice set base metadata URI\\n     * @dev base URI is a non-standard feature adapted from the ERC721 specification\\n     * @param baseURI base URI\\n     */\\n    function _setBaseURI(string memory baseURI) internal {\\n        ERC1155MetadataStorage.layout().baseURI = baseURI;\\n    }\\n\\n    /**\\n     * @notice set per-token metadata URI\\n     * @param tokenId token whose metadata URI to set\\n     * @param tokenURI per-token URI\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory tokenURI) internal {\\n        ERC1155MetadataStorage.layout().tokenURIs[tokenId] = tokenURI;\\n        emit URI(tokenURI, tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x922b91abc8972541855e56fd93468ee9f0178a68551c6b4ece6df639accf6d68\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/metadata/ERC1155MetadataStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @notice ERC1155 metadata extensions\\n */\\nlibrary ERC1155MetadataStorage {\\n    bytes32 internal constant STORAGE_SLOT =\\n        keccak256('solidstate.contracts.storage.ERC1155Metadata');\\n\\n    struct Layout {\\n        string baseURI;\\n        mapping(uint256 => string) tokenURIs;\\n    }\\n\\n    function layout() internal pure returns (Layout storage l) {\\n        bytes32 slot = STORAGE_SLOT;\\n        assembly {\\n            l.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbb01fdd26dbaf6423ff6b208fd58cfefd84dbaf9a0bebcd64f3ff7467e691c6a\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/metadata/IERC1155Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC1155Metadata interface\\n */\\ninterface IERC1155Metadata {\\n    /**\\n     * @notice get generated URI for given token\\n     * @return token URI\\n     */\\n    function uri(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xf0fcc6093a6eb3c0254814f365cc11cb5ec8e7b66493d52a02d9892de2fc198c\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/metadata/IERC1155MetadataInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Partial ERC1155Metadata interface needed by internal functions\\n */\\ninterface IERC1155MetadataInternal {\\n    event URI(string value, uint256 indexed tokenId);\\n}\\n\",\"keccak256\":\"0xe379314dbf1cfb48fc693a904e845a56d88056376b571a52f5a54a14a390c475\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/AddressUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary AddressUtils {\\n    function toString(address account) internal pure returns (string memory) {\\n        bytes32 value = bytes32(uint256(uint160(account)));\\n        bytes memory alphabet = '0123456789abcdef';\\n        bytes memory chars = new bytes(42);\\n\\n        chars[0] = '0';\\n        chars[1] = 'x';\\n\\n        for (uint256 i = 0; i < 20; i++) {\\n            chars[2 + i * 2] = alphabet[uint8(value[i + 12] >> 4)];\\n            chars[3 + i * 2] = alphabet[uint8(value[i + 12] & 0x0f)];\\n        }\\n\\n        return string(chars);\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function sendValue(address payable account, uint256 amount) internal {\\n        (bool success, ) = account.call{ value: amount }('');\\n        require(success, 'AddressUtils: failed to send value');\\n    }\\n\\n    function functionCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return\\n            functionCall(target, data, 'AddressUtils: failed low-level call');\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, error);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                'AddressUtils: failed low-level call with value'\\n            );\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        require(\\n            address(this).balance >= value,\\n            'AddressUtils: insufficient balance for call'\\n        );\\n        return _functionCallWithValue(target, data, value, error);\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) private returns (bytes memory) {\\n        require(\\n            isContract(target),\\n            'AddressUtils: function call to non-contract'\\n        );\\n\\n        (bool success, bytes memory returnData) = target.call{ value: value }(\\n            data\\n        );\\n\\n        if (success) {\\n            return returnData;\\n        } else if (returnData.length > 0) {\\n            assembly {\\n                let returnData_size := mload(returnData)\\n                revert(add(32, returnData), returnData_size)\\n            }\\n        } else {\\n            revert(error);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x427b64d138edb39914556505367376c7d5ad00ecca42db79dca8276404393e0b\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Set implementation with enumeration functions\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT license)\\n */\\nlibrary EnumerableSet {\\n    struct Set {\\n        bytes32[] _values;\\n        // 1-indexed to allow 0 to signify nonexistence\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    function at(Bytes32Set storage set, uint256 index)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        return _at(set._inner, index);\\n    }\\n\\n    function at(AddressSet storage set, uint256 index)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    function at(UintSet storage set, uint256 index)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    function contains(Bytes32Set storage set, bytes32 value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, value);\\n    }\\n\\n    function contains(AddressSet storage set, address value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function contains(UintSet storage set, uint256 value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    function indexOf(Bytes32Set storage set, bytes32 value)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _indexOf(set._inner, value);\\n    }\\n\\n    function indexOf(AddressSet storage set, address value)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _indexOf(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function indexOf(UintSet storage set, uint256 value)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _indexOf(set._inner, bytes32(value));\\n    }\\n\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    function add(Bytes32Set storage set, bytes32 value)\\n        internal\\n        returns (bool)\\n    {\\n        return _add(set._inner, value);\\n    }\\n\\n    function add(AddressSet storage set, address value)\\n        internal\\n        returns (bool)\\n    {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    function remove(Bytes32Set storage set, bytes32 value)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(set._inner, value);\\n    }\\n\\n    function remove(AddressSet storage set, address value)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    function remove(UintSet storage set, uint256 value)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    function _at(Set storage set, uint256 index)\\n        private\\n        view\\n        returns (bytes32)\\n    {\\n        require(\\n            set._values.length > index,\\n            'EnumerableSet: index out of bounds'\\n        );\\n        return set._values[index];\\n    }\\n\\n    function _contains(Set storage set, bytes32 value)\\n        private\\n        view\\n        returns (bool)\\n    {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    function _indexOf(Set storage set, bytes32 value)\\n        private\\n        view\\n        returns (uint256)\\n    {\\n        unchecked {\\n            return set._indexes[value] - 1;\\n        }\\n    }\\n\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            uint256 index = valueIndex - 1;\\n            bytes32 last = set._values[set._values.length - 1];\\n\\n            // move last value to now-vacant index\\n\\n            set._values[index] = last;\\n            set._indexes[last] = index + 1;\\n\\n            // clear last index\\n\\n            set._values.pop();\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x42e1b641451347b1f3b7dc523fbea5c50e99793f56e3d7b11561fb56f00bc432\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/UintUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary UintUtils {\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0';\\n        }\\n\\n        uint256 temp = value;\\n        uint256 digits;\\n\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n\\n        bytes memory buffer = new bytes(digits);\\n\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x58c2a621bfa49d032bee277f6f1803b95567cb42178e33d3c0e0a04066991b62\",\"license\":\"MIT\"},\"contracts/BaseRelayRecipient/BaseRelayRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport '@openzeppelin/contracts/utils/Context.sol';\\nimport './BaseRelayRecipientStorage.sol';\\n\\n/**\\n * A base contract to be inherited by any contract that want to receive relayed transactions\\n * A subclass must use \\\"_msgSender()\\\" instead of \\\"msg.sender\\\"\\n */\\n\\nabstract contract BaseRelayRecipient is Context {\\n  /*\\n   * require a function to be called through GSN only\\n   */\\n  //  modifier trustedForwarderOnly() {\\n  //    require(msg.sender == address(s.trustedForwarder), \\\"Function can only be called through the trusted Forwarder\\\");\\n  //    _;\\n  //  }\\n\\n  function isTrustedForwarder(address forwarder) public view returns (bool) {\\n    return forwarder == BaseRelayRecipientStorage.layout().trustedForwarder;\\n  }\\n\\n  /**\\n   * return the sender of this call.\\n   * if the call came through our trusted forwarder, return the original sender.\\n   * otherwise, return `msg.sender`.\\n   * should be used in the contract anywhere instead of msg.sender\\n   */\\n  function _msgSender() internal view virtual override returns (address ret) {\\n    if (msg.data.length >= 24 && isTrustedForwarder(msg.sender)) {\\n      // At this point we know that the sender is a trusted forwarder,\\n      // so we trust that the last bytes of msg.data are the verified sender address.\\n      // extract sender address from the end of msg.data\\n      assembly {\\n        ret := shr(96, calldataload(sub(calldatasize(), 20)))\\n      }\\n    } else {\\n      return msg.sender;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xdc6b83ea96e8f275d8089e71fe292fb3b8050958cd8782455df44b6f3a689a02\",\"license\":\"MIT\"},\"contracts/BaseRelayRecipient/BaseRelayRecipientStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nlibrary BaseRelayRecipientStorage {\\n  bytes32 internal constant STORAGE_SLOT = keccak256('diamond.storage.BaseRelayRecipientStorage');\\n\\n  struct Layout {\\n    /*\\n     * Forwarder singleton we accept calls from\\n     */\\n    address trustedForwarder;\\n  }\\n\\n  function layout() internal pure returns (Layout storage lay) {\\n    bytes32 slot = STORAGE_SLOT;\\n    assembly {\\n      lay.slot := slot\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x70b05cd88aedcf18c1eaf4c789e1c9630b17fd3c2963ad5c752aa390e6ddc90e\",\"license\":\"MIT\"},\"contracts/CyberDropBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\n//\\nimport '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\\nimport '@openzeppelin/contracts/utils/Counters.sol';\\n\\nimport './libraries/LibAppStorage.sol';\\nimport './libraries/LibDropStorage.sol';\\nimport './CyberTokenBase.sol';\\n\\ncontract CyberDropBase is CyberTokenBase {\\n  using ECDSA for bytes32;\\n  using Counters for Counters.Counter;\\n\\n  event DropCreated(address indexed account, uint256 indexed tokenId);\\n\\n  function dropMintCounter(uint256 _tokenId, address _minter) external view returns (uint256) {\\n    LibDropStorage.Drop storage drop = LibDropStorage.layout().drops[_tokenId];\\n    require(drop.amountCap != 0, 'DNE');\\n    return drop.mintCounter[_minter].current();\\n  }\\n\\n  function getDrop(uint256 _tokenId)\\n    external\\n    view\\n    returns (\\n      uint256 timeStart,\\n      uint256 timeEnd,\\n      uint256 price,\\n      uint256 amountCap,\\n      uint256 shareCyber,\\n      address creator,\\n      uint256 minted\\n    )\\n  {\\n    LibDropStorage.Drop storage drop = LibDropStorage.layout().drops[_tokenId];\\n    require(drop.amountCap != 0, 'DNE');\\n    return (drop.timeStart, drop.timeEnd, drop.price, drop.amountCap, drop.shareCyber, drop.creator, drop.minted);\\n  }\\n\\n  function createDrop(\\n    string memory _uri,\\n    uint256 _timeStart,\\n    uint256 _timeEnd,\\n    uint256 _price,\\n    uint256 _amountCap,\\n    uint256 _shareCyber,\\n    bytes memory _signature\\n  ) external returns (uint256 tokenId) {\\n    require(_timeEnd - _timeStart > 0, 'IT');\\n    require(_shareCyber <= 100, 'ISO');\\n    require(_amountCap > 0, 'IAC');\\n\\n    LibAppStorage.Layout storage layout = LibAppStorage.layout();\\n    address sender = _msgSender();\\n    uint256 nonce = minterNonce(sender);\\n    bytes memory _message = abi.encodePacked(\\n      _uri,\\n      _timeStart,\\n      _timeEnd,\\n      _price,\\n      _amountCap,\\n      _shareCyber,\\n      sender,\\n      nonce\\n    );\\n    address recoveredAddress = keccak256(_message).toEthSignedMessageHash().recover(_signature);\\n    require(recoveredAddress == layout.manager, 'NM');\\n    tokenId = layout.totalSupply.current();\\n\\n    // Effects\\n    setTokenURI(tokenId, _uri);\\n    layout.totalSupply.increment();\\n    layout.minterNonce[sender].increment();\\n\\n    LibDropStorage.Drop storage drop = LibDropStorage.layout().drops[tokenId];\\n    drop.timeStart = _timeStart;\\n    drop.timeEnd = _timeEnd;\\n    drop.price = _price;\\n    drop.amountCap = _amountCap;\\n    drop.shareCyber = _shareCyber;\\n    drop.creator = payable(sender);\\n\\n    emit DropCreated(sender, tokenId);\\n  }\\n\\n  function mint(\\n    uint256 _tokenId,\\n    uint256 _quantity,\\n    bytes memory _signature\\n  ) external payable returns (bool success) {\\n    address sender = _msgSender();\\n    LibDropStorage.Drop storage drop = LibDropStorage.layout().drops[_tokenId];\\n\\n    require(drop.amountCap - drop.minted >= _quantity, 'CR');\\n\\n    require(block.timestamp > drop.timeStart && block.timestamp <= drop.timeEnd, 'OOT');\\n\\n    require(msg.value == drop.price * _quantity, 'IA');\\n\\n    uint256 senderDropNonce = drop.mintCounter[sender].current();\\n    bytes memory _message = abi.encodePacked(_tokenId, _quantity, sender, senderDropNonce);\\n    LibAppStorage.Layout storage layout = LibAppStorage.layout();\\n    address recoveredAddress = keccak256(_message).toEthSignedMessageHash().recover(_signature);\\n    require(recoveredAddress == layout.manager, 'NM');\\n\\n    // Effects\\n    drop.minted += _quantity;\\n    drop.mintCounter[sender].increment();\\n    _safeMint(sender, _tokenId, _quantity, '');\\n\\n    if (drop.price > 0) {\\n      uint256 amountOnCyber = (msg.value * drop.shareCyber) / 100;\\n      uint256 amountCreator = msg.value - amountOnCyber;\\n\\n      drop.creator.transfer(amountCreator);\\n      payable(layout.oncyber).transfer(amountOnCyber);\\n    }\\n\\n    emit Minted(sender, _tokenId, _quantity);\\n\\n    return true;\\n  }\\n}\\n\",\"keccak256\":\"0xc792fcd3c0b94abdd17109f285de6c19b804aa0c5d444f1b729c0ff2215d1d5f\",\"license\":\"MIT\"},\"contracts/CyberTokenBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\n//\\nimport '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\\nimport '@openzeppelin/contracts/utils/Counters.sol';\\nimport '@solidstate/contracts/token/ERC1155/IERC1155.sol';\\nimport './BaseRelayRecipient/BaseRelayRecipient.sol';\\nimport './BaseRelayRecipient/BaseRelayRecipientStorage.sol';\\nimport './Diamond/LibDiamond.sol';\\nimport './ERC1155URI/ERC1155URI.sol';\\n\\nimport './libraries/LibAppStorage.sol';\\n\\ncontract CyberTokenBase is BaseRelayRecipient, ERC1155URI {\\n  using ECDSA for bytes32;\\n  using Counters for Counters.Counter;\\n\\n  event Minted(address indexed account, uint256 indexed tokenId, uint256 indexed amount);\\n\\n  function initialize(\\n    string memory _uri,\\n    address _manager,\\n    address _trustedForwarder,\\n    address _opensea,\\n    address _oncyber\\n  ) public virtual {\\n    require(LibDiamond.diamondStorage().contractOwner == msg.sender, 'NO');\\n\\n    BaseRelayRecipientStorage.layout().trustedForwarder = _trustedForwarder;\\n    LibDiamond.diamondStorage().supportedInterfaces[type(IERC1155).interfaceId] = true;\\n    setURI(_uri);\\n    LibAppStorage.layout().manager = _manager;\\n    LibAppStorage.layout().opensea = _opensea;\\n    LibAppStorage.layout().oncyber = _oncyber;\\n  }\\n\\n  function totalSupply() public view returns (uint256) {\\n    return LibAppStorage.layout().totalSupply.current();\\n  }\\n\\n  function manager() public view returns (address) {\\n    return LibAppStorage.layout().manager;\\n  }\\n\\n  function oncyber() public view returns (address) {\\n    return LibAppStorage.layout().oncyber;\\n  }\\n\\n  function minterNonce(address _minter) public view returns (uint256) {\\n    return LibAppStorage.layout().minterNonce[_minter].current();\\n  }\\n}\\n\",\"keccak256\":\"0xd2c78638b24a8137cc5b4359192ad68006b106c3e9202fcb4fa559ac1ddbcab3\",\"license\":\"MIT\"},\"contracts/Diamantaires/DestinationUtility/CyberDestinationUtilityFactoryFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport '../../CyberDropBase.sol';\\n\\nabstract contract LuxContract {\\n    function mint(address newOwner, uint256 tokenId, uint256 amount) public virtual;\\n}\\n\\ncontract CyberDestinationUtilityFactoryFacet is CyberDropBase {\\n\\n    function burnTransfer(uint256 amount) public {\\n        bool isLux = amount == 20;\\n        require(amount == 2 || isLux, 'WA');\\n\\n        ERC1155 lootPodContract = ERC1155(0x3e96436B51B49d6f4dA8D4a0Bd4817Cd1F1719E0);\\n        require(lootPodContract.balanceOf(msg.sender, 1) >= amount, 'NR');\\n        require(balanceOf(msg.sender, 1) >= amount, 'NS');\\n        \\n        _burn(msg.sender, 1, amount);\\n        lootPodContract.safeTransferFrom(msg.sender, 0x000000000000000000000000000000000000dEaD, 1, amount, '');\\n\\n        // mint new contract\\n        LuxContract luxPodContract = LuxContract(0xf763DB874F2A6014440D0F87F39D8A2B38801a31);\\n        luxPodContract.mint(msg.sender, isLux ? 2 : 1, 1);\\n    }\\n}\",\"keccak256\":\"0xc33ec73d9b8c4f17ce1a85133924e724d7d6136e3c556b82bfaadbd7f631c022\",\"license\":\"MIT\"},\"contracts/Diamond/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nlibrary LibDiamond {\\n  bytes32 public constant DIAMOND_STORAGE_POSITION = keccak256('diamond.standard.diamond.storage');\\n\\n  struct FacetAddressAndPosition {\\n    address facetAddress;\\n    uint16 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n  }\\n\\n  struct FacetFunctionSelectors {\\n    bytes4[] functionSelectors;\\n    uint16 facetAddressPosition; // position of facetAddress in facetAddresses array\\n  }\\n\\n  struct DiamondStorage {\\n    // maps function selector to the facet address and\\n    // the position of the selector in the facetFunctionSelectors.selectors array\\n    mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n    // maps facet addresses to function selectors\\n    mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n    // facet addresses\\n    address[] facetAddresses;\\n    // Used to query if a contract implements an interface.\\n    // Used to implement ERC-165.\\n    mapping(bytes4 => bool) supportedInterfaces;\\n    // owner of the contract\\n    address contractOwner;\\n  }\\n\\n  function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n    bytes32 position = DIAMOND_STORAGE_POSITION;\\n    assembly {\\n      ds.slot := position\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x6a24487e68ce45b38fe1a5403f4fa2289f8c380bab11c116a84345424c1e1e41\",\"license\":\"MIT\"},\"contracts/ERC1155URI/ERC1155URI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport '@solidstate/contracts/token/ERC1155/ERC1155.sol';\\nimport './ERC1155URIStorage.sol';\\n\\nabstract contract ERC1155URI is ERC1155 {\\n  function uri(uint256 _tokenId) public view virtual override returns (string memory) {\\n    string memory tokenURI = ERC1155URIStorage.layout().tokenURIs[_tokenId];\\n    require(bytes(tokenURI).length != 0, 'ERC1155URI: tokenId not exist');\\n    return string(abi.encodePacked(ERC1155URIStorage.layout().uri, tokenURI));\\n  }\\n\\n  function setURI(string memory newUri) internal virtual {\\n    ERC1155URIStorage.layout().uri = newUri;\\n  }\\n\\n  function setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n    ERC1155URIStorage.layout().tokenURIs[tokenId] = _tokenURI;\\n  }\\n}\\n\",\"keccak256\":\"0x2715c4f7facb6b86328f9476db4c1763e79757ece73936f53ef7c1ad275a7212\",\"license\":\"MIT\"},\"contracts/ERC1155URI/ERC1155URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nlibrary ERC1155URIStorage {\\n  bytes32 internal constant STORAGESLOT = keccak256('diamond.storage.ERC1155URI');\\n\\n  struct Layout {\\n    mapping(uint256 => string) tokenURIs;\\n    string uri;\\n  }\\n\\n  function layout() internal pure returns (Layout storage lay) {\\n    bytes32 slot = STORAGESLOT;\\n    assembly {\\n      lay.slot := slot\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x6464720e555c147745804afb8b1c64c9b23f011ca6dd28cac46e4cef764e3ff4\",\"license\":\"MIT\"},\"contracts/libraries/LibAppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport '@openzeppelin/contracts/utils/Counters.sol';\\n\\n//\\n\\nlibrary LibAppStorage {\\n  bytes32 public constant STORAGE_SLOT = keccak256('app.storage');\\n\\n  struct Layout {\\n    address manager;\\n    address opensea;\\n    Counters.Counter totalSupply;\\n    mapping(address => Counters.Counter) minterNonce;\\n    address oncyber;\\n  }\\n\\n  function layout() internal pure returns (Layout storage lay) {\\n    bytes32 slot = STORAGE_SLOT;\\n    assembly {\\n      lay.slot := slot\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x6e358a29e3e4bf729ae9f78f09abff0f22a8a939d2253d1d1c36f7c2daa09c9c\",\"license\":\"MIT\"},\"contracts/libraries/LibDropStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\n//\\nimport '@openzeppelin/contracts/utils/Counters.sol';\\n\\nlibrary LibDropStorage {\\n  bytes32 public constant STORAGE_SLOT = keccak256('drop.app.storage');\\n  // Deprecated\\n  struct DropV1 {\\n    uint256 timeStart;\\n    uint256 timeEnd;\\n    uint256 priceStart;\\n    uint256 priceEnd;\\n    uint256 stepDuration;\\n    uint256 amountCap;\\n    uint256 shareCyber;\\n    address payable creator;\\n    Counters.Counter minted;\\n    mapping(address => Counters.Counter) mintCounter;\\n  }\\n\\n  struct Layout {\\n    mapping(uint256 => DropV1) dropsV1; // Deprecated\\n    mapping(uint256 => Drop) drops;\\n  }\\n\\n  function layout() internal pure returns (Layout storage lay) {\\n    bytes32 slot = STORAGE_SLOT;\\n    assembly {\\n      lay.slot := slot\\n    }\\n  }\\n\\n  struct Drop {\\n    uint256 timeStart;\\n    uint256 timeEnd;\\n    uint256 price;\\n    uint256 amountCap;\\n    uint256 shareCyber;\\n    address payable creator;\\n    uint256 minted;\\n    mapping(address => Counters.Counter) mintCounter;\\n  }\\n}\\n\",\"keccak256\":\"0x5ea5592d7b46ce1d63a7e3ca5d36cf91bffcc3d046b50444abb9932eeca9d5b0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613b27806100206000396000f3fe60806040526004361061017f5760003560e01c8063572b6c05116100d6578063bc01188e1161007f578063e751c98111610059578063e751c9811461053d578063e985e9c51461055d578063f242432a146105c557600080fd5b8063bc01188e14610494578063bd85b039146104d1578063e4a59a541461051d57600080fd5b806385bff2e7116100b057806385bff2e714610434578063a22cb46514610454578063b3a721d11461047457600080fd5b8063572b6c051461035b5780636787d449146103a95780636dcfd8411461040757600080fd5b806313ba55df116101385780632eb2c2d6116101125780632eb2c2d6146102bd578063481c6a75146102dd5780634e1273f41461032e57600080fd5b806313ba55df1461024957806318160ddd146102695780631b0239471461029d57600080fd5b806308dc9f421161016957806308dc9f42146101e75780630b885ac3146101fa5780630e89341c1461021c57600080fd5b8062fdd58e1461018457806301ffc9a7146101b7575b600080fd5b34801561019057600080fd5b506101a461019f366004612f8b565b6105e5565b6040519081526020015b60405180910390f35b3480156101c357600080fd5b506101d76101d2366004612fcb565b6105fa565b60405190151581526020016101ae565b6101d76101f53660046130a6565b61063b565b34801561020657600080fd5b5061021a6102153660046130f6565b610a29565b005b34801561022857600080fd5b5061023c610237366004613176565b610c12565b6040516101ae91906131e7565b34801561025557600080fd5b506101a4610264366004613176565b610d6a565b34801561027557600080fd5b507f47dc25f21c7793543edaeb1ef19d41726ddbada967ae9a7980b9bd8a45228a60546101a4565b3480156102a957600080fd5b506101a46102b83660046131fa565b610da0565b3480156102c957600080fd5b5061021a6102d83660046132aa565b610ddd565b3480156102e957600080fd5b507f47dc25f21c7793543edaeb1ef19d41726ddbada967ae9a7980b9bd8a45228a5e546001600160a01b03165b6040516001600160a01b0390911681526020016101ae565b34801561033a57600080fd5b5061034e610349366004613354565b610ea9565b6040516101ae919061345a565b34801561036757600080fd5b506101d76103763660046131fa565b7fa5e014e253d3b66bd348c3cdd05f38b9805fff0b6471d004b58c6ada26cae993546001600160a01b0390811691161490565b3480156103b557600080fd5b506103c96103c4366004613176565b6110d0565b60408051978852602088019690965294860193909352606085019190915260808401526001600160a01b031660a083015260c082015260e0016101ae565b34801561041357600080fd5b50610427610422366004613176565b611183565b6040516101ae919061346d565b34801561044057600080fd5b5061034e61044f3660046131fa565b611261565b34801561046057600080fd5b5061021a61046f3660046134ba565b611334565b34801561048057600080fd5b506101a461048f3660046134f6565b61143d565b3480156104a057600080fd5b507f47dc25f21c7793543edaeb1ef19d41726ddbada967ae9a7980b9bd8a45228a62546001600160a01b0316610316565b3480156104dd57600080fd5b506101a46104ec366004613176565b60009081527fb31c2c74f86ca3ce94d901f5f5bbe66f7161eec2f7b5aa0b75a86371436424ea602052604090205490565b34801561052957600080fd5b5061021a610538366004613176565b6114c6565b34801561054957600080fd5b506101a4610558366004613522565b61179d565b34801561056957600080fd5b506101d76105783660046135b6565b6001600160a01b0391821660009081527f1799cf914cb0cb442ca7c7ac709ee40d0cb89e87351dc08d517fbda27d50c68c6020908152604080832093909416825291909152205460ff1690565b3480156105d157600080fd5b5061021a6105e03660046135e0565b611ac5565b60006105f18383611b8a565b90505b92915050565b6001600160e01b0319811660009081527f326d0c59a7612f6a9919e2a8ee333c80ba689d8ba2634de89c85cbb04832e705602052604081205460ff166105f4565b600080610646611c4f565b60008681527f6862122c88c20d0f389f9211fb45e4a0982f5f74838cd11cfb5e8c8b41fbe65a60205260409020600681015460038201549293509091869161068d9161365b565b10156106e05760405162461bcd60e51b815260206004820152600260248201527f435200000000000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b8054421180156106f4575080600101544211155b6107405760405162461bcd60e51b815260206004820152600360248201527f4f4f54000000000000000000000000000000000000000000000000000000000060448201526064016106d7565b8481600201546107509190613672565b341461079e5760405162461bcd60e51b815260206004820152600260248201527f494100000000000000000000000000000000000000000000000000000000000060448201526064016106d7565b6001600160a01b038216600090815260078201602090815260408083205481519283018a9052908201889052606085811b6bffffffffffffffffffffffff191690830152607482018190529190609401604051602081830303815290604052905060006108287f47dc25f21c7793543edaeb1ef19d41726ddbada967ae9a7980b9bd8a45228a5e90565b905060006108948861088e85805190602001206040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b90611ca5565b82549091506001600160a01b038083169116146108d85760405162461bcd60e51b81526020600482015260026024820152614e4d60f01b60448201526064016106d7565b888560060160008282546108ec9190613691565b90915550506001600160a01b038616600090815260078601602052604090208054600101905561092d868b8b60405180602001604052806000815250611cc1565b6002850154156109e1576000606486600401543461094b9190613672565b61095591906136a9565b90506000610963823461365b565b60058801546040519192506001600160a01b03169082156108fc029083906000818181858888f193505050501580156109a0573d6000803e3d6000fd5b5060048401546040516001600160a01b039091169083156108fc029084906000818181858888f193505050501580156109dd573d6000803e3d6000fd5b5050505b888a876001600160a01b03167f25b428dfde728ccfaddad7e29e4ac23c24ed7fd1a6e3e3f91894a9a073f5dfff60405160405180910390a45060019998505050505050505050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c1320546001600160a01b03163314610aa25760405162461bcd60e51b815260206004820152600260248201527f4e4f00000000000000000000000000000000000000000000000000000000000060448201526064016106d7565b7fa5e014e253d3b66bd348c3cdd05f38b9805fff0b6471d004b58c6ada26cae993805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0385161790557fd9b67a26000000000000000000000000000000000000000000000000000000006000527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131f6020527f845f7f8d885943dffdc1524acbd9538b2923f93aad26d306df3b8982c7f0632d805460ff19166001179055610b6685611ce2565b7f47dc25f21c7793543edaeb1ef19d41726ddbada967ae9a7980b9bd8a45228a5e80546001600160a01b0395861673ffffffffffffffffffffffffffffffffffffffff19918216179091557f47dc25f21c7793543edaeb1ef19d41726ddbada967ae9a7980b9bd8a45228a5f8054938616938216939093179092557f47dc25f21c7793543edaeb1ef19d41726ddbada967ae9a7980b9bd8a45228a628054919094169116179091555050565b60008181527fb3408a5d8f30170919d3996b6cc182726500ad24733d17ace2f621485f6e7c836020526040812080546060929190610c4f906136cb565b80601f0160208091040260200160405190810160405280929190818152602001828054610c7b906136cb565b8015610cc85780601f10610c9d57610100808354040283529160200191610cc8565b820191906000526020600020905b815481529060010190602001808311610cab57829003601f168201915b505050505090508051600003610d205760405162461bcd60e51b815260206004820152601d60248201527f455243313135355552493a20746f6b656e4964206e6f7420657869737400000060448201526064016106d7565b604051610d53907fb3408a5d8f30170919d3996b6cc182726500ad24733d17ace2f621485f6e7c84908390602001613705565b604051602081830303815290604052915050919050565b60008181527fb31c2c74f86ca3ce94d901f5f5bbe66f7161eec2f7b5aa0b75a86371436424eb602052604081206105f490611d11565b6001600160a01b03811660009081527f47dc25f21c7793543edaeb1ef19d41726ddbada967ae9a7980b9bd8a45228a6160205260408120546105f4565b6001600160a01b038516331480610e3657506001600160a01b03851660009081527f1799cf914cb0cb442ca7c7ac709ee40d0cb89e87351dc08d517fbda27d50c68c6020908152604080832033845290915290205460ff165b610e945760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b60648201526084016106d7565b610ea2338686868686611d1b565b5050505050565b60608151835114610f225760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860448201527f206d69736d61746368000000000000000000000000000000000000000000000060648201526084016106d7565b82517f1799cf914cb0cb442ca7c7ac709ee40d0cb89e87351dc08d517fbda27d50c68b9060009067ffffffffffffffff811115610f6157610f61612fef565b604051908082528060200260200182016040528015610f8a578160200160208202803683370190505b50905060005b85518110156110c75760006001600160a01b0316868281518110610fb657610fb661378c565b60200260200101516001600160a01b03160361103a5760405162461bcd60e51b815260206004820152603160248201527f455243313135353a2062617463682062616c616e636520717565727920666f7260448201527f20746865207a65726f206164647265737300000000000000000000000000000060648201526084016106d7565b82600086838151811061104f5761104f61378c565b6020026020010151815260200190815260200160002060008783815181106110795761107961378c565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020548282815181106110b4576110b461378c565b6020908102919091010152600101610f90565b50949350505050565b60008181527f6862122c88c20d0f389f9211fb45e4a0982f5f74838cd11cfb5e8c8b41fbe65a60205260408120600381015482918291829182918291829182036111425760405162461bcd60e51b8152602060048201526003602482015262444e4560e81b60448201526064016106d7565b805460018201546002830154600384015460048501546005860154600690960154949e939d50919b50995097506001600160a01b0390921695509350915050565b60008181527fb31c2c74f86ca3ce94d901f5f5bbe66f7161eec2f7b5aa0b75a86371436424eb602052604081206060916111bc82611d11565b67ffffffffffffffff8111156111d4576111d4612fef565b6040519080825280602002602001820160405280156111fd578160200160208202803683370190505b50905060005b61120c83611d11565b8110156112595761121d8382611d3f565b82828151811061122f5761122f61378c565b6001600160a01b039092166020928302919091019091015280611251816137a2565b915050611203565b509392505050565b6001600160a01b03811660009081527fb31c2c74f86ca3ce94d901f5f5bbe66f7161eec2f7b5aa0b75a86371436424ec602052604081206060916112a482611d11565b67ffffffffffffffff8111156112bc576112bc612fef565b6040519080825280602002602001820160405280156112e5578160200160208202803683370190505b50905060005b6112f483611d11565b811015611259576113058382611d3f565b8282815181106113175761131761378c565b60209081029190910101528061132c816137a2565b9150506112eb565b6001600160a01b03821633036113b25760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c66000000000000000000000000000000000000000000000060648201526084016106d7565b3360008181527f1799cf914cb0cb442ca7c7ac709ee40d0cb89e87351dc08d517fbda27d50c68c602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b60008281527f6862122c88c20d0f389f9211fb45e4a0982f5f74838cd11cfb5e8c8b41fbe65a60205260408120600381015482036114a35760405162461bcd60e51b8152602060048201526003602482015262444e4560e81b60448201526064016106d7565b6001600160a01b0383166000908152600782016020526040902054949350505050565b6014811460028214806114d65750805b6115225760405162461bcd60e51b815260206004820152600260248201527f574100000000000000000000000000000000000000000000000000000000000060448201526064016106d7565b6040517efdd58e00000000000000000000000000000000000000000000000000000000815233600482015260016024820152733e96436b51b49d6f4da8d4a0bd4817cd1f1719e0908390829062fdd58e90604401602060405180830381865afa158015611593573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b791906137bb565b10156116055760405162461bcd60e51b815260206004820152600260248201527f4e5200000000000000000000000000000000000000000000000000000000000060448201526064016106d7565b826116113360016105e5565b101561165f5760405162461bcd60e51b815260206004820152600260248201527f4e5300000000000000000000000000000000000000000000000000000000000060448201526064016106d7565b61166b33600185611d4b565b6040517ff242432a00000000000000000000000000000000000000000000000000000000815233600482015261dead6024820152600160448201526064810184905260a06084820152600060a48201526001600160a01b0382169063f242432a9060c401600060405180830381600087803b1580156116e957600080fd5b505af11580156116fd573d6000803e3d6000fd5b5073f763db874f2a6014440d0f87f39d8a2b38801a31925082915063156e29f69050338561172c57600161172f565b60025b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260ff16602482015260016044820152606401600060405180830381600087803b15801561177f57600080fd5b505af1158015611793573d6000803e3d6000fd5b5050505050505050565b6000806117aa888861365b565b116117f75760405162461bcd60e51b815260206004820152600260248201527f495400000000000000000000000000000000000000000000000000000000000060448201526064016106d7565b60648311156118485760405162461bcd60e51b815260206004820152600360248201527f49534f000000000000000000000000000000000000000000000000000000000060448201526064016106d7565b600084116118985760405162461bcd60e51b815260206004820152600360248201527f494143000000000000000000000000000000000000000000000000000000000060448201526064016106d7565b7f47dc25f21c7793543edaeb1ef19d41726ddbada967ae9a7980b9bd8a45228a5e60006118c3611c4f565b905060006118d082610da0565b905060008b8b8b8b8b8b88886040516020016118f39897969594939291906137d4565b604051602081830303815290604052905060006119688761088e84805190602001206040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b85549091506001600160a01b038083169116146119ac5760405162461bcd60e51b81526020600482015260026024820152614e4d60f01b60448201526064016106d7565b600285015495506119bd868e611f0f565b6119cd8560020180546001019055565b6001600160a01b038416600090815260038601602052604090208054600101905560007f6862122c88c20d0f389f9211fb45e4a0982f5f74838cd11cfb5e8c8b41fbe659600101600088815260200190815260200160002090508c81600001819055508b81600101819055508a8160020181905550898160030181905550888160040181905550848160050160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555086856001600160a01b03167f4011446e11141f68f741bffe55d700b48cbc73fb927148a01c8f4664c3be014260405160405180910390a3505050505050979650505050505050565b6001600160a01b038516331480611b1e57506001600160a01b03851660009081527f1799cf914cb0cb442ca7c7ac709ee40d0cb89e87351dc08d517fbda27d50c68c6020908152604080832033845290915290205460ff165b611b7c5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b60648201526084016106d7565b610ea2338686868686611f4b565b60006001600160a01b038316611c085760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201527f65726f206164647265737300000000000000000000000000000000000000000060648201526084016106d7565b7f1799cf914cb0cb442ca7c7ac709ee40d0cb89e87351dc08d517fbda27d50c68b6000928352602090815260408084206001600160a01b0395909516845293905250205490565b600060183610801590611c8b57507fa5e014e253d3b66bd348c3cdd05f38b9805fff0b6471d004b58c6ada26cae993546001600160a01b031633145b15611c9d575060131936013560601c90565b503390565b90565b6000806000611cb48585611f67565b9150915061125981611fd5565b611ccd8484848461218e565b611cdc336000868686866122d1565b50505050565b7fb3408a5d8f30170919d3996b6cc182726500ad24733d17ace2f621485f6e7c84611d0d8282613874565b5050565b60006105f4825490565b611d2986868686868661247f565b611d37868686868686612717565b505050505050565b60006105f18383612813565b6001600160a01b038316611dc75760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201527f657373000000000000000000000000000000000000000000000000000000000060648201526084016106d7565b611df533846000611dd7866128b4565b611de0866128b4565b604051806020016040528060008152506128ff565b60008281527f1799cf914cb0cb442ca7c7ac709ee40d0cb89e87351dc08d517fbda27d50c68b602090815260408083206001600160a01b03871684529182905290912054821115611eae5760405162461bcd60e51b815260206004820152602560248201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c60448201527f616e63657300000000000000000000000000000000000000000000000000000060648201526084016106d7565b6001600160a01b03841660008181526020838152604080832080548790039055805187815291820186905291929133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a450505050565b60008281527fb3408a5d8f30170919d3996b6cc182726500ad24733d17ace2f621485f6e7c8360205260409020611f468282613874565b505050565b611f5986868686868661290d565b611d378686868686866122d1565b6000808251604103611f9d5760208301516040840151606085015160001a611f9187828585612ab5565b94509450505050611fce565b8251604003611fc65760208301516040840151611fbb868383612ba2565b935093505050611fce565b506000905060025b9250929050565b6000816004811115611fe957611fe9613934565b03611ff15750565b600181600481111561200557612005613934565b036120525760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016106d7565b600281600481111561206657612066613934565b036120b35760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016106d7565b60038160048111156120c7576120c7613934565b0361211f5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016106d7565b600481600481111561213357612133613934565b0361218b5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b60648201526084016106d7565b50565b6001600160a01b03841661220a5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f2061646472657360448201527f730000000000000000000000000000000000000000000000000000000000000060648201526084016106d7565b6122293360008661221a876128b4565b612223876128b4565b866128ff565b60008381527f1799cf914cb0cb442ca7c7ac709ee40d0cb89e87351dc08d517fbda27d50c68b602090815260408083206001600160a01b038816845291829052822080549192859261227c908490613691565b909155505060408051858152602081018590526001600160a01b0387169160009133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b6001600160a01b0384163b15611d375760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190612315908990899088908890889060040161394a565b6020604051808303816000875af1925050508015612350575060408051601f3d908101601f1916820190925261234d9181019061398d565b60015b6124055761235c6139aa565b806308c379a00361239557506123706139c5565b8061237b5750612397565b8060405162461bcd60e51b81526004016106d791906131e7565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e204552433131353560448201527f526563656976657220696d706c656d656e74657200000000000000000000000060648201526084016106d7565b6001600160e01b0319811663f23a6e6160e01b146124765760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b60648201526084016106d7565b50505050505050565b6001600160a01b0384166124e35760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b60648201526084016106d7565b815183511461255a5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060448201527f6d69736d6174636800000000000000000000000000000000000000000000000060648201526084016106d7565b6125688686868686866128ff565b7f1799cf914cb0cb442ca7c7ac709ee40d0cb89e87351dc08d517fbda27d50c68b60005b84518110156126b65760008582815181106125a9576125a961378c565b6020026020010151905060008583815181106125c7576125c761378c565b602090810291909101810151600084815286835260408082206001600160a01b038e16835290935291909120549091508181101561265b5760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a20696e73756666696369656e742062616c616e636573206660448201526a37b9103a3930b739b332b960a91b60648201526084016106d7565b6000838152602086815260408083206001600160a01b038e811685529252808320938590039093558a168152908120805483929061269a908490613691565b92505081905550505080806126ae906137a2565b91505061258c565b50846001600160a01b0316866001600160a01b0316886001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051612706929190613a4f565b60405180910390a450505050505050565b6001600160a01b0384163b15611d375760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061275b9089908990889088908890600401613a7d565b6020604051808303816000875af1925050508015612796575060408051601f3d908101601f191682019092526127939181019061398d565b60015b6127a25761235c6139aa565b6001600160e01b0319811663bc197c8160e01b146124765760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b60648201526084016106d7565b8154600090821061288c5760405162461bcd60e51b815260206004820152602260248201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e60448201527f647300000000000000000000000000000000000000000000000000000000000060648201526084016106d7565b8260000182815481106128a1576128a161378c565b9060005260206000200154905092915050565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106128ee576128ee61378c565b602090810291909101015292915050565b611d37868686868686612bf4565b6001600160a01b0384166129715760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b60648201526084016106d7565b61298086868661221a876128b4565b60008381527f1799cf914cb0cb442ca7c7ac709ee40d0cb89e87351dc08d517fbda27d50c68b602081815260408084206001600160a01b038a1685529091529091205483811015612a275760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a20696e73756666696369656e742062616c616e636573206660448201526a37b9103a3930b739b332b960a91b60648201526084016106d7565b6000858152602083815260408083206001600160a01b038b81168552925280832093879003909355871681529081208054859290612a66908490613691565b909155505060408051858152602081018590526001600160a01b038088169289821692918b16917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f629101612706565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115612aec5750600090506003612b99565b8460ff16601b14158015612b0457508460ff16601c14155b15612b155750600090506004612b99565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612b69573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116612b9257600060019250925050612b99565b9150600090505b94509492505050565b6000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831681612bd860ff86901c601b613691565b9050612be687828885612ab5565b935093505050935093915050565b611d37868686868686836001600160a01b0316856001600160a01b031614611d37576001600160a01b0385811660009081527fb31c2c74f86ca3ce94d901f5f5bbe66f7161eec2f7b5aa0b75a86371436424ec6020526040808220928716825281207fb31c2c74f86ca3ce94d901f5f5bbe66f7161eec2f7b5aa0b75a86371436424ea927fb31c2c74f86ca3ce94d901f5f5bbe66f7161eec2f7b5aa0b75a86371436424eb929091905b8751811015612de6576000878281518110612cbb57612cbb61378c565b602002602001015190506000811115612dd3576000898381518110612ce257612ce261378c565b6020026020010151905060006001600160a01b03168c6001600160a01b031603612d2f5760008181526020889052604081208054849290612d24908490613691565b90915550612d649050565b81612d3a8d83611b8a565b03612d64576000818152602087905260409020612d57908d612df3565b50612d628582612e08565b505b6001600160a01b038b16612d9b5760008181526020889052604081208054849290612d9090849061365b565b90915550612dd19050565b612da58b82611b8a565b600003612dd1576000818152602087905260409020612dc4908c612e14565b50612dcf8482612e29565b505b505b5080612dde816137a2565b915050612c9e565b5050505050505050505050565b60006105f1836001600160a01b038416612e35565b60006105f18383612e35565b60006105f1836001600160a01b038416612f20565b60006105f18383612f20565b60008181526001830160205260408120548015612f16576000612e5960018361365b565b85549091506000908690612e6f9060019061365b565b81548110612e7f57612e7f61378c565b9060005260206000200154905080866000018381548110612ea257612ea261378c565b600091825260209091200155612eb9826001613691565b60008281526001880160205260409020558554869080612edb57612edb613adb565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506105f4565b60009150506105f4565b6000818152600183016020526040812054612f67575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556105f4565b5060006105f4565b80356001600160a01b0381168114612f8657600080fd5b919050565b60008060408385031215612f9e57600080fd5b612fa783612f6f565b946020939093013593505050565b6001600160e01b03198116811461218b57600080fd5b600060208284031215612fdd57600080fd5b8135612fe881612fb5565b9392505050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff8111828210171561302b5761302b612fef565b6040525050565b600082601f83011261304357600080fd5b813567ffffffffffffffff81111561305d5761305d612fef565b604051613074601f8301601f191660200182613005565b81815284602083860101111561308957600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000606084860312156130bb57600080fd5b8335925060208401359150604084013567ffffffffffffffff8111156130e057600080fd5b6130ec86828701613032565b9150509250925092565b600080600080600060a0868803121561310e57600080fd5b853567ffffffffffffffff81111561312557600080fd5b61313188828901613032565b95505061314060208701612f6f565b935061314e60408701612f6f565b925061315c60608701612f6f565b915061316a60808701612f6f565b90509295509295909350565b60006020828403121561318857600080fd5b5035919050565b60005b838110156131aa578181015183820152602001613192565b83811115611cdc5750506000910152565b600081518084526131d381602086016020860161318f565b601f01601f19169290920160200192915050565b6020815260006105f160208301846131bb565b60006020828403121561320c57600080fd5b6105f182612f6f565b600067ffffffffffffffff82111561322f5761322f612fef565b5060051b60200190565b600082601f83011261324a57600080fd5b8135602061325782613215565b6040516132648282613005565b83815260059390931b850182019282810191508684111561328457600080fd5b8286015b8481101561329f5780358352918301918301613288565b509695505050505050565b600080600080600060a086880312156132c257600080fd5b6132cb86612f6f565b94506132d960208701612f6f565b9350604086013567ffffffffffffffff808211156132f657600080fd5b61330289838a01613239565b9450606088013591508082111561331857600080fd5b61332489838a01613239565b9350608088013591508082111561333a57600080fd5b5061334788828901613032565b9150509295509295909350565b6000806040838503121561336757600080fd5b823567ffffffffffffffff8082111561337f57600080fd5b818501915085601f83011261339357600080fd5b813560206133a082613215565b6040516133ad8282613005565b83815260059390931b85018201928281019150898411156133cd57600080fd5b948201945b838610156133f2576133e386612f6f565b825294820194908201906133d2565b9650508601359250508082111561340857600080fd5b5061341585828601613239565b9150509250929050565b600081518084526020808501945080840160005b8381101561344f57815187529582019590820190600101613433565b509495945050505050565b6020815260006105f1602083018461341f565b6020808252825182820181905260009190848201906040850190845b818110156134ae5783516001600160a01b031683529284019291840191600101613489565b50909695505050505050565b600080604083850312156134cd57600080fd5b6134d683612f6f565b9150602083013580151581146134eb57600080fd5b809150509250929050565b6000806040838503121561350957600080fd5b8235915061351960208401612f6f565b90509250929050565b600080600080600080600060e0888a03121561353d57600080fd5b873567ffffffffffffffff8082111561355557600080fd5b6135618b838c01613032565b985060208a0135975060408a0135965060608a0135955060808a0135945060a08a0135935060c08a013591508082111561359a57600080fd5b506135a78a828b01613032565b91505092959891949750929550565b600080604083850312156135c957600080fd5b6135d283612f6f565b915061351960208401612f6f565b600080600080600060a086880312156135f857600080fd5b61360186612f6f565b945061360f60208701612f6f565b93506040860135925060608601359150608086013567ffffffffffffffff81111561363957600080fd5b61334788828901613032565b634e487b7160e01b600052601160045260246000fd5b60008282101561366d5761366d613645565b500390565b600081600019048311821515161561368c5761368c613645565b500290565b600082198211156136a4576136a4613645565b500190565b6000826136c657634e487b7160e01b600052601260045260246000fd5b500490565b600181811c908216806136df57607f821691505b6020821081036136ff57634e487b7160e01b600052602260045260246000fd5b50919050565b6000808454613713816136cb565b6001828116801561372b57600181146137405761376f565b60ff198416875282151583028701945061376f565b8860005260208060002060005b858110156137665781548a82015290840190820161374d565b50505082870194505b50505050835161378381836020880161318f565b01949350505050565b634e487b7160e01b600052603260045260246000fd5b6000600182016137b4576137b4613645565b5060010190565b6000602082840312156137cd57600080fd5b5051919050565b600089516137e6818460208e0161318f565b91909101978852506020870195909552604086019390935260608086019290925260808501521b6bffffffffffffffffffffffff191660a083015260b482015260d401919050565b601f821115611f4657600081815260208120601f850160051c810160208610156138555750805b601f850160051c820191505b81811015611d3757828155600101613861565b815167ffffffffffffffff81111561388e5761388e612fef565b6138a28161389c84546136cb565b8461382e565b602080601f8311600181146138d757600084156138bf5750858301515b600019600386901b1c1916600185901b178555611d37565b600085815260208120601f198616915b82811015613906578886015182559484019460019091019084016138e7565b50858210156139245787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052602160045260246000fd5b60006001600160a01b03808816835280871660208401525084604083015283606083015260a0608083015261398260a08301846131bb565b979650505050505050565b60006020828403121561399f57600080fd5b8151612fe881612fb5565b600060033d1115611ca25760046000803e5060005160e01c90565b600060443d10156139d35790565b6040516003193d81016004833e81513d67ffffffffffffffff8160248401118184111715613a0357505050505090565b8285019150815181811115613a1b5750505050505090565b843d8701016020828501011115613a355750505050505090565b613a4460208286010187613005565b509095945050505050565b604081526000613a62604083018561341f565b8281036020840152613a74818561341f565b95945050505050565b60006001600160a01b03808816835280871660208401525060a06040830152613aa960a083018661341f565b8281036060840152613abb818661341f565b90508281036080840152613acf81856131bb565b98975050505050505050565b634e487b7160e01b600052603160045260246000fdfea264697066735822122076705ab666ed54810ce6c6fa54b334a9d4d48d012d2af407b2c326215a7e75ab64736f6c634300080f0033",
  "deployedBytecode": "0x60806040526004361061017f5760003560e01c8063572b6c05116100d6578063bc01188e1161007f578063e751c98111610059578063e751c9811461053d578063e985e9c51461055d578063f242432a146105c557600080fd5b8063bc01188e14610494578063bd85b039146104d1578063e4a59a541461051d57600080fd5b806385bff2e7116100b057806385bff2e714610434578063a22cb46514610454578063b3a721d11461047457600080fd5b8063572b6c051461035b5780636787d449146103a95780636dcfd8411461040757600080fd5b806313ba55df116101385780632eb2c2d6116101125780632eb2c2d6146102bd578063481c6a75146102dd5780634e1273f41461032e57600080fd5b806313ba55df1461024957806318160ddd146102695780631b0239471461029d57600080fd5b806308dc9f421161016957806308dc9f42146101e75780630b885ac3146101fa5780630e89341c1461021c57600080fd5b8062fdd58e1461018457806301ffc9a7146101b7575b600080fd5b34801561019057600080fd5b506101a461019f366004612f8b565b6105e5565b6040519081526020015b60405180910390f35b3480156101c357600080fd5b506101d76101d2366004612fcb565b6105fa565b60405190151581526020016101ae565b6101d76101f53660046130a6565b61063b565b34801561020657600080fd5b5061021a6102153660046130f6565b610a29565b005b34801561022857600080fd5b5061023c610237366004613176565b610c12565b6040516101ae91906131e7565b34801561025557600080fd5b506101a4610264366004613176565b610d6a565b34801561027557600080fd5b507f47dc25f21c7793543edaeb1ef19d41726ddbada967ae9a7980b9bd8a45228a60546101a4565b3480156102a957600080fd5b506101a46102b83660046131fa565b610da0565b3480156102c957600080fd5b5061021a6102d83660046132aa565b610ddd565b3480156102e957600080fd5b507f47dc25f21c7793543edaeb1ef19d41726ddbada967ae9a7980b9bd8a45228a5e546001600160a01b03165b6040516001600160a01b0390911681526020016101ae565b34801561033a57600080fd5b5061034e610349366004613354565b610ea9565b6040516101ae919061345a565b34801561036757600080fd5b506101d76103763660046131fa565b7fa5e014e253d3b66bd348c3cdd05f38b9805fff0b6471d004b58c6ada26cae993546001600160a01b0390811691161490565b3480156103b557600080fd5b506103c96103c4366004613176565b6110d0565b60408051978852602088019690965294860193909352606085019190915260808401526001600160a01b031660a083015260c082015260e0016101ae565b34801561041357600080fd5b50610427610422366004613176565b611183565b6040516101ae919061346d565b34801561044057600080fd5b5061034e61044f3660046131fa565b611261565b34801561046057600080fd5b5061021a61046f3660046134ba565b611334565b34801561048057600080fd5b506101a461048f3660046134f6565b61143d565b3480156104a057600080fd5b507f47dc25f21c7793543edaeb1ef19d41726ddbada967ae9a7980b9bd8a45228a62546001600160a01b0316610316565b3480156104dd57600080fd5b506101a46104ec366004613176565b60009081527fb31c2c74f86ca3ce94d901f5f5bbe66f7161eec2f7b5aa0b75a86371436424ea602052604090205490565b34801561052957600080fd5b5061021a610538366004613176565b6114c6565b34801561054957600080fd5b506101a4610558366004613522565b61179d565b34801561056957600080fd5b506101d76105783660046135b6565b6001600160a01b0391821660009081527f1799cf914cb0cb442ca7c7ac709ee40d0cb89e87351dc08d517fbda27d50c68c6020908152604080832093909416825291909152205460ff1690565b3480156105d157600080fd5b5061021a6105e03660046135e0565b611ac5565b60006105f18383611b8a565b90505b92915050565b6001600160e01b0319811660009081527f326d0c59a7612f6a9919e2a8ee333c80ba689d8ba2634de89c85cbb04832e705602052604081205460ff166105f4565b600080610646611c4f565b60008681527f6862122c88c20d0f389f9211fb45e4a0982f5f74838cd11cfb5e8c8b41fbe65a60205260409020600681015460038201549293509091869161068d9161365b565b10156106e05760405162461bcd60e51b815260206004820152600260248201527f435200000000000000000000000000000000000000000000000000000000000060448201526064015b60405180910390fd5b8054421180156106f4575080600101544211155b6107405760405162461bcd60e51b815260206004820152600360248201527f4f4f54000000000000000000000000000000000000000000000000000000000060448201526064016106d7565b8481600201546107509190613672565b341461079e5760405162461bcd60e51b815260206004820152600260248201527f494100000000000000000000000000000000000000000000000000000000000060448201526064016106d7565b6001600160a01b038216600090815260078201602090815260408083205481519283018a9052908201889052606085811b6bffffffffffffffffffffffff191690830152607482018190529190609401604051602081830303815290604052905060006108287f47dc25f21c7793543edaeb1ef19d41726ddbada967ae9a7980b9bd8a45228a5e90565b905060006108948861088e85805190602001206040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b90611ca5565b82549091506001600160a01b038083169116146108d85760405162461bcd60e51b81526020600482015260026024820152614e4d60f01b60448201526064016106d7565b888560060160008282546108ec9190613691565b90915550506001600160a01b038616600090815260078601602052604090208054600101905561092d868b8b60405180602001604052806000815250611cc1565b6002850154156109e1576000606486600401543461094b9190613672565b61095591906136a9565b90506000610963823461365b565b60058801546040519192506001600160a01b03169082156108fc029083906000818181858888f193505050501580156109a0573d6000803e3d6000fd5b5060048401546040516001600160a01b039091169083156108fc029084906000818181858888f193505050501580156109dd573d6000803e3d6000fd5b5050505b888a876001600160a01b03167f25b428dfde728ccfaddad7e29e4ac23c24ed7fd1a6e3e3f91894a9a073f5dfff60405160405180910390a45060019998505050505050505050565b7fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c1320546001600160a01b03163314610aa25760405162461bcd60e51b815260206004820152600260248201527f4e4f00000000000000000000000000000000000000000000000000000000000060448201526064016106d7565b7fa5e014e253d3b66bd348c3cdd05f38b9805fff0b6471d004b58c6ada26cae993805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0385161790557fd9b67a26000000000000000000000000000000000000000000000000000000006000527fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131f6020527f845f7f8d885943dffdc1524acbd9538b2923f93aad26d306df3b8982c7f0632d805460ff19166001179055610b6685611ce2565b7f47dc25f21c7793543edaeb1ef19d41726ddbada967ae9a7980b9bd8a45228a5e80546001600160a01b0395861673ffffffffffffffffffffffffffffffffffffffff19918216179091557f47dc25f21c7793543edaeb1ef19d41726ddbada967ae9a7980b9bd8a45228a5f8054938616938216939093179092557f47dc25f21c7793543edaeb1ef19d41726ddbada967ae9a7980b9bd8a45228a628054919094169116179091555050565b60008181527fb3408a5d8f30170919d3996b6cc182726500ad24733d17ace2f621485f6e7c836020526040812080546060929190610c4f906136cb565b80601f0160208091040260200160405190810160405280929190818152602001828054610c7b906136cb565b8015610cc85780601f10610c9d57610100808354040283529160200191610cc8565b820191906000526020600020905b815481529060010190602001808311610cab57829003601f168201915b505050505090508051600003610d205760405162461bcd60e51b815260206004820152601d60248201527f455243313135355552493a20746f6b656e4964206e6f7420657869737400000060448201526064016106d7565b604051610d53907fb3408a5d8f30170919d3996b6cc182726500ad24733d17ace2f621485f6e7c84908390602001613705565b604051602081830303815290604052915050919050565b60008181527fb31c2c74f86ca3ce94d901f5f5bbe66f7161eec2f7b5aa0b75a86371436424eb602052604081206105f490611d11565b6001600160a01b03811660009081527f47dc25f21c7793543edaeb1ef19d41726ddbada967ae9a7980b9bd8a45228a6160205260408120546105f4565b6001600160a01b038516331480610e3657506001600160a01b03851660009081527f1799cf914cb0cb442ca7c7ac709ee40d0cb89e87351dc08d517fbda27d50c68c6020908152604080832033845290915290205460ff165b610e945760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b60648201526084016106d7565b610ea2338686868686611d1b565b5050505050565b60608151835114610f225760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860448201527f206d69736d61746368000000000000000000000000000000000000000000000060648201526084016106d7565b82517f1799cf914cb0cb442ca7c7ac709ee40d0cb89e87351dc08d517fbda27d50c68b9060009067ffffffffffffffff811115610f6157610f61612fef565b604051908082528060200260200182016040528015610f8a578160200160208202803683370190505b50905060005b85518110156110c75760006001600160a01b0316868281518110610fb657610fb661378c565b60200260200101516001600160a01b03160361103a5760405162461bcd60e51b815260206004820152603160248201527f455243313135353a2062617463682062616c616e636520717565727920666f7260448201527f20746865207a65726f206164647265737300000000000000000000000000000060648201526084016106d7565b82600086838151811061104f5761104f61378c565b6020026020010151815260200190815260200160002060008783815181106110795761107961378c565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020548282815181106110b4576110b461378c565b6020908102919091010152600101610f90565b50949350505050565b60008181527f6862122c88c20d0f389f9211fb45e4a0982f5f74838cd11cfb5e8c8b41fbe65a60205260408120600381015482918291829182918291829182036111425760405162461bcd60e51b8152602060048201526003602482015262444e4560e81b60448201526064016106d7565b805460018201546002830154600384015460048501546005860154600690960154949e939d50919b50995097506001600160a01b0390921695509350915050565b60008181527fb31c2c74f86ca3ce94d901f5f5bbe66f7161eec2f7b5aa0b75a86371436424eb602052604081206060916111bc82611d11565b67ffffffffffffffff8111156111d4576111d4612fef565b6040519080825280602002602001820160405280156111fd578160200160208202803683370190505b50905060005b61120c83611d11565b8110156112595761121d8382611d3f565b82828151811061122f5761122f61378c565b6001600160a01b039092166020928302919091019091015280611251816137a2565b915050611203565b509392505050565b6001600160a01b03811660009081527fb31c2c74f86ca3ce94d901f5f5bbe66f7161eec2f7b5aa0b75a86371436424ec602052604081206060916112a482611d11565b67ffffffffffffffff8111156112bc576112bc612fef565b6040519080825280602002602001820160405280156112e5578160200160208202803683370190505b50905060005b6112f483611d11565b811015611259576113058382611d3f565b8282815181106113175761131761378c565b60209081029190910101528061132c816137a2565b9150506112eb565b6001600160a01b03821633036113b25760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c66000000000000000000000000000000000000000000000060648201526084016106d7565b3360008181527f1799cf914cb0cb442ca7c7ac709ee40d0cb89e87351dc08d517fbda27d50c68c602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b60008281527f6862122c88c20d0f389f9211fb45e4a0982f5f74838cd11cfb5e8c8b41fbe65a60205260408120600381015482036114a35760405162461bcd60e51b8152602060048201526003602482015262444e4560e81b60448201526064016106d7565b6001600160a01b0383166000908152600782016020526040902054949350505050565b6014811460028214806114d65750805b6115225760405162461bcd60e51b815260206004820152600260248201527f574100000000000000000000000000000000000000000000000000000000000060448201526064016106d7565b6040517efdd58e00000000000000000000000000000000000000000000000000000000815233600482015260016024820152733e96436b51b49d6f4da8d4a0bd4817cd1f1719e0908390829062fdd58e90604401602060405180830381865afa158015611593573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b791906137bb565b10156116055760405162461bcd60e51b815260206004820152600260248201527f4e5200000000000000000000000000000000000000000000000000000000000060448201526064016106d7565b826116113360016105e5565b101561165f5760405162461bcd60e51b815260206004820152600260248201527f4e5300000000000000000000000000000000000000000000000000000000000060448201526064016106d7565b61166b33600185611d4b565b6040517ff242432a00000000000000000000000000000000000000000000000000000000815233600482015261dead6024820152600160448201526064810184905260a06084820152600060a48201526001600160a01b0382169063f242432a9060c401600060405180830381600087803b1580156116e957600080fd5b505af11580156116fd573d6000803e3d6000fd5b5073f763db874f2a6014440d0f87f39d8a2b38801a31925082915063156e29f69050338561172c57600161172f565b60025b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260ff16602482015260016044820152606401600060405180830381600087803b15801561177f57600080fd5b505af1158015611793573d6000803e3d6000fd5b5050505050505050565b6000806117aa888861365b565b116117f75760405162461bcd60e51b815260206004820152600260248201527f495400000000000000000000000000000000000000000000000000000000000060448201526064016106d7565b60648311156118485760405162461bcd60e51b815260206004820152600360248201527f49534f000000000000000000000000000000000000000000000000000000000060448201526064016106d7565b600084116118985760405162461bcd60e51b815260206004820152600360248201527f494143000000000000000000000000000000000000000000000000000000000060448201526064016106d7565b7f47dc25f21c7793543edaeb1ef19d41726ddbada967ae9a7980b9bd8a45228a5e60006118c3611c4f565b905060006118d082610da0565b905060008b8b8b8b8b8b88886040516020016118f39897969594939291906137d4565b604051602081830303815290604052905060006119688761088e84805190602001206040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b85549091506001600160a01b038083169116146119ac5760405162461bcd60e51b81526020600482015260026024820152614e4d60f01b60448201526064016106d7565b600285015495506119bd868e611f0f565b6119cd8560020180546001019055565b6001600160a01b038416600090815260038601602052604090208054600101905560007f6862122c88c20d0f389f9211fb45e4a0982f5f74838cd11cfb5e8c8b41fbe659600101600088815260200190815260200160002090508c81600001819055508b81600101819055508a8160020181905550898160030181905550888160040181905550848160050160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555086856001600160a01b03167f4011446e11141f68f741bffe55d700b48cbc73fb927148a01c8f4664c3be014260405160405180910390a3505050505050979650505050505050565b6001600160a01b038516331480611b1e57506001600160a01b03851660009081527f1799cf914cb0cb442ca7c7ac709ee40d0cb89e87351dc08d517fbda27d50c68c6020908152604080832033845290915290205460ff165b611b7c5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b60648201526084016106d7565b610ea2338686868686611f4b565b60006001600160a01b038316611c085760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201527f65726f206164647265737300000000000000000000000000000000000000000060648201526084016106d7565b7f1799cf914cb0cb442ca7c7ac709ee40d0cb89e87351dc08d517fbda27d50c68b6000928352602090815260408084206001600160a01b0395909516845293905250205490565b600060183610801590611c8b57507fa5e014e253d3b66bd348c3cdd05f38b9805fff0b6471d004b58c6ada26cae993546001600160a01b031633145b15611c9d575060131936013560601c90565b503390565b90565b6000806000611cb48585611f67565b9150915061125981611fd5565b611ccd8484848461218e565b611cdc336000868686866122d1565b50505050565b7fb3408a5d8f30170919d3996b6cc182726500ad24733d17ace2f621485f6e7c84611d0d8282613874565b5050565b60006105f4825490565b611d2986868686868661247f565b611d37868686868686612717565b505050505050565b60006105f18383612813565b6001600160a01b038316611dc75760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201527f657373000000000000000000000000000000000000000000000000000000000060648201526084016106d7565b611df533846000611dd7866128b4565b611de0866128b4565b604051806020016040528060008152506128ff565b60008281527f1799cf914cb0cb442ca7c7ac709ee40d0cb89e87351dc08d517fbda27d50c68b602090815260408083206001600160a01b03871684529182905290912054821115611eae5760405162461bcd60e51b815260206004820152602560248201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c60448201527f616e63657300000000000000000000000000000000000000000000000000000060648201526084016106d7565b6001600160a01b03841660008181526020838152604080832080548790039055805187815291820186905291929133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a450505050565b60008281527fb3408a5d8f30170919d3996b6cc182726500ad24733d17ace2f621485f6e7c8360205260409020611f468282613874565b505050565b611f5986868686868661290d565b611d378686868686866122d1565b6000808251604103611f9d5760208301516040840151606085015160001a611f9187828585612ab5565b94509450505050611fce565b8251604003611fc65760208301516040840151611fbb868383612ba2565b935093505050611fce565b506000905060025b9250929050565b6000816004811115611fe957611fe9613934565b03611ff15750565b600181600481111561200557612005613934565b036120525760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016106d7565b600281600481111561206657612066613934565b036120b35760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016106d7565b60038160048111156120c7576120c7613934565b0361211f5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016106d7565b600481600481111561213357612133613934565b0361218b5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b60648201526084016106d7565b50565b6001600160a01b03841661220a5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f2061646472657360448201527f730000000000000000000000000000000000000000000000000000000000000060648201526084016106d7565b6122293360008661221a876128b4565b612223876128b4565b866128ff565b60008381527f1799cf914cb0cb442ca7c7ac709ee40d0cb89e87351dc08d517fbda27d50c68b602090815260408083206001600160a01b038816845291829052822080549192859261227c908490613691565b909155505060408051858152602081018590526001600160a01b0387169160009133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b6001600160a01b0384163b15611d375760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190612315908990899088908890889060040161394a565b6020604051808303816000875af1925050508015612350575060408051601f3d908101601f1916820190925261234d9181019061398d565b60015b6124055761235c6139aa565b806308c379a00361239557506123706139c5565b8061237b5750612397565b8060405162461bcd60e51b81526004016106d791906131e7565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e204552433131353560448201527f526563656976657220696d706c656d656e74657200000000000000000000000060648201526084016106d7565b6001600160e01b0319811663f23a6e6160e01b146124765760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b60648201526084016106d7565b50505050505050565b6001600160a01b0384166124e35760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b60648201526084016106d7565b815183511461255a5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060448201527f6d69736d6174636800000000000000000000000000000000000000000000000060648201526084016106d7565b6125688686868686866128ff565b7f1799cf914cb0cb442ca7c7ac709ee40d0cb89e87351dc08d517fbda27d50c68b60005b84518110156126b65760008582815181106125a9576125a961378c565b6020026020010151905060008583815181106125c7576125c761378c565b602090810291909101810151600084815286835260408082206001600160a01b038e16835290935291909120549091508181101561265b5760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a20696e73756666696369656e742062616c616e636573206660448201526a37b9103a3930b739b332b960a91b60648201526084016106d7565b6000838152602086815260408083206001600160a01b038e811685529252808320938590039093558a168152908120805483929061269a908490613691565b92505081905550505080806126ae906137a2565b91505061258c565b50846001600160a01b0316866001600160a01b0316886001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051612706929190613a4f565b60405180910390a450505050505050565b6001600160a01b0384163b15611d375760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061275b9089908990889088908890600401613a7d565b6020604051808303816000875af1925050508015612796575060408051601f3d908101601f191682019092526127939181019061398d565b60015b6127a25761235c6139aa565b6001600160e01b0319811663bc197c8160e01b146124765760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b60648201526084016106d7565b8154600090821061288c5760405162461bcd60e51b815260206004820152602260248201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e60448201527f647300000000000000000000000000000000000000000000000000000000000060648201526084016106d7565b8260000182815481106128a1576128a161378c565b9060005260206000200154905092915050565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106128ee576128ee61378c565b602090810291909101015292915050565b611d37868686868686612bf4565b6001600160a01b0384166129715760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b60648201526084016106d7565b61298086868661221a876128b4565b60008381527f1799cf914cb0cb442ca7c7ac709ee40d0cb89e87351dc08d517fbda27d50c68b602081815260408084206001600160a01b038a1685529091529091205483811015612a275760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a20696e73756666696369656e742062616c616e636573206660448201526a37b9103a3930b739b332b960a91b60648201526084016106d7565b6000858152602083815260408083206001600160a01b038b81168552925280832093879003909355871681529081208054859290612a66908490613691565b909155505060408051858152602081018590526001600160a01b038088169289821692918b16917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f629101612706565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115612aec5750600090506003612b99565b8460ff16601b14158015612b0457508460ff16601c14155b15612b155750600090506004612b99565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612b69573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116612b9257600060019250925050612b99565b9150600090505b94509492505050565b6000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831681612bd860ff86901c601b613691565b9050612be687828885612ab5565b935093505050935093915050565b611d37868686868686836001600160a01b0316856001600160a01b031614611d37576001600160a01b0385811660009081527fb31c2c74f86ca3ce94d901f5f5bbe66f7161eec2f7b5aa0b75a86371436424ec6020526040808220928716825281207fb31c2c74f86ca3ce94d901f5f5bbe66f7161eec2f7b5aa0b75a86371436424ea927fb31c2c74f86ca3ce94d901f5f5bbe66f7161eec2f7b5aa0b75a86371436424eb929091905b8751811015612de6576000878281518110612cbb57612cbb61378c565b602002602001015190506000811115612dd3576000898381518110612ce257612ce261378c565b6020026020010151905060006001600160a01b03168c6001600160a01b031603612d2f5760008181526020889052604081208054849290612d24908490613691565b90915550612d649050565b81612d3a8d83611b8a565b03612d64576000818152602087905260409020612d57908d612df3565b50612d628582612e08565b505b6001600160a01b038b16612d9b5760008181526020889052604081208054849290612d9090849061365b565b90915550612dd19050565b612da58b82611b8a565b600003612dd1576000818152602087905260409020612dc4908c612e14565b50612dcf8482612e29565b505b505b5080612dde816137a2565b915050612c9e565b5050505050505050505050565b60006105f1836001600160a01b038416612e35565b60006105f18383612e35565b60006105f1836001600160a01b038416612f20565b60006105f18383612f20565b60008181526001830160205260408120548015612f16576000612e5960018361365b565b85549091506000908690612e6f9060019061365b565b81548110612e7f57612e7f61378c565b9060005260206000200154905080866000018381548110612ea257612ea261378c565b600091825260209091200155612eb9826001613691565b60008281526001880160205260409020558554869080612edb57612edb613adb565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506105f4565b60009150506105f4565b6000818152600183016020526040812054612f67575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556105f4565b5060006105f4565b80356001600160a01b0381168114612f8657600080fd5b919050565b60008060408385031215612f9e57600080fd5b612fa783612f6f565b946020939093013593505050565b6001600160e01b03198116811461218b57600080fd5b600060208284031215612fdd57600080fd5b8135612fe881612fb5565b9392505050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff8111828210171561302b5761302b612fef565b6040525050565b600082601f83011261304357600080fd5b813567ffffffffffffffff81111561305d5761305d612fef565b604051613074601f8301601f191660200182613005565b81815284602083860101111561308957600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000606084860312156130bb57600080fd5b8335925060208401359150604084013567ffffffffffffffff8111156130e057600080fd5b6130ec86828701613032565b9150509250925092565b600080600080600060a0868803121561310e57600080fd5b853567ffffffffffffffff81111561312557600080fd5b61313188828901613032565b95505061314060208701612f6f565b935061314e60408701612f6f565b925061315c60608701612f6f565b915061316a60808701612f6f565b90509295509295909350565b60006020828403121561318857600080fd5b5035919050565b60005b838110156131aa578181015183820152602001613192565b83811115611cdc5750506000910152565b600081518084526131d381602086016020860161318f565b601f01601f19169290920160200192915050565b6020815260006105f160208301846131bb565b60006020828403121561320c57600080fd5b6105f182612f6f565b600067ffffffffffffffff82111561322f5761322f612fef565b5060051b60200190565b600082601f83011261324a57600080fd5b8135602061325782613215565b6040516132648282613005565b83815260059390931b850182019282810191508684111561328457600080fd5b8286015b8481101561329f5780358352918301918301613288565b509695505050505050565b600080600080600060a086880312156132c257600080fd5b6132cb86612f6f565b94506132d960208701612f6f565b9350604086013567ffffffffffffffff808211156132f657600080fd5b61330289838a01613239565b9450606088013591508082111561331857600080fd5b61332489838a01613239565b9350608088013591508082111561333a57600080fd5b5061334788828901613032565b9150509295509295909350565b6000806040838503121561336757600080fd5b823567ffffffffffffffff8082111561337f57600080fd5b818501915085601f83011261339357600080fd5b813560206133a082613215565b6040516133ad8282613005565b83815260059390931b85018201928281019150898411156133cd57600080fd5b948201945b838610156133f2576133e386612f6f565b825294820194908201906133d2565b9650508601359250508082111561340857600080fd5b5061341585828601613239565b9150509250929050565b600081518084526020808501945080840160005b8381101561344f57815187529582019590820190600101613433565b509495945050505050565b6020815260006105f1602083018461341f565b6020808252825182820181905260009190848201906040850190845b818110156134ae5783516001600160a01b031683529284019291840191600101613489565b50909695505050505050565b600080604083850312156134cd57600080fd5b6134d683612f6f565b9150602083013580151581146134eb57600080fd5b809150509250929050565b6000806040838503121561350957600080fd5b8235915061351960208401612f6f565b90509250929050565b600080600080600080600060e0888a03121561353d57600080fd5b873567ffffffffffffffff8082111561355557600080fd5b6135618b838c01613032565b985060208a0135975060408a0135965060608a0135955060808a0135945060a08a0135935060c08a013591508082111561359a57600080fd5b506135a78a828b01613032565b91505092959891949750929550565b600080604083850312156135c957600080fd5b6135d283612f6f565b915061351960208401612f6f565b600080600080600060a086880312156135f857600080fd5b61360186612f6f565b945061360f60208701612f6f565b93506040860135925060608601359150608086013567ffffffffffffffff81111561363957600080fd5b61334788828901613032565b634e487b7160e01b600052601160045260246000fd5b60008282101561366d5761366d613645565b500390565b600081600019048311821515161561368c5761368c613645565b500290565b600082198211156136a4576136a4613645565b500190565b6000826136c657634e487b7160e01b600052601260045260246000fd5b500490565b600181811c908216806136df57607f821691505b6020821081036136ff57634e487b7160e01b600052602260045260246000fd5b50919050565b6000808454613713816136cb565b6001828116801561372b57600181146137405761376f565b60ff198416875282151583028701945061376f565b8860005260208060002060005b858110156137665781548a82015290840190820161374d565b50505082870194505b50505050835161378381836020880161318f565b01949350505050565b634e487b7160e01b600052603260045260246000fd5b6000600182016137b4576137b4613645565b5060010190565b6000602082840312156137cd57600080fd5b5051919050565b600089516137e6818460208e0161318f565b91909101978852506020870195909552604086019390935260608086019290925260808501521b6bffffffffffffffffffffffff191660a083015260b482015260d401919050565b601f821115611f4657600081815260208120601f850160051c810160208610156138555750805b601f850160051c820191505b81811015611d3757828155600101613861565b815167ffffffffffffffff81111561388e5761388e612fef565b6138a28161389c84546136cb565b8461382e565b602080601f8311600181146138d757600084156138bf5750858301515b600019600386901b1c1916600185901b178555611d37565b600085815260208120601f198616915b82811015613906578886015182559484019460019091019084016138e7565b50858210156139245787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052602160045260246000fd5b60006001600160a01b03808816835280871660208401525084604083015283606083015260a0608083015261398260a08301846131bb565b979650505050505050565b60006020828403121561399f57600080fd5b8151612fe881612fb5565b600060033d1115611ca25760046000803e5060005160e01c90565b600060443d10156139d35790565b6040516003193d81016004833e81513d67ffffffffffffffff8160248401118184111715613a0357505050505090565b8285019150815181811115613a1b5750505050505090565b843d8701016020828501011115613a355750505050505090565b613a4460208286010187613005565b509095945050505050565b604081526000613a62604083018561341f565b8281036020840152613a74818561341f565b95945050505050565b60006001600160a01b03808816835280871660208401525060a06040830152613aa960a083018661341f565b8281036060840152613abb818661341f565b90508281036080840152613acf81856131bb565b98975050505050505050565b634e487b7160e01b600052603160045260246000fdfea264697066735822122076705ab666ed54810ce6c6fa54b334a9d4d48d012d2af407b2c326215a7e75ab64736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "accountsByToken(uint256)": {
        "params": {
          "id": "token id to query"
        },
        "returns": {
          "_0": "list of holder addresses"
        }
      },
      "balanceOf(address,uint256)": {
        "params": {
          "account": "address to query",
          "id": "token to query"
        },
        "returns": {
          "_0": "token balance"
        }
      },
      "balanceOfBatch(address[],uint256[])": {
        "params": {
          "accounts": "addresss to query",
          "ids": "tokens to query"
        },
        "returns": {
          "_0": "token balances"
        }
      },
      "isApprovedForAll(address,address)": {
        "params": {
          "account": "address to query for approval granted",
          "operator": "address to query for approval received"
        },
        "returns": {
          "_0": "whether operator is approved to spend tokens held by account"
        }
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "params": {
          "amounts": "list of quantities of tokens to transfer",
          "data": "data payload",
          "from": "sender of tokens",
          "ids": "list of token IDs",
          "to": "receiver of tokens"
        }
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "params": {
          "amount": "quantity of tokens to transfer",
          "data": "data payload",
          "from": "sender of tokens",
          "id": "token ID",
          "to": "receiver of tokens"
        }
      },
      "setApprovalForAll(address,bool)": {
        "params": {
          "operator": "address whose approval status to update",
          "status": "whether operator should be considered approved"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceId": "interface id"
        },
        "returns": {
          "_0": "bool whether interface is supported"
        }
      },
      "tokensByAccount(address)": {
        "params": {
          "account": "address to query"
        },
        "returns": {
          "_0": "list of token ids"
        }
      },
      "totalHolders(uint256)": {
        "params": {
          "id": "token id to query"
        },
        "returns": {
          "_0": "quantity of holders"
        }
      },
      "totalSupply(uint256)": {
        "params": {
          "id": "token id to query"
        },
        "returns": {
          "_0": "token supply"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "accountsByToken(uint256)": {
        "notice": "query holders of given token"
      },
      "balanceOf(address,uint256)": {
        "notice": "query the balance of given token held by given address"
      },
      "balanceOfBatch(address[],uint256[])": {
        "notice": "query the balances of given tokens held by given addresses"
      },
      "isApprovedForAll(address,address)": {
        "notice": "query approval status of given operator with respect to given address"
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "notice": "transfer batch of tokens between given addresses, checking for ERC1155Receiver implementation if applicable"
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "notice": "transfer tokens between given addresses, checking for ERC1155Receiver implementation if applicable"
      },
      "setApprovalForAll(address,bool)": {
        "notice": "grant approval to or revoke approval from given operator to spend held tokens"
      },
      "supportsInterface(bytes4)": {
        "notice": "query whether contract has registered support for given interface"
      },
      "tokensByAccount(address)": {
        "notice": "query tokens held by given address"
      },
      "totalHolders(uint256)": {
        "notice": "query total number of holders for given token"
      },
      "totalSupply(uint256)": {
        "notice": "query total minted supply of given token"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}