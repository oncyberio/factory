{
  "address": "0xf90fd2bF6E375f9B9528C67329e3cA103Bca2C72",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "DestinationMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Minted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getDrop",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "timeStart",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timeEnd",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "shareCyber",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amountCap",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minted",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "creator",
              "type": "address"
            }
          ],
          "internalType": "struct LibUtilityStorage.Drop",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_trustedForwarder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_opensea",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oncyber",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_timeStart",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_timeEnd",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountCap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_shareCyber",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "mintEdition",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_minter",
          "type": "address"
        }
      ],
      "name": "minterNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oncyber",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8adc1cd43d69f0b1cd51099ac9f1adf6a1ff033e8f962f534670b1e0d7ece6d1",
  "receipt": {
    "to": null,
    "from": "0x1D8298B03E96cA6294A22ff9F1139eB6D13D11eb",
    "contractAddress": "0xf90fd2bF6E375f9B9528C67329e3cA103Bca2C72",
    "transactionIndex": 194,
    "gasUsed": "4133388",
    "logsBloom": "0x
    "blockHash": "0x07512023d2f6188f4e17b712d793263bf6f976b08bc9cb63da6fb32077b2e124",
    "transactionHash": "0x8adc1cd43d69f0b1cd51099ac9f1adf6a1ff033e8f962f534670b1e0d7ece6d1",
    "logs": [],
    "blockNumber": 13222810,
    "cumulativeGasUsed": "17273828",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "3cb65e12ff1025ebb89a59fb90ee3cc2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"DestinationMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getDrop\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timeStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"shareCyber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minted\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"creator\",\"type\":\"address\"}],\"internalType\":\"struct LibUtilityStorage.Drop\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trustedForwarder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_opensea\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oncyber\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_timeStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_timeEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_shareCyber\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"mintEdition\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"}],\"name\":\"minterNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oncyber\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"params\":{\"account\":\"address to query\",\"id\":\"token to query\"},\"returns\":{\"_0\":\"token balance\"}},\"balanceOfBatch(address[],uint256[])\":{\"params\":{\"accounts\":\"addresss to query\",\"ids\":\"tokens to query\"},\"returns\":{\"_0\":\"token balances\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"account\":\"address to query for approval granted\",\"operator\":\"address to query for approval received\"},\"returns\":{\"_0\":\"whether operator is approved to spend tokens held by account\"}},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"params\":{\"amounts\":\"list of quantities of tokens to transfer\",\"data\":\"data payload\",\"from\":\"sender of tokens\",\"ids\":\"list of token IDs\",\"to\":\"receiver of tokens\"}},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"params\":{\"amount\":\"quantity of tokens to transfer\",\"data\":\"data payload\",\"from\":\"sender of tokens\",\"id\":\"token ID\",\"to\":\"receiver of tokens\"}},\"setApprovalForAll(address,bool)\":{\"params\":{\"operator\":\"address whose approval status to update\",\"status\":\"whether operator should be considered approved\"}},\"supportsInterface(bytes4)\":{\"params\":{\"interfaceId\":\"interface id\"},\"returns\":{\"_0\":\"bool whether interface is supported\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"balanceOf(address,uint256)\":{\"notice\":\"query the balance of given token held by given address\"},\"balanceOfBatch(address[],uint256[])\":{\"notice\":\"query the balances of given tokens held by given addresses\"},\"isApprovedForAll(address,address)\":{\"notice\":\"query approval status of given operator with respect to given address\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"transfer batch of tokens between given addresses, checking for ERC1155Receiver implementation if applicable\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"notice\":\"transfer tokens between given addresses, checking for ERC1155Receiver implementation if applicable\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"grant approval to or revoke approval from given operator to spend held tokens\"},\"supportsInterface(bytes4)\":{\"notice\":\"query whether contract has registered support for given interface\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DestinationUtility/CyberDestinationUtilityFactoryFacet.sol\":\"CyberDestinationUtilityFactoryFacet\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x78450f4e3b722cce467b21e285f72ce5eaf361e9ba9dd2241a413926246773cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xbc991a1cf357ce19480831a40792c814238a3b5458134703682abd8aa39719fb\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC165} from './IERC165.sol';\\nimport {ERC165Storage} from './ERC165Storage.sol';\\n\\n/**\\n * @title ERC165 implementation\\n */\\nabstract contract ERC165 is IERC165 {\\n  using ERC165Storage for ERC165Storage.Layout;\\n\\n  /**\\n   * @inheritdoc IERC165\\n   */\\n  function supportsInterface (bytes4 interfaceId) override public view returns (bool) {\\n    return ERC165Storage.layout().isSupportedInterface(interfaceId);\\n  }\\n}\\n\",\"keccak256\":\"0x2aa8ab9053a94582dfad1c0af0a538d833d07e7924832d2b78d2725751d24546\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/ERC165Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary ERC165Storage {\\n  struct Layout {\\n    // TODO: use EnumerableSet to allow post-diamond-cut auditing\\n    mapping (bytes4 => bool) supportedInterfaces;\\n  }\\n\\n  bytes32 internal constant STORAGE_SLOT = keccak256(\\n    'solidstate.contracts.storage.ERC165'\\n  );\\n\\n  function layout () internal pure returns (Layout storage l) {\\n    bytes32 slot = STORAGE_SLOT;\\n    assembly { l.slot := slot }\\n  }\\n\\n  function isSupportedInterface (\\n    Layout storage l,\\n    bytes4 interfaceId\\n  ) internal view returns (bool) {\\n    return l.supportedInterfaces[interfaceId];\\n  }\\n\\n  function setSupportedInterface (\\n    Layout storage l,\\n    bytes4 interfaceId,\\n    bool status\\n  ) internal {\\n    require(interfaceId != 0xffffffff, 'ERC165: invalid interface id');\\n    l.supportedInterfaces[interfaceId] = status;\\n  }\\n}\\n\",\"keccak256\":\"0x57b30797dfe88e6a6d967f04c0558de6f2d8f020d1bd556c627171182d3e876a\",\"license\":\"MIT\"},\"@solidstate/contracts/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC165 interface registration interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-165\\n */\\ninterface IERC165 {\\n  /**\\n   * @notice query whether contract has registered support for given interface\\n   * @param interfaceId interface id\\n   * @return bool whether interface is supported\\n   */\\n  function supportsInterface (\\n    bytes4 interfaceId\\n  ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5f02fe7fd9a29f831067e8ab4b4b003ae4f14b4922cf1ce09959d53bbd86dba7\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {ERC165} from '../../introspection/ERC165.sol';\\nimport {ERC1155Base} from './base/ERC1155Base.sol';\\n\\n/**\\n * @title SolidState ERC1155 implementation\\n */\\nabstract contract ERC1155 is ERC1155Base, ERC165 {}\\n\",\"keccak256\":\"0x3f0a1a9a6e66a52c98313b653fce3876fbb441f473ed4dca2df162a78444d898\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC1155Internal} from './IERC1155Internal.sol';\\nimport {IERC165} from '../../introspection/IERC165.sol';\\n\\n/**\\n * @notice ERC1155 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/1155\\n */\\ninterface IERC1155 is IERC1155Internal, IERC165 {\\n  /**\\n   * @notice query the balance of given token held by given address\\n   * @param account address to query\\n   * @param id token to query\\n   * @return token balance\\n   */\\n  function balanceOf (\\n    address account,\\n    uint256 id\\n  ) external view returns (uint256);\\n\\n  /**\\n   * @notice query the balances of given tokens held by given addresses\\n   * @param accounts addresss to query\\n   * @param ids tokens to query\\n   * @return token balances\\n   */\\n  function balanceOfBatch (\\n    address[] calldata accounts,\\n    uint256[] calldata ids\\n  ) external view returns (uint256[] memory);\\n\\n  /**\\n   * @notice query approval status of given operator with respect to given address\\n   * @param account address to query for approval granted\\n   * @param operator address to query for approval received\\n   * @return whether operator is approved to spend tokens held by account\\n   */\\n  function isApprovedForAll (\\n    address account,\\n    address operator\\n  ) external view returns (bool);\\n\\n  /**\\n   * @notice grant approval to or revoke approval from given operator to spend held tokens\\n   * @param operator address whose approval status to update\\n   * @param status whether operator should be considered approved\\n   */\\n  function setApprovalForAll (\\n    address operator,\\n    bool status\\n  ) external;\\n\\n  /**\\n   * @notice transfer tokens between given addresses, checking for ERC1155Receiver implementation if applicable\\n   * @param from sender of tokens\\n   * @param to receiver of tokens\\n   * @param id token ID\\n   * @param amount quantity of tokens to transfer\\n   * @param data data payload\\n   */\\n  function safeTransferFrom (\\n    address from,\\n    address to,\\n    uint256 id,\\n    uint256 amount,\\n    bytes calldata data\\n  ) external;\\n\\n  /**\\n   * @notice transfer batch of tokens between given addresses, checking for ERC1155Receiver implementation if applicable\\n   * @param from sender of tokens\\n   * @param to receiver of tokens\\n   * @param ids list of token IDs\\n   * @param amounts list of quantities of tokens to transfer\\n   * @param data data payload\\n   */\\n  function safeBatchTransferFrom (\\n    address from,\\n    address to,\\n    uint256[] calldata ids,\\n    uint256[] calldata amounts,\\n    bytes calldata data\\n  ) external;\\n}\\n\",\"keccak256\":\"0xd97d31e9117e9faab15fae36e021729e4efb19bdc3af0c731abd1b79e3ef633b\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/IERC1155Internal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC165} from '../../introspection/IERC165.sol';\\n\\n/**\\n * @notice Partial ERC1155 interface needed by internal functions\\n */\\ninterface IERC1155Internal {\\n  event TransferSingle (\\n    address indexed operator,\\n    address indexed from,\\n    address indexed to,\\n    uint256 id,\\n    uint256 value\\n  );\\n\\n  event TransferBatch (\\n    address indexed operator,\\n    address indexed from,\\n    address indexed to,\\n    uint256[] ids,\\n    uint256[] values\\n  );\\n\\n  event ApprovalForAll (\\n    address indexed account,\\n    address indexed operator,\\n    bool approved\\n  );\\n\\n  event URI (\\n    string value,\\n    uint256 indexed id\\n  );\\n}\\n\",\"keccak256\":\"0x0da086e86ca59401ceb4d96261e0a82a2aaf3d945d40b8b4e21469bdcad910e1\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC165} from '../../introspection/IERC165.sol';\\n\\n/**\\n * @title ERC1155 transfer receiver interface\\n */\\ninterface IERC1155Receiver is IERC165 {\\n  /**\\n   * @notice validate receipt of ERC1155 transfer\\n   * @param operator executor of transfer\\n   * @param from sender of tokens\\n   * @param id token ID received\\n   * @param value quantity of tokens received\\n   * @param data data payload\\n   * @return function's own selector if transfer is accepted\\n   */\\n  function onERC1155Received (\\n    address operator,\\n    address from,\\n    uint256 id,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bytes4);\\n\\n  /**\\n   * @notice validate receipt of ERC1155 batch transfer\\n   * @param operator executor of transfer\\n   * @param from sender of tokens\\n   * @param ids token IDs received\\n   * @param values quantities of tokens received\\n   * @param data data payload\\n   * @return function's own selector if transfer is accepted\\n   */\\n  function onERC1155BatchReceived (\\n    address operator,\\n    address from,\\n    uint256[] calldata ids,\\n    uint256[] calldata values,\\n    bytes calldata data\\n  ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xb7ce066e4f5be5bec5451cc613118cc75a56205bb1a339abb1c27321f2dc7010\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/base/ERC1155Base.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {IERC1155} from '../IERC1155.sol';\\nimport {IERC1155Receiver} from '../IERC1155Receiver.sol';\\nimport {ERC1155BaseInternal, ERC1155BaseStorage} from './ERC1155BaseInternal.sol';\\n\\n/**\\n * @title Base ERC1155 contract\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nabstract contract ERC1155Base is IERC1155, ERC1155BaseInternal {\\n  /**\\n   * @inheritdoc IERC1155\\n   */\\n  function balanceOf (\\n    address account,\\n    uint id\\n  ) virtual override public view returns (uint) {\\n    return _balanceOf(account, id);\\n  }\\n\\n  /**\\n   * @inheritdoc IERC1155\\n   */\\n  function balanceOfBatch (\\n    address[] memory accounts,\\n    uint[] memory ids\\n  ) virtual override public view returns (uint[] memory) {\\n    require(accounts.length == ids.length, 'ERC1155: accounts and ids length mismatch');\\n\\n    mapping (uint => mapping (address => uint)) storage balances = ERC1155BaseStorage.layout().balances;\\n\\n    uint[] memory batchBalances = new uint[](accounts.length);\\n\\n    unchecked {\\n      for (uint i; i < accounts.length; i++) {\\n        require(accounts[i] != address(0), 'ERC1155: batch balance query for the zero address');\\n        batchBalances[i] = balances[ids[i]][accounts[i]];\\n      }\\n    }\\n\\n    return batchBalances;\\n  }\\n\\n  /**\\n   * @inheritdoc IERC1155\\n   */\\n  function isApprovedForAll (\\n    address account,\\n    address operator\\n  ) virtual override public view returns (bool) {\\n    return ERC1155BaseStorage.layout().operatorApprovals[account][operator];\\n  }\\n\\n  /**\\n   * @inheritdoc IERC1155\\n   */\\n  function setApprovalForAll (\\n    address operator,\\n    bool status\\n  ) virtual override public {\\n    require(msg.sender != operator, 'ERC1155: setting approval status for self');\\n    ERC1155BaseStorage.layout().operatorApprovals[msg.sender][operator] = status;\\n    emit ApprovalForAll(msg.sender, operator, status);\\n  }\\n\\n  /**\\n   * @inheritdoc IERC1155\\n   */\\n  function safeTransferFrom (\\n    address from,\\n    address to,\\n    uint id,\\n    uint amount,\\n    bytes memory data\\n  ) virtual override public {\\n    require(from == msg.sender || isApprovedForAll(from, msg.sender), 'ERC1155: caller is not owner nor approved');\\n    _safeTransfer(msg.sender, from, to, id, amount, data);\\n  }\\n\\n  /**\\n   * @inheritdoc IERC1155\\n   */\\n  function safeBatchTransferFrom (\\n    address from,\\n    address to,\\n    uint[] memory ids,\\n    uint[] memory amounts,\\n    bytes memory data\\n  ) virtual override public {\\n    require(from == msg.sender || isApprovedForAll(from, msg.sender), 'ERC1155: caller is not owner nor approved');\\n    _safeTransferBatch(msg.sender, from, to, ids, amounts, data);\\n  }\\n}\\n\",\"keccak256\":\"0xa56953b95f1cab0b265e261946daa989bef81ebbb6d706604d42d0aaeae8b1cd\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/base/ERC1155BaseInternal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {AddressUtils} from '../../../utils/AddressUtils.sol';\\nimport {IERC1155Internal} from '../IERC1155Internal.sol';\\nimport {IERC1155Receiver} from '../IERC1155Receiver.sol';\\nimport {ERC1155BaseStorage} from './ERC1155BaseStorage.sol';\\n\\n/**\\n * @title Base ERC1155 internal functions\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nabstract contract ERC1155BaseInternal is IERC1155Internal {\\n  using AddressUtils for address;\\n\\n  /**\\n   * @notice query the balance of given token held by given address\\n   * @param account address to query\\n   * @param id token to query\\n   * @return token balance\\n   */\\n  function _balanceOf (\\n    address account,\\n    uint id\\n  ) virtual internal view returns (uint) {\\n    require(account != address(0), 'ERC1155: balance query for the zero address');\\n    return ERC1155BaseStorage.layout().balances[id][account];\\n  }\\n\\n  /**\\n   * @notice mint given quantity of tokens for given address\\n   * @dev ERC1155Receiver implementation is not checked\\n   * @param account beneficiary of minting\\n   * @param id token ID\\n   * @param amount quantity of tokens to mint\\n   * @param data data payload\\n   */\\n  function _mint (\\n    address account,\\n    uint id,\\n    uint amount,\\n    bytes memory data\\n  ) virtual internal {\\n    require(account != address(0), 'ERC1155: mint to the zero address');\\n\\n    _beforeTokenTransfer(msg.sender, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n    mapping (address => uint) storage balances = ERC1155BaseStorage.layout().balances[id];\\n    balances[account] += amount;\\n\\n    emit TransferSingle(msg.sender, address(0), account, id, amount);\\n  }\\n\\n  /**\\n   * @notice mint given quantity of tokens for given address\\n   * @param account beneficiary of minting\\n   * @param id token ID\\n   * @param amount quantity of tokens to mint\\n   * @param data data payload\\n   */\\n  function _safeMint (\\n    address account,\\n    uint id,\\n    uint amount,\\n    bytes memory data\\n  ) virtual internal {\\n    _doSafeTransferAcceptanceCheck(msg.sender, address(0), account, id, amount, data);\\n    _mint(account, id, amount, data);\\n  }\\n\\n  /**\\n   * @notice mint batch of tokens for given address\\n   * @dev ERC1155Receiver implementation is not checked\\n   * @param account beneficiary of minting\\n   * @param ids list of token IDs\\n   * @param amounts list of quantities of tokens to mint\\n   * @param data data payload\\n   */\\n  function _mintBatch (\\n    address account,\\n    uint[] memory ids,\\n    uint[] memory amounts,\\n    bytes memory data\\n  ) virtual internal {\\n    require(account != address(0), 'ERC1155: mint to the zero address');\\n    require(ids.length == amounts.length, 'ERC1155: ids and amounts length mismatch');\\n\\n    _beforeTokenTransfer(msg.sender, address(0), account, ids, amounts, data);\\n\\n    mapping (uint => mapping (address => uint)) storage balances = ERC1155BaseStorage.layout().balances;\\n\\n    for (uint i; i < ids.length; i++) {\\n      balances[ids[i]][account] += amounts[i];\\n    }\\n\\n    emit TransferBatch(msg.sender, address(0), account, ids, amounts);\\n  }\\n\\n  /**\\n   * @notice mint batch of tokens for given address\\n   * @param account beneficiary of minting\\n   * @param ids list of token IDs\\n   * @param amounts list of quantities of tokens to mint\\n   * @param data data payload\\n   */\\n  function _safeMintBatch (\\n    address account,\\n    uint[] memory ids,\\n    uint[] memory amounts,\\n    bytes memory data\\n  ) virtual internal {\\n    _doSafeBatchTransferAcceptanceCheck(msg.sender, address(0), account, ids, amounts, data);\\n    _mintBatch(account, ids, amounts, data);\\n  }\\n\\n  /**\\n   * @notice burn given quantity of tokens held by given address\\n   * @param account holder of tokens to burn\\n   * @param id token ID\\n   * @param amount quantity of tokens to burn\\n   */\\n  function _burn (\\n    address account,\\n    uint id,\\n    uint amount\\n  ) virtual internal {\\n    require(account != address(0), 'ERC1155: burn from the zero address');\\n\\n    _beforeTokenTransfer(msg.sender, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), '');\\n\\n    mapping (address => uint) storage balances = ERC1155BaseStorage.layout().balances[id];\\n\\n    unchecked {\\n      require(balances[account] >= amount, 'ERC1155: burn amount exceeds balances');\\n      balances[account] -= amount;\\n    }\\n\\n    emit TransferSingle(msg.sender, account, address(0), id, amount);\\n  }\\n\\n  /**\\n   * @notice burn given batch of tokens held by given address\\n   * @param account holder of tokens to burn\\n   * @param ids token IDs\\n   * @param amounts quantities of tokens to burn\\n   */\\n  function _burnBatch (\\n    address account,\\n    uint[] memory ids,\\n    uint[] memory amounts\\n  ) virtual internal {\\n    require(account != address(0), 'ERC1155: burn from the zero address');\\n    require(ids.length == amounts.length, 'ERC1155: ids and amounts length mismatch');\\n\\n    _beforeTokenTransfer(msg.sender, account, address(0), ids, amounts, '');\\n\\n    mapping (uint => mapping (address => uint)) storage balances = ERC1155BaseStorage.layout().balances;\\n\\n    unchecked {\\n      for (uint i; i < ids.length; i++) {\\n        uint id = ids[i];\\n        require(balances[id][account] >= amounts[i], 'ERC1155: burn amount exceeds balance');\\n        balances[id][account] -= amounts[i];\\n      }\\n    }\\n\\n    emit TransferBatch(msg.sender, account, address(0), ids, amounts);\\n  }\\n\\n  /**\\n   * @notice transfer tokens between given addresses\\n   * @dev ERC1155Receiver implementation is not checked\\n   * @param operator executor of transfer\\n   * @param sender sender of tokens\\n   * @param recipient receiver of tokens\\n   * @param id token ID\\n   * @param amount quantity of tokens to transfer\\n   * @param data data payload\\n   */\\n  function _transfer (\\n    address operator,\\n    address sender,\\n    address recipient,\\n    uint id,\\n    uint amount,\\n    bytes memory data\\n  ) virtual internal {\\n    require(recipient != address(0), 'ERC1155: transfer to the zero address');\\n\\n    _beforeTokenTransfer(operator, sender, recipient, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n    mapping (uint => mapping (address => uint)) storage balances = ERC1155BaseStorage.layout().balances;\\n\\n    unchecked {\\n      uint256 senderBalance = balances[id][sender];\\n      require(senderBalance >= amount, 'ERC1155: insufficient balances for transfer');\\n      balances[id][sender] = senderBalance - amount;\\n    }\\n\\n    balances[id][recipient] += amount;\\n\\n    emit TransferSingle(operator, sender, recipient, id, amount);\\n  }\\n\\n  /**\\n   * @notice transfer tokens between given addresses\\n   * @param operator executor of transfer\\n   * @param sender sender of tokens\\n   * @param recipient receiver of tokens\\n   * @param id token ID\\n   * @param amount quantity of tokens to transfer\\n   * @param data data payload\\n   */\\n  function _safeTransfer (\\n    address operator,\\n    address sender,\\n    address recipient,\\n    uint id,\\n    uint amount,\\n    bytes memory data\\n  ) virtual internal {\\n    _doSafeTransferAcceptanceCheck(operator, sender, recipient, id, amount, data);\\n    _transfer(operator, sender, recipient, id, amount, data);\\n  }\\n\\n  /**\\n   * @notice transfer batch of tokens between given addresses\\n   * @dev ERC1155Receiver implementation is not checked\\n   * @param operator executor of transfer\\n   * @param sender sender of tokens\\n   * @param recipient receiver of tokens\\n   * @param ids token IDs\\n   * @param amounts quantities of tokens to transfer\\n   * @param data data payload\\n   */\\n  function _transferBatch (\\n    address operator,\\n    address sender,\\n    address recipient,\\n    uint[] memory ids,\\n    uint[] memory amounts,\\n    bytes memory data\\n  ) virtual internal {\\n    require(recipient != address(0), 'ERC1155: transfer to the zero address');\\n    require(ids.length == amounts.length, 'ERC1155: ids and amounts length mismatch');\\n\\n    _beforeTokenTransfer(operator, sender, recipient, ids, amounts, data);\\n\\n    mapping (uint => mapping (address => uint)) storage balances = ERC1155BaseStorage.layout().balances;\\n\\n    for (uint i; i < ids.length; i++) {\\n      uint token = ids[i];\\n      uint amount = amounts[i];\\n\\n      unchecked {\\n        uint256 senderBalance = balances[token][sender];\\n        require(senderBalance >= amount, 'ERC1155: insufficient balances for transfer');\\n        balances[token][sender] = senderBalance - amount;\\n      }\\n\\n      balances[token][recipient] += amount;\\n    }\\n\\n    emit TransferBatch(operator, sender, recipient, ids, amounts);\\n  }\\n\\n  /**\\n   * @notice transfer batch of tokens between given addresses\\n   * @param operator executor of transfer\\n   * @param sender sender of tokens\\n   * @param recipient receiver of tokens\\n   * @param ids token IDs\\n   * @param amounts quantities of tokens to transfer\\n   * @param data data payload\\n   */\\n  function _safeTransferBatch (\\n    address operator,\\n    address sender,\\n    address recipient,\\n    uint[] memory ids,\\n    uint[] memory amounts,\\n    bytes memory data\\n  ) virtual internal {\\n    _doSafeBatchTransferAcceptanceCheck(operator, sender, recipient, ids, amounts, data);\\n    _transferBatch(operator, sender, recipient, ids, amounts, data);\\n  }\\n\\n  /**\\n   * @notice wrap given element in array of length 1\\n   * @param element element to wrap\\n   * @return singleton array\\n   */\\n  function _asSingletonArray (\\n    uint element\\n  ) private pure returns (uint[] memory) {\\n    uint[] memory array = new uint[](1);\\n    array[0] = element;\\n    return array;\\n  }\\n\\n  /**\\n   * @notice revert if applicable transfer recipient is not valid ERC1155Receiver\\n   * @param operator executor of transfer\\n   * @param from sender of tokens\\n   * @param to receiver of tokens\\n   * @param id token ID\\n   * @param amount quantity of tokens to transfer\\n   * @param data data payload\\n   */\\n  function _doSafeTransferAcceptanceCheck (\\n    address operator,\\n    address from,\\n    address to,\\n    uint id,\\n    uint amount,\\n    bytes memory data\\n  ) private {\\n    if (to.isContract()) {\\n      try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n        require(\\n          response == IERC1155Receiver.onERC1155Received.selector,\\n          'ERC1155: ERC1155Receiver rejected tokens'\\n        );\\n      } catch Error(string memory reason) {\\n        revert(reason);\\n      } catch {\\n        revert('ERC1155: transfer to non ERC1155Receiver implementer');\\n      }\\n    }\\n  }\\n\\n  /**\\n  * @notice revert if applicable transfer recipient is not valid ERC1155Receiver\\n   * @param operator executor of transfer\\n   * @param from sender of tokens\\n   * @param to receiver of tokens\\n   * @param ids token IDs\\n   * @param amounts quantities of tokens to transfer\\n   * @param data data payload\\n   */\\n  function _doSafeBatchTransferAcceptanceCheck (\\n    address operator,\\n    address from,\\n    address to,\\n    uint[] memory ids,\\n    uint[] memory amounts,\\n    bytes memory data\\n  ) private {\\n    if (to.isContract()) {\\n      try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (bytes4 response) {\\n        require(\\n          response == IERC1155Receiver.onERC1155BatchReceived.selector,\\n          'ERC1155: ERC1155Receiver rejected tokens'\\n        );\\n      } catch Error(string memory reason) {\\n        revert(reason);\\n      } catch {\\n        revert('ERC1155: transfer to non ERC1155Receiver implementer');\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @notice ERC1155 hook, called before all transfers including mint and burn\\n   * @dev function should be overridden and new implementation must call super\\n   * @dev called for both single and batch transfers\\n   * @param operator executor of transfer\\n   * @param from sender of tokens\\n   * @param to receiver of tokens\\n   * @param ids token IDs\\n   * @param amounts quantities of tokens to transfer\\n   * @param data data payload\\n   */\\n  function _beforeTokenTransfer (\\n    address operator,\\n    address from,\\n    address to,\\n    uint[] memory ids,\\n    uint[] memory amounts,\\n    bytes memory data\\n  ) virtual internal {}\\n}\\n\",\"keccak256\":\"0xf0fc32f5e2aa90bcb6f1b226a5827c8311c3693f7ae2f4827b9e4830c815bfe1\",\"license\":\"MIT\"},\"@solidstate/contracts/token/ERC1155/base/ERC1155BaseStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary ERC1155BaseStorage {\\n  struct Layout {\\n    mapping (uint => mapping (address => uint)) balances;\\n    mapping (address => mapping (address => bool)) operatorApprovals;\\n  }\\n\\n  bytes32 internal constant STORAGE_SLOT = keccak256(\\n    'solidstate.contracts.storage.ERC1155Base'\\n  );\\n\\n  function layout () internal pure returns (Layout storage l) {\\n    bytes32 slot = STORAGE_SLOT;\\n    assembly { l.slot := slot }\\n  }\\n}\\n\",\"keccak256\":\"0x5ff4bf10621b611225bfd1cb2e2b6e2c4fffd404cffcd0246d666f944c245b61\",\"license\":\"MIT\"},\"@solidstate/contracts/utils/AddressUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary AddressUtils {\\n  function toString (address account) internal pure returns (string memory) {\\n    bytes32 value = bytes32(uint256(uint160(account)));\\n    bytes memory alphabet = '0123456789abcdef';\\n    bytes memory chars = new bytes(42);\\n\\n    chars[0] = '0';\\n    chars[1] = 'x';\\n\\n    for (uint256 i = 0; i < 20; i++) {\\n      chars[2 + i * 2] = alphabet[uint8(value[i + 12] >> 4)];\\n      chars[3 + i * 2] = alphabet[uint8(value[i + 12] & 0x0f)];\\n    }\\n\\n    return string(chars);\\n  }\\n\\n  function isContract (address account) internal view returns (bool) {\\n    uint size;\\n    assembly { size := extcodesize(account) }\\n    return size > 0;\\n  }\\n\\n  function sendValue (address payable account, uint amount) internal {\\n    (bool success, ) = account.call{ value: amount }('');\\n    require(success, 'AddressUtils: failed to send value');\\n  }\\n\\n  function functionCall (address target, bytes memory data) internal returns (bytes memory) {\\n    return functionCall(target, data, 'AddressUtils: failed low-level call');\\n  }\\n\\n  function functionCall (address target, bytes memory data, string memory error) internal returns (bytes memory) {\\n    return _functionCallWithValue(target, data, 0, error);\\n  }\\n\\n  function functionCallWithValue (address target, bytes memory data, uint value) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, value, 'AddressUtils: failed low-level call with value');\\n  }\\n\\n  function functionCallWithValue (address target, bytes memory data, uint value, string memory error) internal returns (bytes memory) {\\n    require(address(this).balance >= value, 'AddressUtils: insufficient balance for call');\\n    return _functionCallWithValue(target, data, value, error);\\n  }\\n\\n  function _functionCallWithValue (address target, bytes memory data, uint value, string memory error) private returns (bytes memory) {\\n    require(isContract(target), 'AddressUtils: function call to non-contract');\\n\\n    (bool success, bytes memory returnData) = target.call{ value: value }(data);\\n\\n    if (success) {\\n      return returnData;\\n    } else if (returnData.length > 0) {\\n      assembly {\\n        let returnData_size := mload(returnData)\\n        revert(add(32, returnData), returnData_size)\\n      }\\n    } else {\\n      revert(error);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x49c456abdfeec4082581e81731233d2a686c85d75c6bc48c2e685a62c03adb9f\",\"license\":\"MIT\"},\"contracts/BaseRelayRecipient/BaseRelayRecipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\nimport '@openzeppelin/contracts/utils/Context.sol';\\nimport './BaseRelayRecipientStorage.sol';\\n\\n/**\\n * A base contract to be inherited by any contract that want to receive relayed transactions\\n * A subclass must use \\\"_msgSender()\\\" instead of \\\"msg.sender\\\"\\n */\\n\\nabstract contract BaseRelayRecipient is Context {\\n  /*\\n   * require a function to be called through GSN only\\n   */\\n  //  modifier trustedForwarderOnly() {\\n  //    require(msg.sender == address(s.trustedForwarder), \\\"Function can only be called through the trusted Forwarder\\\");\\n  //    _;\\n  //  }\\n\\n  function isTrustedForwarder(address forwarder) public view returns (bool) {\\n    return forwarder == BaseRelayRecipientStorage.layout().trustedForwarder;\\n  }\\n\\n  /**\\n   * return the sender of this call.\\n   * if the call came through our trusted forwarder, return the original sender.\\n   * otherwise, return `msg.sender`.\\n   * should be used in the contract anywhere instead of msg.sender\\n   */\\n  function _msgSender() internal view virtual override returns (address ret) {\\n    if (msg.data.length >= 24 && isTrustedForwarder(msg.sender)) {\\n      // At this point we know that the sender is a trusted forwarder,\\n      // so we trust that the last bytes of msg.data are the verified sender address.\\n      // extract sender address from the end of msg.data\\n      assembly {\\n        ret := shr(96, calldataload(sub(calldatasize(), 20)))\\n      }\\n    } else {\\n      return msg.sender;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x7027136386ad3f40df6c165f5eefbe067562bdf0b15342548c49c20fd0eac959\",\"license\":\"MIT\"},\"contracts/BaseRelayRecipient/BaseRelayRecipientStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\nlibrary BaseRelayRecipientStorage {\\n  bytes32 internal constant STORAGE_SLOT =\\n    keccak256('diamond.storage.BaseRelayRecipientStorage');\\n\\n  struct Layout {\\n    /*\\n     * Forwarder singleton we accept calls from\\n     */\\n    address trustedForwarder;\\n  }\\n\\n  function layout() internal pure returns (Layout storage layout) {\\n    bytes32 slot = STORAGE_SLOT;\\n    assembly {\\n      layout.slot := slot\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x381dc70290cbe2527df495c9bf6c1356145024cd533e80136f3f95acd59981e1\",\"license\":\"MIT\"},\"contracts/CyberDestinationFactoryBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\n//\\nimport '@solidstate/contracts/token/ERC1155/IERC1155.sol';\\nimport './ERC1155URI/ERC1155URI.sol';\\nimport './BaseRelayRecipient/BaseRelayRecipient.sol';\\n\\nimport '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\\nimport './Diamond/LibDiamond.sol';\\nimport './BaseRelayRecipient/BaseRelayRecipientStorage.sol';\\nimport './libraries/LibAppStorage.sol';\\n\\ncontract CyberDestinationFactoryBase is BaseRelayRecipient, ERC1155URI {\\n  using ECDSA for bytes32;\\n  using Counters for Counters.Counter;\\n\\n  event Minted(\\n    address indexed account,\\n    uint256 indexed tokenId,\\n    uint256 indexed amount\\n  );\\n\\n  function initialize(\\n    string memory _uri,\\n    address _manager,\\n    address _trustedForwarder,\\n    address _opensea,\\n    address _oncyber\\n  ) public virtual {\\n    require(LibDiamond.diamondStorage().contractOwner == msg.sender, 'NO');\\n\\n    BaseRelayRecipientStorage.layout().trustedForwarder = _trustedForwarder;\\n    LibDiamond.diamondStorage().supportedInterfaces[\\n      type(IERC1155).interfaceId\\n    ] = true;\\n    setURI(_uri);\\n    LibAppStorage.layout().manager = _manager;\\n    LibAppStorage.layout().opensea = _opensea;\\n    LibAppStorage.layout().oncyber = _oncyber;\\n  }\\n\\n  function totalSupply() public view returns (uint256) {\\n    return LibAppStorage.layout().totalSupply.current();\\n  }\\n\\n  function manager() public view returns (address) {\\n    return LibAppStorage.layout().manager;\\n  }\\n\\n  function oncyber() public view returns (address) {\\n    return LibAppStorage.layout().oncyber;\\n  }\\n\\n  function minterNonce(address _minter) public view returns (uint256) {\\n    return LibAppStorage.layout().minterNonce[_minter].current();\\n  }\\n}\\n\",\"keccak256\":\"0xcee6828468f14e3ae0a5e4e0f879932df3550d6c8c1804dd656c4e215a75b528\",\"license\":\"MIT\"},\"contracts/DestinationUtility/CyberDestinationUtilityFactoryFacet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.7;\\n\\n//\\nimport '@openzeppelin/contracts/utils/cryptography/ECDSA.sol';\\nimport '../CyberDestinationFactoryBase.sol';\\nimport '../libraries/LibAppStorage.sol';\\nimport './LibUtilityStorage.sol';\\n\\ncontract CyberDestinationUtilityFactoryFacet is CyberDestinationFactoryBase {\\n  using ECDSA for bytes32;\\n  using Counters for Counters.Counter;\\n\\n  event DestinationMinted(address indexed account, uint256 indexed tokenId);\\n\\n  function getDrop(uint256 _tokenId)\\n    public\\n    view\\n    returns (LibUtilityStorage.Drop memory)\\n  {\\n    LibUtilityStorage.Drop memory drop = LibUtilityStorage.layout().drops[\\n      _tokenId\\n    ];\\n    require(drop.timeStart != 0, 'DNE');\\n\\n    return drop;\\n  }\\n\\n  function mint(\\n    string memory _uri,\\n    uint256 _timeStart,\\n    uint256 _timeEnd,\\n    uint256 _price,\\n    uint256 _amountCap,\\n    uint256 _shareCyber,\\n    bytes memory _signature\\n  ) public returns (uint256 _tokenId) {\\n    address sender = _msgSender();\\n    uint256 nonce = minterNonce(sender);\\n    require(_shareCyber <= 100, 'ISO');\\n    require(_timeStart < _timeEnd, 'IT');\\n\\n    bytes memory _message = abi.encodePacked(\\n      _uri,\\n      _timeStart,\\n      _timeEnd,\\n      _price,\\n      _amountCap,\\n      _shareCyber,\\n      nonce,\\n      sender\\n    );\\n    address recoveredAddress = keccak256(_message)\\n      .toEthSignedMessageHash()\\n      .recover(_signature);\\n    require(recoveredAddress == LibAppStorage.layout().manager, 'NM');\\n\\n    // Mint token\\n    _tokenId = LibAppStorage.layout().totalSupply.current();\\n    setTokenURI(_tokenId, _uri);\\n    LibAppStorage.layout().totalSupply.increment();\\n    LibAppStorage.layout().minterNonce[sender].increment();\\n    LibUtilityStorage.Drop memory drop = LibUtilityStorage.Drop({\\n      timeStart: _timeStart,\\n      timeEnd: _timeEnd,\\n      amountCap: _amountCap,\\n      shareCyber: _shareCyber,\\n      creator: payable(sender),\\n      price: _price,\\n      minted: 0\\n    });\\n    LibUtilityStorage.layout().drops[_tokenId] = drop;\\n\\n    emit DestinationMinted(sender, _tokenId);\\n\\n    return _tokenId;\\n  }\\n\\n  function mintEdition(uint256 _tokenId) public payable returns (bool) {\\n    address sender = _msgSender();\\n    LibUtilityStorage.Drop storage drop = LibUtilityStorage.layout().drops[\\n      _tokenId\\n    ];\\n\\n    require(\\n      block.timestamp >= drop.timeStart && block.timestamp <= drop.timeEnd,\\n      'OOT'\\n    );\\n\\n    require(msg.value == drop.price, 'IA');\\n\\n    if (drop.amountCap != 0) {\\n      require(drop.minted < drop.amountCap, 'CR');\\n    }\\n\\n    _safeMint(sender, _tokenId, 1, '');\\n    drop.minted += 1;\\n    emit Minted(sender, _tokenId, 1);\\n\\n    uint256 amountOnCyber = (msg.value * drop.shareCyber) / 100;\\n    uint256 amountCreator = msg.value - amountOnCyber;\\n\\n    drop.creator.transfer(amountCreator);\\n    payable(LibAppStorage.layout().oncyber).transfer(amountOnCyber);\\n    return true;\\n  }\\n}\\n\",\"keccak256\":\"0xb85705ba92cf57b7283a9bd178c50fd9023611189529dabbd4ac966e83850304\",\"license\":\"MIT\"},\"contracts/DestinationUtility/LibUtilityStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\n//\\n\\nlibrary LibUtilityStorage {\\n  bytes32 public constant STORAGE_SLOT = keccak256('utility.app.storage');\\n  struct Drop {\\n    uint256 timeStart;\\n    uint256 timeEnd;\\n    uint256 shareCyber;\\n    uint256 price;\\n    uint256 amountCap;\\n    uint256 minted;\\n    address payable creator;\\n  }\\n\\n  struct Layout {\\n    mapping(uint256 => Drop) drops;\\n  }\\n\\n  function layout() internal pure returns (Layout storage layout) {\\n    bytes32 slot = STORAGE_SLOT;\\n    assembly {\\n      layout.slot := slot\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x9a54262c9bfba6fef2a4ab573ee85ac40fb0de7f842e059734f543ac23096a5d\",\"license\":\"MIT\"},\"contracts/Diamond/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\nlibrary LibDiamond {\\n  bytes32 public constant DIAMOND_STORAGE_POSITION =\\n    keccak256('diamond.standard.diamond.storage');\\n\\n  struct FacetAddressAndPosition {\\n    address facetAddress;\\n    uint16 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n  }\\n\\n  struct FacetFunctionSelectors {\\n    bytes4[] functionSelectors;\\n    uint16 facetAddressPosition; // position of facetAddress in facetAddresses array\\n  }\\n\\n  struct DiamondStorage {\\n    // maps function selector to the facet address and\\n    // the position of the selector in the facetFunctionSelectors.selectors array\\n    mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n    // maps facet addresses to function selectors\\n    mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n    // facet addresses\\n    address[] facetAddresses;\\n    // Used to query if a contract implements an interface.\\n    // Used to implement ERC-165.\\n    mapping(bytes4 => bool) supportedInterfaces;\\n    // owner of the contract\\n    address contractOwner;\\n  }\\n\\n  function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n    bytes32 position = DIAMOND_STORAGE_POSITION;\\n    assembly {\\n      ds.slot := position\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x781cc8c5b1178471e307e8457f38b5b07926573a0c97c2debf4e567bd99e8981\",\"license\":\"MIT\"},\"contracts/ERC1155URI/ERC1155URI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\nimport '@solidstate/contracts/token/ERC1155/ERC1155.sol';\\nimport './ERC1155URIStorage.sol';\\n\\nabstract contract ERC1155URI is ERC1155 {\\n  function uri(uint256 _tokenId) public view virtual returns (string memory) {\\n    string memory tokenURI = ERC1155URIStorage.layout().tokenURIs[_tokenId];\\n    require(bytes(tokenURI).length != 0, 'ERC1155URI: tokenId not exist');\\n    return string(abi.encodePacked(ERC1155URIStorage.layout().uri, tokenURI));\\n  }\\n\\n  function setURI(string memory newUri) internal virtual {\\n    ERC1155URIStorage.layout().uri = newUri;\\n  }\\n\\n  function setTokenURI(uint256 tokenId, string memory _tokenURI)\\n    internal\\n    virtual\\n  {\\n    ERC1155URIStorage.layout().tokenURIs[tokenId] = _tokenURI;\\n  }\\n}\\n\",\"keccak256\":\"0x194c68e0d43aaea92a8c7532938ac6edb187362c6470712c22eda93e06b1db1b\",\"license\":\"MIT\"},\"contracts/ERC1155URI/ERC1155URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\nlibrary ERC1155URIStorage {\\n  bytes32 internal constant STORAGESLOT =\\n    keccak256('diamond.storage.ERC1155URI');\\n\\n  struct Layout {\\n    mapping(uint256 => string) tokenURIs;\\n    string uri;\\n  }\\n\\n  function layout() internal pure returns (Layout storage layout) {\\n    bytes32 slot = STORAGESLOT;\\n    assembly {\\n      layout.slot := slot\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xee43e0931dd075804623e8d0a677fe1e1baa58e165d3f74f27703d6280960a71\",\"license\":\"MIT\"},\"contracts/libraries/LibAppStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\nimport '@openzeppelin/contracts/utils/Counters.sol';\\n\\n//\\n\\nlibrary LibAppStorage {\\n  bytes32 public constant STORAGE_SLOT = keccak256('app.storage');\\n\\n  struct Layout {\\n    address manager;\\n    address opensea;\\n    Counters.Counter totalSupply;\\n    mapping(address => Counters.Counter) minterNonce;\\n    address oncyber;\\n  }\\n\\n  function layout() internal pure returns (Layout storage layout) {\\n    bytes32 slot = STORAGE_SLOT;\\n    assembly {\\n      layout.slot := slot\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x98da8b9c3132f35030fc4c79eafc54923cdf8e131c4143375a1a65be4706ac53\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614a2d806100206000396000f3fe6080604052600436106100fd5760003560e01c8063481c6a7511610095578063a22cb46511610064578063a22cb46514610385578063bc01188e146103ae578063dcf2cad4146103d9578063e985e9c514610416578063f242432a14610453576100fd565b8063481c6a75146102a35780634e1273f4146102ce578063572b6c051461030b5780636787d44914610348576100fd565b80630e89341c116100d15780630e89341c146101d557806318160ddd146102125780631b0239471461023d5780632eb2c2d61461027a576100fd565b8062fdd58e1461010257806301ffc9a71461013f57806305322b741461017c5780630b885ac3146101ac575b600080fd5b34801561010e57600080fd5b5061012960048036038101906101249190612e70565b61047c565b6040516101369190613d0a565b60405180910390f35b34801561014b57600080fd5b5061016660048036038101906101619190612f28565b610490565b604051610173919061396d565b60405180910390f35b610196600480360381019061019191906130f3565b6104b3565b6040516101a3919061396d565b60405180910390f35b3480156101b857600080fd5b506101d360048036038101906101ce9190612f82565b61076c565b005b3480156101e157600080fd5b506101fc60048036038101906101f791906130f3565b6109d0565b60405161020991906139cd565b60405180910390f35b34801561021e57600080fd5b50610227610af4565b6040516102349190613d0a565b60405180910390f35b34801561024957600080fd5b50610264600480360381019061025f9190612c5d565b610b0e565b6040516102719190613d0a565b60405180910390f35b34801561028657600080fd5b506102a1600480360381019061029c9190612cca565b610b67565b005b3480156102af57600080fd5b506102b8610bfb565b6040516102c59190613837565b60405180910390f35b3480156102da57600080fd5b506102f560048036038101906102f09190612eb0565b610c2e565b6040516103029190613914565b60405180910390f35b34801561031757600080fd5b50610332600480360381019061032d9190612c5d565b610e23565b60405161033f919061396d565b60405180910390f35b34801561035457600080fd5b5061036f600480360381019061036a91906130f3565b610e86565b60405161037c9190613cef565b60405180910390f35b34801561039157600080fd5b506103ac60048036038101906103a79190612e30565b610f9c565b005b3480156103ba57600080fd5b506103c3611111565b6040516103d09190613837565b60405180910390f35b3480156103e557600080fd5b5061040060048036038101906103fb9190613019565b611144565b60405161040d9190613d0a565b60405180910390f35b34801561042257600080fd5b5061043d60048036038101906104389190612c8a565b61149c565b60405161044a919061396d565b60405180910390f35b34801561045f57600080fd5b5061047a60048036038101906104759190612d99565b611539565b005b600061048883836115cd565b905092915050565b60006104ac8261049e6116a0565b6116cd90919063ffffffff16565b9050919050565b6000806104be611738565b905060006104ca611774565b60000160008581526020019081526020016000209050806000015442101580156104f8575080600101544211155b610537576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052e90613b4f565b60405180910390fd5b8060030154341461057d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057490613bef565b60405180910390fd5b60008160040154146105d45780600401548160050154106105d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ca90613b8f565b60405180910390fd5b5b6105f082856001604051806020016040528060008152506117a1565b60018160050160008282546106059190613ebe565b925050819055506001848373ffffffffffffffffffffffffffffffffffffffff167f25b428dfde728ccfaddad7e29e4ac23c24ed7fd1a6e3e3f91894a9a073f5dfff60405160405180910390a4600060648260020154346106669190613f45565b6106709190613f14565b9050600081346106809190613f9f565b90508260060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156106ec573d6000803e3d6000fd5b506106f56117c2565b60040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f1935050505015801561075e573d6000803e3d6000fd5b506001945050505050919050565b3373ffffffffffffffffffffffffffffffffffffffff1661078b6117ef565b60040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610805576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107fc90613a4f565b60405180910390fd5b8261080e61181c565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060016108596117ef565b60030160007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff0219169083151502179055506108eb85611849565b836108f46117c2565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508161093e6117c2565b60010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806109886117c2565b60040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505050565b606060006109dc61186c565b600001600084815260200190815260200160002080546109fb906140b2565b80601f0160208091040260200160405190810160405280929190818152602001828054610a27906140b2565b8015610a745780601f10610a4957610100808354040283529160200191610a74565b820191906000526020600020905b815481529060010190602001808311610a5757829003601f168201915b50505050509050600081511415610ac0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab790613c2f565b60405180910390fd5b610ac861186c565b60010181604051602001610add9291906137ed565b604051602081830303815290604052915050919050565b6000610b09610b016117c2565b600201611899565b905090565b6000610b60610b1b6117c2565b60030160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611899565b9050919050565b3373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480610ba75750610ba6853361149c565b5b610be6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bdd90613b0f565b60405180910390fd5b610bf43386868686866118a7565b5050505050565b6000610c056117c2565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60608151835114610c74576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c6b90613c6f565b60405180910390fd5b6000610c7e6118cb565b60000190506000845167ffffffffffffffff811115610ca057610c9f614281565b5b604051908082528060200260200182016040528015610cce5781602001602082028036833780820191505090505b50905060005b8551811015610e1757600073ffffffffffffffffffffffffffffffffffffffff16868281518110610d0857610d07614252565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff161415610d67576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d5e90613acf565b60405180910390fd5b826000868381518110610d7d57610d7c614252565b5b602002602001015181526020019081526020016000206000878381518110610da857610da7614252565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054828281518110610dfe57610dfd614252565b5b6020026020010181815250508080600101915050610cd4565b50809250505092915050565b6000610e2d61181c565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b610e8e6128e2565b6000610e98611774565b60000160008481526020019081526020016000206040518060e00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050600081600001511415610f93576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f8a90613ccf565b60405180910390fd5b80915050919050565b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561100b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100290613c4f565b60405180910390fd5b806110146118cb565b60010160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611105919061396d565b60405180910390a35050565b600061111b6117c2565b60040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008061114f611738565b9050600061115c82610b0e565b905060648511156111a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119990613baf565b60405180910390fd5b8789106111e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111db90613c0f565b60405180910390fd5b60008a8a8a8a8a8a878960405160200161120598979695949392919061375f565b6040516020818303038152906040529050600061123a8661122c84805190602001206118f8565b61192890919063ffffffff16565b90506112446117c2565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146112d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112cc90613a8f565b60405180910390fd5b6112e86112e06117c2565b600201611899565b94506112f4858d61194f565b6113076112ff6117c2565b600201611984565b6113576113126117c2565b60030160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611984565b60006040518060e001604052808d81526020018c81526020018981526020018b81526020018a8152602001600081526020018673ffffffffffffffffffffffffffffffffffffffff168152509050806113ae611774565b6000016000888152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c08201518160060160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550905050858573ffffffffffffffffffffffffffffffffffffffff167f889de1a576ddf6ed9570e1a2354ffe87302c20bd8af57b5bd4e3bbc84240e7f660405160405180910390a35050505050979650505050505050565b60006114a66118cb565b60010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b3373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614806115795750611578853361149c565b5b6115b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115af90613b0f565b60405180910390fd5b6115c633868686868661199a565b5050505050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561163e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161163590613aaf565b60405180910390fd5b6116466118cb565b600001600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000807f326d0c59a7612f6a9919e2a8ee333c80ba689d8ba2634de89c85cbb04832e70590508091505090565b6000826000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff16905092915050565b60006018600036905010158015611754575061175333610e23565b5b1561176857601436033560601c9050611770565b339050611771565b5b90565b6000807f75bce7b27cc8f04e7a4282e725010cbd105f602d082c4b02f7d958135d62562e90508091505090565b6117b0336000868686866119be565b6117bc84848484611ba5565b50505050565b6000807f47dc25f21c7793543edaeb1ef19d41726ddbada967ae9a7980b9bd8a45228a5e90508091505090565b6000807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90508091505090565b6000807fa5e014e253d3b66bd348c3cdd05f38b9805fff0b6471d004b58c6ada26cae99390508091505090565b8061185261186c565b6001019080519060200190611868929190612935565b5050565b6000807fb3408a5d8f30170919d3996b6cc182726500ad24733d17ace2f621485f6e7c8390508091505090565b600081600001549050919050565b6118b5868686868686611d2f565b6118c3868686868686611f16565b505050505050565b6000807f1799cf914cb0cb442ca7c7ac709ee40d0cb89e87351dc08d517fbda27d50c68b90508091505090565b60008160405160200161190b9190613811565b604051602081830303815290604052805190602001209050919050565b60008060006119378585612222565b91509150611944816122a5565b819250505092915050565b8061195861186c565b6000016000848152602001908152602001600020908051906020019061197f929190612935565b505050565b6001816000016000828254019250508190555050565b6119a88686868686866119be565b6119b686868686868661247a565b505050505050565b6119dd8473ffffffffffffffffffffffffffffffffffffffff166126f2565b15611b9d578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b8152600401611a239594939291906138ba565b602060405180830381600087803b158015611a3d57600080fd5b505af1925050508015611a6e57506040513d601f19601f82011682018060405250810190611a6b9190612f55565b60015b611b1457611a7a6142b0565b806308c379a01415611ad75750611a8f614905565b80611a9a5750611ad9565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ace91906139cd565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b0b90613a0f565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614611b9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b9290613a2f565b60405180910390fd5b505b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415611c15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c0c90613caf565b60405180910390fd5b611c3433600086611c2587612705565b611c2e87612705565b8661277f565b6000611c3e6118cb565b60000160008581526020019081526020016000209050828160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611ca29190613ebe565b925050819055508473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628787604051611d20929190613d25565b60405180910390a45050505050565b611d4e8473ffffffffffffffffffffffffffffffffffffffff166126f2565b15611f0e578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b8152600401611d94959493929190613852565b602060405180830381600087803b158015611dae57600080fd5b505af1925050508015611ddf57506040513d601f19601f82011682018060405250810190611ddc9190612f55565b60015b611e8557611deb6142b0565b806308c379a01415611e485750611e00614905565b80611e0b5750611e4a565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e3f91906139cd565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e7c90613a0f565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614611f0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f0390613a2f565b60405180910390fd5b505b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415611f86576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f7d90613b6f565b60405180910390fd5b8151835114611fca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fc190613c8f565b60405180910390fd5b611fd886868686868661277f565b6000611fe26118cb565b600001905060005b845181101561219a57600085828151811061200857612007614252565b5b60200260200101519050600085838151811061202757612026614252565b5b60200260200101519050600084600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156120c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120bf90613aef565b60405180910390fd5b81810385600085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550508084600084815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461217e9190613ebe565b925050819055505050808061219290614115565b915050611fea565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051612211929190613936565b60405180910390a450505050505050565b6000806041835114156122645760008060006020860151925060408601519150606086015160001a905061225887828585612787565b9450945050505061229e565b60408351141561229557600080602085015191506040850151905061228a868383612894565b93509350505061229e565b60006002915091505b9250929050565b600060048111156122b9576122b86141f4565b5b8160048111156122cc576122cb6141f4565b5b14156122d757612477565b600160048111156122eb576122ea6141f4565b5b8160048111156122fe576122fd6141f4565b5b141561233f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612336906139ef565b60405180910390fd5b60026004811115612353576123526141f4565b5b816004811115612366576123656141f4565b5b14156123a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161239e90613a6f565b60405180910390fd5b600360048111156123bb576123ba6141f4565b5b8160048111156123ce576123cd6141f4565b5b141561240f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161240690613b2f565b60405180910390fd5b600480811115612422576124216141f4565b5b816004811115612435576124346141f4565b5b1415612476576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161246d90613bcf565b60405180910390fd5b5b50565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156124ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124e190613b6f565b60405180910390fd5b6125088686866124f987612705565b61250287612705565b8661277f565b60006125126118cb565b6000019050600081600086815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050838110156125ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125a590613aef565b60405180910390fd5b83810382600087815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550508281600086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546126649190613ebe565b925050819055508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6287876040516126e1929190613d25565b60405180910390a450505050505050565b600080823b905060008111915050919050565b60606000600167ffffffffffffffff81111561272457612723614281565b5b6040519080825280602002602001820160405280156127525781602001602082028036833780820191505090505b509050828160008151811061276a57612769614252565b5b60200260200101818152505080915050919050565b505050505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c11156127c257600060039150915061288b565b601b8560ff16141580156127da5750601c8560ff1614155b156127ec57600060049150915061288b565b6000600187878787604051600081526020016040526040516128119493929190613988565b6020604051602081039080840390855afa158015612833573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156128825760006001925092505061288b565b80600092509250505b94509492505050565b6000806000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85169150601b8560ff1c0190506128d487828885612787565b935093505050935093915050565b6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b828054612941906140b2565b90600052602060002090601f01602090048101928261296357600085556129aa565b82601f1061297c57805160ff19168380011785556129aa565b828001600101855582156129aa579182015b828111156129a957825182559160200191906001019061298e565b5b5090506129b791906129bb565b5090565b5b808211156129d45760008160009055506001016129bc565b5090565b60006129eb6129e684613d73565b613d4e565b90508083825260208201905082856020860282011115612a0e57612a0d6142d7565b5b60005b85811015612a3e5781612a248882612b3c565b845260208401935060208301925050600181019050612a11565b5050509392505050565b6000612a5b612a5684613d9f565b613d4e565b90508083825260208201905082856020860282011115612a7e57612a7d6142d7565b5b60005b85811015612aae5781612a948882612c48565b845260208401935060208301925050600181019050612a81565b5050509392505050565b6000612acb612ac684613dcb565b613d4e565b905082815260208101848484011115612ae757612ae66142dc565b5b612af2848285614070565b509392505050565b6000612b0d612b0884613dfc565b613d4e565b905082815260208101848484011115612b2957612b286142dc565b5b612b34848285614070565b509392505050565b600081359050612b4b8161499b565b92915050565b600082601f830112612b6657612b656142d2565b5b8135612b768482602086016129d8565b91505092915050565b600082601f830112612b9457612b936142d2565b5b8135612ba4848260208601612a48565b91505092915050565b600081359050612bbc816149b2565b92915050565b600081359050612bd1816149c9565b92915050565b600081519050612be6816149c9565b92915050565b600082601f830112612c0157612c006142d2565b5b8135612c11848260208601612ab8565b91505092915050565b600082601f830112612c2f57612c2e6142d2565b5b8135612c3f848260208601612afa565b91505092915050565b600081359050612c57816149e0565b92915050565b600060208284031215612c7357612c726142e6565b5b6000612c8184828501612b3c565b91505092915050565b60008060408385031215612ca157612ca06142e6565b5b6000612caf85828601612b3c565b9250506020612cc085828601612b3c565b9150509250929050565b600080600080600060a08688031215612ce657612ce56142e6565b5b6000612cf488828901612b3c565b9550506020612d0588828901612b3c565b945050604086013567ffffffffffffffff811115612d2657612d256142e1565b5b612d3288828901612b7f565b935050606086013567ffffffffffffffff811115612d5357612d526142e1565b5b612d5f88828901612b7f565b925050608086013567ffffffffffffffff811115612d8057612d7f6142e1565b5b612d8c88828901612bec565b9150509295509295909350565b600080600080600060a08688031215612db557612db46142e6565b5b6000612dc388828901612b3c565b9550506020612dd488828901612b3c565b9450506040612de588828901612c48565b9350506060612df688828901612c48565b925050608086013567ffffffffffffffff811115612e1757612e166142e1565b5b612e2388828901612bec565b9150509295509295909350565b60008060408385031215612e4757612e466142e6565b5b6000612e5585828601612b3c565b9250506020612e6685828601612bad565b9150509250929050565b60008060408385031215612e8757612e866142e6565b5b6000612e9585828601612b3c565b9250506020612ea685828601612c48565b9150509250929050565b60008060408385031215612ec757612ec66142e6565b5b600083013567ffffffffffffffff811115612ee557612ee46142e1565b5b612ef185828601612b51565b925050602083013567ffffffffffffffff811115612f1257612f116142e1565b5b612f1e85828601612b7f565b9150509250929050565b600060208284031215612f3e57612f3d6142e6565b5b6000612f4c84828501612bc2565b91505092915050565b600060208284031215612f6b57612f6a6142e6565b5b6000612f7984828501612bd7565b91505092915050565b600080600080600060a08688031215612f9e57612f9d6142e6565b5b600086013567ffffffffffffffff811115612fbc57612fbb6142e1565b5b612fc888828901612c1a565b9550506020612fd988828901612b3c565b9450506040612fea88828901612b3c565b9350506060612ffb88828901612b3c565b925050608061300c88828901612b3c565b9150509295509295909350565b600080600080600080600060e0888a031215613038576130376142e6565b5b600088013567ffffffffffffffff811115613056576130556142e1565b5b6130628a828b01612c1a565b97505060206130738a828b01612c48565b96505060406130848a828b01612c48565b95505060606130958a828b01612c48565b94505060806130a68a828b01612c48565b93505060a06130b78a828b01612c48565b92505060c088013567ffffffffffffffff8111156130d8576130d76142e1565b5b6130e48a828b01612bec565b91505092959891949750929550565b600060208284031215613109576131086142e6565b5b600061311784828501612c48565b91505092915050565b600061312c838361371b565b60208301905092915050565b61314181613fe5565b82525050565b61315081613fd3565b82525050565b61316761316282613fd3565b61415e565b82525050565b600061317882613e52565b6131828185613e80565b935061318d83613e2d565b8060005b838110156131be5781516131a58882613120565b97506131b083613e73565b925050600181019050613191565b5085935050505092915050565b6131d481613ff7565b82525050565b6131e381614003565b82525050565b6131fa6131f582614003565b614170565b82525050565b600061320b82613e5d565b6132158185613e91565b935061322581856020860161407f565b61322e816142eb565b840191505092915050565b600061324482613e68565b61324e8185613ea2565b935061325e81856020860161407f565b613267816142eb565b840191505092915050565b600061327d82613e68565b6132878185613eb3565b935061329781856020860161407f565b80840191505092915050565b600081546132b0816140b2565b6132ba8186613eb3565b945060018216600081146132d557600181146132e657613319565b60ff19831686528186019350613319565b6132ef85613e3d565b60005b83811015613311578154818901526001820191506020810190506132f2565b838801955050505b50505092915050565b600061332f601883613ea2565b915061333a82614316565b602082019050919050565b6000613352603483613ea2565b915061335d8261433f565b604082019050919050565b6000613375602883613ea2565b91506133808261438e565b604082019050919050565b6000613398600283613ea2565b91506133a3826143dd565b602082019050919050565b60006133bb601f83613ea2565b91506133c682614406565b602082019050919050565b60006133de601c83613eb3565b91506133e98261442f565b601c82019050919050565b6000613401600283613ea2565b915061340c82614458565b602082019050919050565b6000613424602b83613ea2565b915061342f82614481565b604082019050919050565b6000613447603183613ea2565b9150613452826144d0565b604082019050919050565b600061346a602b83613ea2565b91506134758261451f565b604082019050919050565b600061348d602983613ea2565b91506134988261456e565b604082019050919050565b60006134b0602283613ea2565b91506134bb826145bd565b604082019050919050565b60006134d3600383613ea2565b91506134de8261460c565b602082019050919050565b60006134f6602583613ea2565b915061350182614635565b604082019050919050565b6000613519600283613ea2565b915061352482614684565b602082019050919050565b600061353c600383613ea2565b9150613547826146ad565b602082019050919050565b600061355f602283613ea2565b915061356a826146d6565b604082019050919050565b6000613582600283613ea2565b915061358d82614725565b602082019050919050565b60006135a5600283613ea2565b91506135b08261474e565b602082019050919050565b60006135c8601d83613ea2565b91506135d382614777565b602082019050919050565b60006135eb602983613ea2565b91506135f6826147a0565b604082019050919050565b600061360e602983613ea2565b9150613619826147ef565b604082019050919050565b6000613631602883613ea2565b915061363c8261483e565b604082019050919050565b6000613654602183613ea2565b915061365f8261488d565b604082019050919050565b6000613677600383613ea2565b9150613682826148dc565b602082019050919050565b60e0820160008201516136a3600085018261371b565b5060208201516136b6602085018261371b565b5060408201516136c9604085018261371b565b5060608201516136dc606085018261371b565b5060808201516136ef608085018261371b565b5060a082015161370260a085018261371b565b5060c082015161371560c0850182613138565b50505050565b61372481614059565b82525050565b61373381614059565b82525050565b61374a61374582614059565b61418c565b82525050565b61375981614063565b82525050565b600061376b828b613272565b9150613777828a613739565b6020820191506137878289613739565b6020820191506137978288613739565b6020820191506137a78287613739565b6020820191506137b78286613739565b6020820191506137c78285613739565b6020820191506137d78284613156565b6014820191508190509998505050505050505050565b60006137f982856132a3565b91506138058284613272565b91508190509392505050565b600061381c826133d1565b915061382882846131e9565b60208201915081905092915050565b600060208201905061384c6000830184613147565b92915050565b600060a0820190506138676000830188613147565b6138746020830187613147565b8181036040830152613886818661316d565b9050818103606083015261389a818561316d565b905081810360808301526138ae8184613200565b90509695505050505050565b600060a0820190506138cf6000830188613147565b6138dc6020830187613147565b6138e9604083018661372a565b6138f6606083018561372a565b81810360808301526139088184613200565b90509695505050505050565b6000602082019050818103600083015261392e818461316d565b905092915050565b60006040820190508181036000830152613950818561316d565b90508181036020830152613964818461316d565b90509392505050565b600060208201905061398260008301846131cb565b92915050565b600060808201905061399d60008301876131da565b6139aa6020830186613750565b6139b760408301856131da565b6139c460608301846131da565b95945050505050565b600060208201905081810360008301526139e78184613239565b905092915050565b60006020820190508181036000830152613a0881613322565b9050919050565b60006020820190508181036000830152613a2881613345565b9050919050565b60006020820190508181036000830152613a4881613368565b9050919050565b60006020820190508181036000830152613a688161338b565b9050919050565b60006020820190508181036000830152613a88816133ae565b9050919050565b60006020820190508181036000830152613aa8816133f4565b9050919050565b60006020820190508181036000830152613ac881613417565b9050919050565b60006020820190508181036000830152613ae88161343a565b9050919050565b60006020820190508181036000830152613b088161345d565b9050919050565b60006020820190508181036000830152613b2881613480565b9050919050565b60006020820190508181036000830152613b48816134a3565b9050919050565b60006020820190508181036000830152613b68816134c6565b9050919050565b60006020820190508181036000830152613b88816134e9565b9050919050565b60006020820190508181036000830152613ba88161350c565b9050919050565b60006020820190508181036000830152613bc88161352f565b9050919050565b60006020820190508181036000830152613be881613552565b9050919050565b60006020820190508181036000830152613c0881613575565b9050919050565b60006020820190508181036000830152613c2881613598565b9050919050565b60006020820190508181036000830152613c48816135bb565b9050919050565b60006020820190508181036000830152613c68816135de565b9050919050565b60006020820190508181036000830152613c8881613601565b9050919050565b60006020820190508181036000830152613ca881613624565b9050919050565b60006020820190508181036000830152613cc881613647565b9050919050565b60006020820190508181036000830152613ce88161366a565b9050919050565b600060e082019050613d04600083018461368d565b92915050565b6000602082019050613d1f600083018461372a565b92915050565b6000604082019050613d3a600083018561372a565b613d47602083018461372a565b9392505050565b6000613d58613d69565b9050613d6482826140e4565b919050565b6000604051905090565b600067ffffffffffffffff821115613d8e57613d8d614281565b5b602082029050602081019050919050565b600067ffffffffffffffff821115613dba57613db9614281565b5b602082029050602081019050919050565b600067ffffffffffffffff821115613de657613de5614281565b5b613def826142eb565b9050602081019050919050565b600067ffffffffffffffff821115613e1757613e16614281565b5b613e20826142eb565b9050602081019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000613ec982614059565b9150613ed483614059565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613f0957613f08614196565b5b828201905092915050565b6000613f1f82614059565b9150613f2a83614059565b925082613f3a57613f396141c5565b5b828204905092915050565b6000613f5082614059565b9150613f5b83614059565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613f9457613f93614196565b5b828202905092915050565b6000613faa82614059565b9150613fb583614059565b925082821015613fc857613fc7614196565b5b828203905092915050565b6000613fde82614039565b9050919050565b6000613ff082614039565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b8381101561409d578082015181840152602081019050614082565b838111156140ac576000848401525b50505050565b600060028204905060018216806140ca57607f821691505b602082108114156140de576140dd614223565b5b50919050565b6140ed826142eb565b810181811067ffffffffffffffff8211171561410c5761410b614281565b5b80604052505050565b600061412082614059565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561415357614152614196565b5b600182019050919050565b60006141698261417a565b9050919050565b6000819050919050565b6000614185826142fc565b9050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600060033d11156142cf5760046000803e6142cc600051614309565b90505b90565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b60008160e01c9050919050565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b7f455243313135353a207472616e7366657220746f206e6f6e204552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b7f4e4f000000000000000000000000000000000000000000000000000000000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b7f4e4d000000000000000000000000000000000000000000000000000000000000600082015250565b7f455243313135353a2062616c616e636520717565727920666f7220746865207a60008201527f65726f2061646472657373000000000000000000000000000000000000000000602082015250565b7f455243313135353a2062617463682062616c616e636520717565727920666f7260008201527f20746865207a65726f2061646472657373000000000000000000000000000000602082015250565b7f455243313135353a20696e73756666696369656e742062616c616e636573206660008201527f6f72207472616e73666572000000000000000000000000000000000000000000602082015250565b7f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260008201527f20617070726f7665640000000000000000000000000000000000000000000000602082015250565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f4f4f540000000000000000000000000000000000000000000000000000000000600082015250565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f4352000000000000000000000000000000000000000000000000000000000000600082015250565b7f49534f0000000000000000000000000000000000000000000000000000000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f4941000000000000000000000000000000000000000000000000000000000000600082015250565b7f4954000000000000000000000000000000000000000000000000000000000000600082015250565b7f455243313135355552493a20746f6b656e4964206e6f74206578697374000000600082015250565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b7f444e450000000000000000000000000000000000000000000000000000000000600082015250565b600060443d101561491557614998565b61491d613d69565b60043d036004823e80513d602482011167ffffffffffffffff82111715614945575050614998565b808201805167ffffffffffffffff8111156149635750505050614998565b80602083010160043d038501811115614980575050505050614998565b61498f826020018501866140e4565b82955050505050505b90565b6149a481613fd3565b81146149af57600080fd5b50565b6149bb81613ff7565b81146149c657600080fd5b50565b6149d28161400d565b81146149dd57600080fd5b50565b6149e981614059565b81146149f457600080fd5b5056fea2646970667358221220827d885abee5a15f33289585f9e1db0e2156411fc6402b7a8705aeb0f551601164736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106100fd5760003560e01c8063481c6a7511610095578063a22cb46511610064578063a22cb46514610385578063bc01188e146103ae578063dcf2cad4146103d9578063e985e9c514610416578063f242432a14610453576100fd565b8063481c6a75146102a35780634e1273f4146102ce578063572b6c051461030b5780636787d44914610348576100fd565b80630e89341c116100d15780630e89341c146101d557806318160ddd146102125780631b0239471461023d5780632eb2c2d61461027a576100fd565b8062fdd58e1461010257806301ffc9a71461013f57806305322b741461017c5780630b885ac3146101ac575b600080fd5b34801561010e57600080fd5b5061012960048036038101906101249190612e70565b61047c565b6040516101369190613d0a565b60405180910390f35b34801561014b57600080fd5b5061016660048036038101906101619190612f28565b610490565b604051610173919061396d565b60405180910390f35b610196600480360381019061019191906130f3565b6104b3565b6040516101a3919061396d565b60405180910390f35b3480156101b857600080fd5b506101d360048036038101906101ce9190612f82565b61076c565b005b3480156101e157600080fd5b506101fc60048036038101906101f791906130f3565b6109d0565b60405161020991906139cd565b60405180910390f35b34801561021e57600080fd5b50610227610af4565b6040516102349190613d0a565b60405180910390f35b34801561024957600080fd5b50610264600480360381019061025f9190612c5d565b610b0e565b6040516102719190613d0a565b60405180910390f35b34801561028657600080fd5b506102a1600480360381019061029c9190612cca565b610b67565b005b3480156102af57600080fd5b506102b8610bfb565b6040516102c59190613837565b60405180910390f35b3480156102da57600080fd5b506102f560048036038101906102f09190612eb0565b610c2e565b6040516103029190613914565b60405180910390f35b34801561031757600080fd5b50610332600480360381019061032d9190612c5d565b610e23565b60405161033f919061396d565b60405180910390f35b34801561035457600080fd5b5061036f600480360381019061036a91906130f3565b610e86565b60405161037c9190613cef565b60405180910390f35b34801561039157600080fd5b506103ac60048036038101906103a79190612e30565b610f9c565b005b3480156103ba57600080fd5b506103c3611111565b6040516103d09190613837565b60405180910390f35b3480156103e557600080fd5b5061040060048036038101906103fb9190613019565b611144565b60405161040d9190613d0a565b60405180910390f35b34801561042257600080fd5b5061043d60048036038101906104389190612c8a565b61149c565b60405161044a919061396d565b60405180910390f35b34801561045f57600080fd5b5061047a60048036038101906104759190612d99565b611539565b005b600061048883836115cd565b905092915050565b60006104ac8261049e6116a0565b6116cd90919063ffffffff16565b9050919050565b6000806104be611738565b905060006104ca611774565b60000160008581526020019081526020016000209050806000015442101580156104f8575080600101544211155b610537576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052e90613b4f565b60405180910390fd5b8060030154341461057d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057490613bef565b60405180910390fd5b60008160040154146105d45780600401548160050154106105d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ca90613b8f565b60405180910390fd5b5b6105f082856001604051806020016040528060008152506117a1565b60018160050160008282546106059190613ebe565b925050819055506001848373ffffffffffffffffffffffffffffffffffffffff167f25b428dfde728ccfaddad7e29e4ac23c24ed7fd1a6e3e3f91894a9a073f5dfff60405160405180910390a4600060648260020154346106669190613f45565b6106709190613f14565b9050600081346106809190613f9f565b90508260060160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156106ec573d6000803e3d6000fd5b506106f56117c2565b60040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f1935050505015801561075e573d6000803e3d6000fd5b506001945050505050919050565b3373ffffffffffffffffffffffffffffffffffffffff1661078b6117ef565b60040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610805576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107fc90613a4f565b60405180910390fd5b8261080e61181c565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060016108596117ef565b60030160007fd9b67a26000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff0219169083151502179055506108eb85611849565b836108f46117c2565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508161093e6117c2565b60010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806109886117c2565b60040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505050565b606060006109dc61186c565b600001600084815260200190815260200160002080546109fb906140b2565b80601f0160208091040260200160405190810160405280929190818152602001828054610a27906140b2565b8015610a745780601f10610a4957610100808354040283529160200191610a74565b820191906000526020600020905b815481529060010190602001808311610a5757829003601f168201915b50505050509050600081511415610ac0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab790613c2f565b60405180910390fd5b610ac861186c565b60010181604051602001610add9291906137ed565b604051602081830303815290604052915050919050565b6000610b09610b016117c2565b600201611899565b905090565b6000610b60610b1b6117c2565b60030160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611899565b9050919050565b3373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161480610ba75750610ba6853361149c565b5b610be6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bdd90613b0f565b60405180910390fd5b610bf43386868686866118a7565b5050505050565b6000610c056117c2565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60608151835114610c74576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c6b90613c6f565b60405180910390fd5b6000610c7e6118cb565b60000190506000845167ffffffffffffffff811115610ca057610c9f614281565b5b604051908082528060200260200182016040528015610cce5781602001602082028036833780820191505090505b50905060005b8551811015610e1757600073ffffffffffffffffffffffffffffffffffffffff16868281518110610d0857610d07614252565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff161415610d67576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d5e90613acf565b60405180910390fd5b826000868381518110610d7d57610d7c614252565b5b602002602001015181526020019081526020016000206000878381518110610da857610da7614252565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054828281518110610dfe57610dfd614252565b5b6020026020010181815250508080600101915050610cd4565b50809250505092915050565b6000610e2d61181c565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16149050919050565b610e8e6128e2565b6000610e98611774565b60000160008481526020019081526020016000206040518060e00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201548152602001600582015481526020016006820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050600081600001511415610f93576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f8a90613ccf565b60405180910390fd5b80915050919050565b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561100b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100290613c4f565b60405180910390fd5b806110146118cb565b60010160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611105919061396d565b60405180910390a35050565b600061111b6117c2565b60040160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008061114f611738565b9050600061115c82610b0e565b905060648511156111a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119990613baf565b60405180910390fd5b8789106111e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111db90613c0f565b60405180910390fd5b60008a8a8a8a8a8a878960405160200161120598979695949392919061375f565b6040516020818303038152906040529050600061123a8661122c84805190602001206118f8565b61192890919063ffffffff16565b90506112446117c2565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146112d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112cc90613a8f565b60405180910390fd5b6112e86112e06117c2565b600201611899565b94506112f4858d61194f565b6113076112ff6117c2565b600201611984565b6113576113126117c2565b60030160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020611984565b60006040518060e001604052808d81526020018c81526020018981526020018b81526020018a8152602001600081526020018673ffffffffffffffffffffffffffffffffffffffff168152509050806113ae611774565b6000016000888152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c08201518160060160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550905050858573ffffffffffffffffffffffffffffffffffffffff167f889de1a576ddf6ed9570e1a2354ffe87302c20bd8af57b5bd4e3bbc84240e7f660405160405180910390a35050505050979650505050505050565b60006114a66118cb565b60010160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b3373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614806115795750611578853361149c565b5b6115b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115af90613b0f565b60405180910390fd5b6115c633868686868661199a565b5050505050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561163e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161163590613aaf565b60405180910390fd5b6116466118cb565b600001600083815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6000807f326d0c59a7612f6a9919e2a8ee333c80ba689d8ba2634de89c85cbb04832e70590508091505090565b6000826000016000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff16905092915050565b60006018600036905010158015611754575061175333610e23565b5b1561176857601436033560601c9050611770565b339050611771565b5b90565b6000807f75bce7b27cc8f04e7a4282e725010cbd105f602d082c4b02f7d958135d62562e90508091505090565b6117b0336000868686866119be565b6117bc84848484611ba5565b50505050565b6000807f47dc25f21c7793543edaeb1ef19d41726ddbada967ae9a7980b9bd8a45228a5e90508091505090565b6000807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90508091505090565b6000807fa5e014e253d3b66bd348c3cdd05f38b9805fff0b6471d004b58c6ada26cae99390508091505090565b8061185261186c565b6001019080519060200190611868929190612935565b5050565b6000807fb3408a5d8f30170919d3996b6cc182726500ad24733d17ace2f621485f6e7c8390508091505090565b600081600001549050919050565b6118b5868686868686611d2f565b6118c3868686868686611f16565b505050505050565b6000807f1799cf914cb0cb442ca7c7ac709ee40d0cb89e87351dc08d517fbda27d50c68b90508091505090565b60008160405160200161190b9190613811565b604051602081830303815290604052805190602001209050919050565b60008060006119378585612222565b91509150611944816122a5565b819250505092915050565b8061195861186c565b6000016000848152602001908152602001600020908051906020019061197f929190612935565b505050565b6001816000016000828254019250508190555050565b6119a88686868686866119be565b6119b686868686868661247a565b505050505050565b6119dd8473ffffffffffffffffffffffffffffffffffffffff166126f2565b15611b9d578373ffffffffffffffffffffffffffffffffffffffff1663f23a6e6187878686866040518663ffffffff1660e01b8152600401611a239594939291906138ba565b602060405180830381600087803b158015611a3d57600080fd5b505af1925050508015611a6e57506040513d601f19601f82011682018060405250810190611a6b9190612f55565b60015b611b1457611a7a6142b0565b806308c379a01415611ad75750611a8f614905565b80611a9a5750611ad9565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ace91906139cd565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b0b90613a0f565b60405180910390fd5b63f23a6e6160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614611b9b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b9290613a2f565b60405180910390fd5b505b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415611c15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c0c90613caf565b60405180910390fd5b611c3433600086611c2587612705565b611c2e87612705565b8661277f565b6000611c3e6118cb565b60000160008581526020019081526020016000209050828160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611ca29190613ebe565b925050819055508473ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628787604051611d20929190613d25565b60405180910390a45050505050565b611d4e8473ffffffffffffffffffffffffffffffffffffffff166126f2565b15611f0e578373ffffffffffffffffffffffffffffffffffffffff1663bc197c8187878686866040518663ffffffff1660e01b8152600401611d94959493929190613852565b602060405180830381600087803b158015611dae57600080fd5b505af1925050508015611ddf57506040513d601f19601f82011682018060405250810190611ddc9190612f55565b60015b611e8557611deb6142b0565b806308c379a01415611e485750611e00614905565b80611e0b5750611e4a565b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e3f91906139cd565b60405180910390fd5b505b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e7c90613a0f565b60405180910390fd5b63bc197c8160e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614611f0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f0390613a2f565b60405180910390fd5b505b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415611f86576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f7d90613b6f565b60405180910390fd5b8151835114611fca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fc190613c8f565b60405180910390fd5b611fd886868686868661277f565b6000611fe26118cb565b600001905060005b845181101561219a57600085828151811061200857612007614252565b5b60200260200101519050600085838151811061202757612026614252565b5b60200260200101519050600084600084815260200190815260200160002060008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156120c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120bf90613aef565b60405180910390fd5b81810385600085815260200190815260200160002060008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550508084600084815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461217e9190613ebe565b925050819055505050808061219290614115565b915050611fea565b508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051612211929190613936565b60405180910390a450505050505050565b6000806041835114156122645760008060006020860151925060408601519150606086015160001a905061225887828585612787565b9450945050505061229e565b60408351141561229557600080602085015191506040850151905061228a868383612894565b93509350505061229e565b60006002915091505b9250929050565b600060048111156122b9576122b86141f4565b5b8160048111156122cc576122cb6141f4565b5b14156122d757612477565b600160048111156122eb576122ea6141f4565b5b8160048111156122fe576122fd6141f4565b5b141561233f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612336906139ef565b60405180910390fd5b60026004811115612353576123526141f4565b5b816004811115612366576123656141f4565b5b14156123a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161239e90613a6f565b60405180910390fd5b600360048111156123bb576123ba6141f4565b5b8160048111156123ce576123cd6141f4565b5b141561240f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161240690613b2f565b60405180910390fd5b600480811115612422576124216141f4565b5b816004811115612435576124346141f4565b5b1415612476576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161246d90613bcf565b60405180910390fd5b5b50565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156124ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124e190613b6f565b60405180910390fd5b6125088686866124f987612705565b61250287612705565b8661277f565b60006125126118cb565b6000019050600081600086815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050838110156125ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125a590613aef565b60405180910390fd5b83810382600087815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550508281600086815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546126649190613ebe565b925050819055508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6287876040516126e1929190613d25565b60405180910390a450505050505050565b600080823b905060008111915050919050565b60606000600167ffffffffffffffff81111561272457612723614281565b5b6040519080825280602002602001820160405280156127525781602001602082028036833780820191505090505b509050828160008151811061276a57612769614252565b5b60200260200101818152505080915050919050565b505050505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c11156127c257600060039150915061288b565b601b8560ff16141580156127da5750601c8560ff1614155b156127ec57600060049150915061288b565b6000600187878787604051600081526020016040526040516128119493929190613988565b6020604051602081039080840390855afa158015612833573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156128825760006001925092505061288b565b80600092509250505b94509492505050565b6000806000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85169150601b8560ff1c0190506128d487828885612787565b935093505050935093915050565b6040518060e00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b828054612941906140b2565b90600052602060002090601f01602090048101928261296357600085556129aa565b82601f1061297c57805160ff19168380011785556129aa565b828001600101855582156129aa579182015b828111156129a957825182559160200191906001019061298e565b5b5090506129b791906129bb565b5090565b5b808211156129d45760008160009055506001016129bc565b5090565b60006129eb6129e684613d73565b613d4e565b90508083825260208201905082856020860282011115612a0e57612a0d6142d7565b5b60005b85811015612a3e5781612a248882612b3c565b845260208401935060208301925050600181019050612a11565b5050509392505050565b6000612a5b612a5684613d9f565b613d4e565b90508083825260208201905082856020860282011115612a7e57612a7d6142d7565b5b60005b85811015612aae5781612a948882612c48565b845260208401935060208301925050600181019050612a81565b5050509392505050565b6000612acb612ac684613dcb565b613d4e565b905082815260208101848484011115612ae757612ae66142dc565b5b612af2848285614070565b509392505050565b6000612b0d612b0884613dfc565b613d4e565b905082815260208101848484011115612b2957612b286142dc565b5b612b34848285614070565b509392505050565b600081359050612b4b8161499b565b92915050565b600082601f830112612b6657612b656142d2565b5b8135612b768482602086016129d8565b91505092915050565b600082601f830112612b9457612b936142d2565b5b8135612ba4848260208601612a48565b91505092915050565b600081359050612bbc816149b2565b92915050565b600081359050612bd1816149c9565b92915050565b600081519050612be6816149c9565b92915050565b600082601f830112612c0157612c006142d2565b5b8135612c11848260208601612ab8565b91505092915050565b600082601f830112612c2f57612c2e6142d2565b5b8135612c3f848260208601612afa565b91505092915050565b600081359050612c57816149e0565b92915050565b600060208284031215612c7357612c726142e6565b5b6000612c8184828501612b3c565b91505092915050565b60008060408385031215612ca157612ca06142e6565b5b6000612caf85828601612b3c565b9250506020612cc085828601612b3c565b9150509250929050565b600080600080600060a08688031215612ce657612ce56142e6565b5b6000612cf488828901612b3c565b9550506020612d0588828901612b3c565b945050604086013567ffffffffffffffff811115612d2657612d256142e1565b5b612d3288828901612b7f565b935050606086013567ffffffffffffffff811115612d5357612d526142e1565b5b612d5f88828901612b7f565b925050608086013567ffffffffffffffff811115612d8057612d7f6142e1565b5b612d8c88828901612bec565b9150509295509295909350565b600080600080600060a08688031215612db557612db46142e6565b5b6000612dc388828901612b3c565b9550506020612dd488828901612b3c565b9450506040612de588828901612c48565b9350506060612df688828901612c48565b925050608086013567ffffffffffffffff811115612e1757612e166142e1565b5b612e2388828901612bec565b9150509295509295909350565b60008060408385031215612e4757612e466142e6565b5b6000612e5585828601612b3c565b9250506020612e6685828601612bad565b9150509250929050565b60008060408385031215612e8757612e866142e6565b5b6000612e9585828601612b3c565b9250506020612ea685828601612c48565b9150509250929050565b60008060408385031215612ec757612ec66142e6565b5b600083013567ffffffffffffffff811115612ee557612ee46142e1565b5b612ef185828601612b51565b925050602083013567ffffffffffffffff811115612f1257612f116142e1565b5b612f1e85828601612b7f565b9150509250929050565b600060208284031215612f3e57612f3d6142e6565b5b6000612f4c84828501612bc2565b91505092915050565b600060208284031215612f6b57612f6a6142e6565b5b6000612f7984828501612bd7565b91505092915050565b600080600080600060a08688031215612f9e57612f9d6142e6565b5b600086013567ffffffffffffffff811115612fbc57612fbb6142e1565b5b612fc888828901612c1a565b9550506020612fd988828901612b3c565b9450506040612fea88828901612b3c565b9350506060612ffb88828901612b3c565b925050608061300c88828901612b3c565b9150509295509295909350565b600080600080600080600060e0888a031215613038576130376142e6565b5b600088013567ffffffffffffffff811115613056576130556142e1565b5b6130628a828b01612c1a565b97505060206130738a828b01612c48565b96505060406130848a828b01612c48565b95505060606130958a828b01612c48565b94505060806130a68a828b01612c48565b93505060a06130b78a828b01612c48565b92505060c088013567ffffffffffffffff8111156130d8576130d76142e1565b5b6130e48a828b01612bec565b91505092959891949750929550565b600060208284031215613109576131086142e6565b5b600061311784828501612c48565b91505092915050565b600061312c838361371b565b60208301905092915050565b61314181613fe5565b82525050565b61315081613fd3565b82525050565b61316761316282613fd3565b61415e565b82525050565b600061317882613e52565b6131828185613e80565b935061318d83613e2d565b8060005b838110156131be5781516131a58882613120565b97506131b083613e73565b925050600181019050613191565b5085935050505092915050565b6131d481613ff7565b82525050565b6131e381614003565b82525050565b6131fa6131f582614003565b614170565b82525050565b600061320b82613e5d565b6132158185613e91565b935061322581856020860161407f565b61322e816142eb565b840191505092915050565b600061324482613e68565b61324e8185613ea2565b935061325e81856020860161407f565b613267816142eb565b840191505092915050565b600061327d82613e68565b6132878185613eb3565b935061329781856020860161407f565b80840191505092915050565b600081546132b0816140b2565b6132ba8186613eb3565b945060018216600081146132d557600181146132e657613319565b60ff19831686528186019350613319565b6132ef85613e3d565b60005b83811015613311578154818901526001820191506020810190506132f2565b838801955050505b50505092915050565b600061332f601883613ea2565b915061333a82614316565b602082019050919050565b6000613352603483613ea2565b915061335d8261433f565b604082019050919050565b6000613375602883613ea2565b91506133808261438e565b604082019050919050565b6000613398600283613ea2565b91506133a3826143dd565b602082019050919050565b60006133bb601f83613ea2565b91506133c682614406565b602082019050919050565b60006133de601c83613eb3565b91506133e98261442f565b601c82019050919050565b6000613401600283613ea2565b915061340c82614458565b602082019050919050565b6000613424602b83613ea2565b915061342f82614481565b604082019050919050565b6000613447603183613ea2565b9150613452826144d0565b604082019050919050565b600061346a602b83613ea2565b91506134758261451f565b604082019050919050565b600061348d602983613ea2565b91506134988261456e565b604082019050919050565b60006134b0602283613ea2565b91506134bb826145bd565b604082019050919050565b60006134d3600383613ea2565b91506134de8261460c565b602082019050919050565b60006134f6602583613ea2565b915061350182614635565b604082019050919050565b6000613519600283613ea2565b915061352482614684565b602082019050919050565b600061353c600383613ea2565b9150613547826146ad565b602082019050919050565b600061355f602283613ea2565b915061356a826146d6565b604082019050919050565b6000613582600283613ea2565b915061358d82614725565b602082019050919050565b60006135a5600283613ea2565b91506135b08261474e565b602082019050919050565b60006135c8601d83613ea2565b91506135d382614777565b602082019050919050565b60006135eb602983613ea2565b91506135f6826147a0565b604082019050919050565b600061360e602983613ea2565b9150613619826147ef565b604082019050919050565b6000613631602883613ea2565b915061363c8261483e565b604082019050919050565b6000613654602183613ea2565b915061365f8261488d565b604082019050919050565b6000613677600383613ea2565b9150613682826148dc565b602082019050919050565b60e0820160008201516136a3600085018261371b565b5060208201516136b6602085018261371b565b5060408201516136c9604085018261371b565b5060608201516136dc606085018261371b565b5060808201516136ef608085018261371b565b5060a082015161370260a085018261371b565b5060c082015161371560c0850182613138565b50505050565b61372481614059565b82525050565b61373381614059565b82525050565b61374a61374582614059565b61418c565b82525050565b61375981614063565b82525050565b600061376b828b613272565b9150613777828a613739565b6020820191506137878289613739565b6020820191506137978288613739565b6020820191506137a78287613739565b6020820191506137b78286613739565b6020820191506137c78285613739565b6020820191506137d78284613156565b6014820191508190509998505050505050505050565b60006137f982856132a3565b91506138058284613272565b91508190509392505050565b600061381c826133d1565b915061382882846131e9565b60208201915081905092915050565b600060208201905061384c6000830184613147565b92915050565b600060a0820190506138676000830188613147565b6138746020830187613147565b8181036040830152613886818661316d565b9050818103606083015261389a818561316d565b905081810360808301526138ae8184613200565b90509695505050505050565b600060a0820190506138cf6000830188613147565b6138dc6020830187613147565b6138e9604083018661372a565b6138f6606083018561372a565b81810360808301526139088184613200565b90509695505050505050565b6000602082019050818103600083015261392e818461316d565b905092915050565b60006040820190508181036000830152613950818561316d565b90508181036020830152613964818461316d565b90509392505050565b600060208201905061398260008301846131cb565b92915050565b600060808201905061399d60008301876131da565b6139aa6020830186613750565b6139b760408301856131da565b6139c460608301846131da565b95945050505050565b600060208201905081810360008301526139e78184613239565b905092915050565b60006020820190508181036000830152613a0881613322565b9050919050565b60006020820190508181036000830152613a2881613345565b9050919050565b60006020820190508181036000830152613a4881613368565b9050919050565b60006020820190508181036000830152613a688161338b565b9050919050565b60006020820190508181036000830152613a88816133ae565b9050919050565b60006020820190508181036000830152613aa8816133f4565b9050919050565b60006020820190508181036000830152613ac881613417565b9050919050565b60006020820190508181036000830152613ae88161343a565b9050919050565b60006020820190508181036000830152613b088161345d565b9050919050565b60006020820190508181036000830152613b2881613480565b9050919050565b60006020820190508181036000830152613b48816134a3565b9050919050565b60006020820190508181036000830152613b68816134c6565b9050919050565b60006020820190508181036000830152613b88816134e9565b9050919050565b60006020820190508181036000830152613ba88161350c565b9050919050565b60006020820190508181036000830152613bc88161352f565b9050919050565b60006020820190508181036000830152613be881613552565b9050919050565b60006020820190508181036000830152613c0881613575565b9050919050565b60006020820190508181036000830152613c2881613598565b9050919050565b60006020820190508181036000830152613c48816135bb565b9050919050565b60006020820190508181036000830152613c68816135de565b9050919050565b60006020820190508181036000830152613c8881613601565b9050919050565b60006020820190508181036000830152613ca881613624565b9050919050565b60006020820190508181036000830152613cc881613647565b9050919050565b60006020820190508181036000830152613ce88161366a565b9050919050565b600060e082019050613d04600083018461368d565b92915050565b6000602082019050613d1f600083018461372a565b92915050565b6000604082019050613d3a600083018561372a565b613d47602083018461372a565b9392505050565b6000613d58613d69565b9050613d6482826140e4565b919050565b6000604051905090565b600067ffffffffffffffff821115613d8e57613d8d614281565b5b602082029050602081019050919050565b600067ffffffffffffffff821115613dba57613db9614281565b5b602082029050602081019050919050565b600067ffffffffffffffff821115613de657613de5614281565b5b613def826142eb565b9050602081019050919050565b600067ffffffffffffffff821115613e1757613e16614281565b5b613e20826142eb565b9050602081019050919050565b6000819050602082019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000613ec982614059565b9150613ed483614059565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115613f0957613f08614196565b5b828201905092915050565b6000613f1f82614059565b9150613f2a83614059565b925082613f3a57613f396141c5565b5b828204905092915050565b6000613f5082614059565b9150613f5b83614059565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613f9457613f93614196565b5b828202905092915050565b6000613faa82614059565b9150613fb583614059565b925082821015613fc857613fc7614196565b5b828203905092915050565b6000613fde82614039565b9050919050565b6000613ff082614039565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b8381101561409d578082015181840152602081019050614082565b838111156140ac576000848401525b50505050565b600060028204905060018216806140ca57607f821691505b602082108114156140de576140dd614223565b5b50919050565b6140ed826142eb565b810181811067ffffffffffffffff8211171561410c5761410b614281565b5b80604052505050565b600061412082614059565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561415357614152614196565b5b600182019050919050565b60006141698261417a565b9050919050565b6000819050919050565b6000614185826142fc565b9050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600060033d11156142cf5760046000803e6142cc600051614309565b90505b90565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b60008160601b9050919050565b60008160e01c9050919050565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b7f455243313135353a207472616e7366657220746f206e6f6e204552433131353560008201527f526563656976657220696d706c656d656e746572000000000000000000000000602082015250565b7f455243313135353a204552433131353552656365697665722072656a6563746560008201527f6420746f6b656e73000000000000000000000000000000000000000000000000602082015250565b7f4e4f000000000000000000000000000000000000000000000000000000000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b7f4e4d000000000000000000000000000000000000000000000000000000000000600082015250565b7f455243313135353a2062616c616e636520717565727920666f7220746865207a60008201527f65726f2061646472657373000000000000000000000000000000000000000000602082015250565b7f455243313135353a2062617463682062616c616e636520717565727920666f7260008201527f20746865207a65726f2061646472657373000000000000000000000000000000602082015250565b7f455243313135353a20696e73756666696369656e742062616c616e636573206660008201527f6f72207472616e73666572000000000000000000000000000000000000000000602082015250565b7f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260008201527f20617070726f7665640000000000000000000000000000000000000000000000602082015250565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f4f4f540000000000000000000000000000000000000000000000000000000000600082015250565b7f455243313135353a207472616e7366657220746f20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f4352000000000000000000000000000000000000000000000000000000000000600082015250565b7f49534f0000000000000000000000000000000000000000000000000000000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f4941000000000000000000000000000000000000000000000000000000000000600082015250565b7f4954000000000000000000000000000000000000000000000000000000000000600082015250565b7f455243313135355552493a20746f6b656e4964206e6f74206578697374000000600082015250565b7f455243313135353a2073657474696e6720617070726f76616c2073746174757360008201527f20666f722073656c660000000000000000000000000000000000000000000000602082015250565b7f455243313135353a206163636f756e747320616e6420696473206c656e67746860008201527f206d69736d617463680000000000000000000000000000000000000000000000602082015250565b7f455243313135353a2069647320616e6420616d6f756e7473206c656e6774682060008201527f6d69736d61746368000000000000000000000000000000000000000000000000602082015250565b7f455243313135353a206d696e7420746f20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b7f444e450000000000000000000000000000000000000000000000000000000000600082015250565b600060443d101561491557614998565b61491d613d69565b60043d036004823e80513d602482011167ffffffffffffffff82111715614945575050614998565b808201805167ffffffffffffffff8111156149635750505050614998565b80602083010160043d038501811115614980575050505050614998565b61498f826020018501866140e4565b82955050505050505b90565b6149a481613fd3565b81146149af57600080fd5b50565b6149bb81613ff7565b81146149c657600080fd5b50565b6149d28161400d565b81146149dd57600080fd5b50565b6149e981614059565b81146149f457600080fd5b5056fea2646970667358221220827d885abee5a15f33289585f9e1db0e2156411fc6402b7a8705aeb0f551601164736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "params": {
          "account": "address to query",
          "id": "token to query"
        },
        "returns": {
          "_0": "token balance"
        }
      },
      "balanceOfBatch(address[],uint256[])": {
        "params": {
          "accounts": "addresss to query",
          "ids": "tokens to query"
        },
        "returns": {
          "_0": "token balances"
        }
      },
      "isApprovedForAll(address,address)": {
        "params": {
          "account": "address to query for approval granted",
          "operator": "address to query for approval received"
        },
        "returns": {
          "_0": "whether operator is approved to spend tokens held by account"
        }
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "params": {
          "amounts": "list of quantities of tokens to transfer",
          "data": "data payload",
          "from": "sender of tokens",
          "ids": "list of token IDs",
          "to": "receiver of tokens"
        }
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "params": {
          "amount": "quantity of tokens to transfer",
          "data": "data payload",
          "from": "sender of tokens",
          "id": "token ID",
          "to": "receiver of tokens"
        }
      },
      "setApprovalForAll(address,bool)": {
        "params": {
          "operator": "address whose approval status to update",
          "status": "whether operator should be considered approved"
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "interfaceId": "interface id"
        },
        "returns": {
          "_0": "bool whether interface is supported"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "balanceOf(address,uint256)": {
        "notice": "query the balance of given token held by given address"
      },
      "balanceOfBatch(address[],uint256[])": {
        "notice": "query the balances of given tokens held by given addresses"
      },
      "isApprovedForAll(address,address)": {
        "notice": "query approval status of given operator with respect to given address"
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "notice": "transfer batch of tokens between given addresses, checking for ERC1155Receiver implementation if applicable"
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "notice": "transfer tokens between given addresses, checking for ERC1155Receiver implementation if applicable"
      },
      "setApprovalForAll(address,bool)": {
        "notice": "grant approval to or revoke approval from given operator to spend held tokens"
      },
      "supportsInterface(bytes4)": {
        "notice": "query whether contract has registered support for given interface"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}