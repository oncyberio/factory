/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides, Signer, utils } from "ethers";
import type { PromiseOrValue } from "../../common";
import type {
  OnCyberMultiSender,
  OnCyberMultiSenderInterface,
} from "../../contracts/OnCyberMultiSender";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IERC1155",
        name: "_token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "_receivers",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "_quantities",
        type: "uint256[]",
      },
    ],
    name: "transfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610394806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80632ef689ea14610030575b600080fd5b61004361003e366004610271565b610045565b005b8281146100d8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603c60248201527f4f6e43796265724d756c746953656e6465723a2072656365697665727320616e60448201527f64207175616e746974696573206c656e677468206d69736d6174636800000000606482015260840160405180910390fd5b60005b838110156101f7578673ffffffffffffffffffffffffffffffffffffffff1663f242432a33878785818110610112576101126102fd565b90506020020160208101906101279190610313565b8987878781811061013a5761013a6102fd565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e089901b16815273ffffffffffffffffffffffffffffffffffffffff968716600482015295909416602486015250604484019190915260209091020135606482015260a06084820152600060a482015260c401600060405180830381600087803b1580156101cc57600080fd5b505af11580156101e0573d6000803e3d6000fd5b5050505080806101ef90610337565b9150506100db565b50505050505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461022257600080fd5b50565b60008083601f84011261023757600080fd5b50813567ffffffffffffffff81111561024f57600080fd5b6020830191508360208260051b850101111561026a57600080fd5b9250929050565b6000806000806000806080878903121561028a57600080fd5b863561029581610200565b955060208701359450604087013567ffffffffffffffff808211156102b957600080fd5b6102c58a838b01610225565b909650945060608901359150808211156102de57600080fd5b506102eb89828a01610225565b979a9699509497509295939492505050565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561032557600080fd5b813561033081610200565b9392505050565b60006001820161035757634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220ca44925efc687c57f3a1eeb5c2fe84ff6209f8c672d59932607bbca9e69d358364736f6c634300080f0033";

type OnCyberMultiSenderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OnCyberMultiSenderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OnCyberMultiSender__factory extends ContractFactory {
  constructor(...args: OnCyberMultiSenderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<OnCyberMultiSender> {
    return super.deploy(overrides || {}) as Promise<OnCyberMultiSender>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): OnCyberMultiSender {
    return super.attach(address) as OnCyberMultiSender;
  }
  override connect(signer: Signer): OnCyberMultiSender__factory {
    return super.connect(signer) as OnCyberMultiSender__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OnCyberMultiSenderInterface {
    return new utils.Interface(_abi) as OnCyberMultiSenderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): OnCyberMultiSender {
    return new Contract(address, _abi, signerOrProvider) as OnCyberMultiSender;
  }
}
