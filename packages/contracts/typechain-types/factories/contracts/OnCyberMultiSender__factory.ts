/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides, Signer, utils } from "ethers";
import type { PromiseOrValue } from "../../common";
import type {
  OnCyberMultiSender,
  OnCyberMultiSenderInterface,
} from "../../contracts/OnCyberMultiSender";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IERC1155",
        name: "_token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "_receivers",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "_quantities",
        type: "uint256[]",
      },
    ],
    name: "transfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610606806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80632ef689ea14610030575b600080fd5b61004a600480360381019061004591906102da565b61004c565b005b818190508484905014610094576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161008b90610404565b60405180910390fd5b60005b84849050811015610166578673ffffffffffffffffffffffffffffffffffffffff1663f242432a338787858181106100d2576100d1610424565b5b90506020020160208101906100e7919061047f565b898787878181106100fb576100fa610424565b5b905060200201356040518563ffffffff1660e01b81526004016101219493929190610501565b600060405180830381600087803b15801561013b57600080fd5b505af115801561014f573d6000803e3d6000fd5b50505050808061015e90610588565b915050610097565b50505050505050565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006101a482610179565b9050919050565b60006101b682610199565b9050919050565b6101c6816101ab565b81146101d157600080fd5b50565b6000813590506101e3816101bd565b92915050565b6000819050919050565b6101fc816101e9565b811461020757600080fd5b50565b600081359050610219816101f3565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126102445761024361021f565b5b8235905067ffffffffffffffff81111561026157610260610224565b5b60208301915083602082028301111561027d5761027c610229565b5b9250929050565b60008083601f84011261029a5761029961021f565b5b8235905067ffffffffffffffff8111156102b7576102b6610224565b5b6020830191508360208202830111156102d3576102d2610229565b5b9250929050565b600080600080600080608087890312156102f7576102f661016f565b5b600061030589828a016101d4565b965050602061031689828a0161020a565b955050604087013567ffffffffffffffff81111561033757610336610174565b5b61034389828a0161022e565b9450945050606087013567ffffffffffffffff81111561036657610365610174565b5b61037289828a01610284565b92509250509295509295509295565b600082825260208201905092915050565b7f4f6e43796265724d756c746953656e6465723a2072656365697665727320616e60008201527f64207175616e746974696573206c656e677468206d69736d6174636800000000602082015250565b60006103ee603c83610381565b91506103f982610392565b604082019050919050565b6000602082019050818103600083015261041d816103e1565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b61045c81610199565b811461046757600080fd5b50565b60008135905061047981610453565b92915050565b6000602082840312156104955761049461016f565b5b60006104a38482850161046a565b91505092915050565b6104b581610199565b82525050565b6104c4816101e9565b82525050565b600082825260208201905092915050565b50565b60006104eb6000836104ca565b91506104f6826104db565b600082019050919050565b600060a08201905061051660008301876104ac565b61052360208301866104ac565b61053060408301856104bb565b61053d60608301846104bb565b818103608083015261054e816104de565b905095945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610593826101e9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036105c5576105c4610559565b5b60018201905091905056fea264697066735822122013b3fc5752e18dc931a20b9247482d42d379fbf9057a94063ef2bcefecdbb5ed64736f6c634300080f0033";

type OnCyberMultiSenderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OnCyberMultiSenderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OnCyberMultiSender__factory extends ContractFactory {
  constructor(...args: OnCyberMultiSenderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<OnCyberMultiSender> {
    return super.deploy(overrides || {}) as Promise<OnCyberMultiSender>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): OnCyberMultiSender {
    return super.attach(address) as OnCyberMultiSender;
  }
  override connect(signer: Signer): OnCyberMultiSender__factory {
    return super.connect(signer) as OnCyberMultiSender__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OnCyberMultiSenderInterface {
    return new utils.Interface(_abi) as OnCyberMultiSenderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): OnCyberMultiSender {
    return new Contract(address, _abi, signerOrProvider) as OnCyberMultiSender;
  }
}
