/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { DummyContract, DummyContractInterface } from "../DummyContract";

const _abi = [
  {
    inputs: [],
    name: "dummy",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b50606d80601d6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806332e43a1114602d575b600080fd5b60336035565b005b56fea26469706673582212201b50addf7f8a570b5dcbb617c9a66fb2775fefc0c982790ce7968943c03dbeeb64736f6c63430008090033";

type DummyContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DummyContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DummyContract__factory extends ContractFactory {
  constructor(...args: DummyContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<DummyContract> {
    return super.deploy(overrides || {}) as Promise<DummyContract>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): DummyContract {
    return super.attach(address) as DummyContract;
  }
  connect(signer: Signer): DummyContract__factory {
    return super.connect(signer) as DummyContract__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DummyContractInterface {
    return new utils.Interface(_abi) as DummyContractInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DummyContract {
    return new Contract(address, _abi, signerOrProvider) as DummyContract;
  }
}
