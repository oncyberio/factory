/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";
import { ethers } from "ethers";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "ERC1155Base",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155Base__factory>;
    getContractFactory(
      name: "ERC1155BaseInternal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155BaseInternal__factory>;
    getContractFactory(
      name: "ERC1155Enumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155Enumerable__factory>;
    getContractFactory(
      name: "ERC1155EnumerableInternal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155EnumerableInternal__factory>;
    getContractFactory(
      name: "IERC1155Enumerable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Enumerable__factory>;
    getContractFactory(
      name: "ERC1155",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155__factory>;
    getContractFactory(
      name: "IERC1155",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155__factory>;
    getContractFactory(
      name: "IERC1155Internal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Internal__factory>;
    getContractFactory(
      name: "IERC1155Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Receiver__factory>;
    getContractFactory(
      name: "ERC1155Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155Metadata__factory>;
    getContractFactory(
      name: "ERC1155MetadataInternal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155MetadataInternal__factory>;
    getContractFactory(
      name: "IERC1155Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Metadata__factory>;
    getContractFactory(
      name: "IERC1155MetadataInternal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155MetadataInternal__factory>;
    getContractFactory(
      name: "BaseRelayRecipient",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseRelayRecipient__factory>;
    getContractFactory(
      name: "CyberDropBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CyberDropBase__factory>;
    getContractFactory(
      name: "CyberTokenBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CyberTokenBase__factory>;
    getContractFactory(
      name: "OnCyberCommunityFactoryFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OnCyberCommunityFactoryFacet__factory>;
    getContractFactory(
      name: "CyberDestinationFactoryFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CyberDestinationFactoryFacet__factory>;
    getContractFactory(
      name: "CyberDestinationUtilityFactoryFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CyberDestinationUtilityFactoryFacet__factory>;
    getContractFactory(
      name: "LuxContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LuxContract__factory>;
    getContractFactory(
      name: "CyberObjectFactoryFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CyberObjectFactoryFacet__factory>;
    getContractFactory(
      name: "OnCyberAndFriendsFactoryFacet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OnCyberAndFriendsFactoryFacet__factory>;
    getContractFactory(
      name: "LibDiamond",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibDiamond__factory>;
    getContractFactory(
      name: "ERC1155URI",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155URI__factory>;
    getContractFactory(
      name: "LibAppStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibAppStorage__factory>;
    getContractFactory(
      name: "LibDropStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LibDropStorage__factory>;
    getContractFactory(
      name: "OnCyberMultiSender",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OnCyberMultiSender__factory>;

    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "ERC1155Base",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155Base>;
    getContractAt(
      name: "ERC1155BaseInternal",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155BaseInternal>;
    getContractAt(
      name: "ERC1155Enumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155Enumerable>;
    getContractAt(
      name: "ERC1155EnumerableInternal",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155EnumerableInternal>;
    getContractAt(
      name: "IERC1155Enumerable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Enumerable>;
    getContractAt(
      name: "ERC1155",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155>;
    getContractAt(
      name: "IERC1155",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155>;
    getContractAt(
      name: "IERC1155Internal",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Internal>;
    getContractAt(
      name: "IERC1155Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Receiver>;
    getContractAt(
      name: "ERC1155Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155Metadata>;
    getContractAt(
      name: "ERC1155MetadataInternal",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155MetadataInternal>;
    getContractAt(
      name: "IERC1155Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Metadata>;
    getContractAt(
      name: "IERC1155MetadataInternal",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155MetadataInternal>;
    getContractAt(
      name: "BaseRelayRecipient",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseRelayRecipient>;
    getContractAt(
      name: "CyberDropBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CyberDropBase>;
    getContractAt(
      name: "CyberTokenBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CyberTokenBase>;
    getContractAt(
      name: "OnCyberCommunityFactoryFacet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OnCyberCommunityFactoryFacet>;
    getContractAt(
      name: "CyberDestinationFactoryFacet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CyberDestinationFactoryFacet>;
    getContractAt(
      name: "CyberDestinationUtilityFactoryFacet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CyberDestinationUtilityFactoryFacet>;
    getContractAt(
      name: "LuxContract",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LuxContract>;
    getContractAt(
      name: "CyberObjectFactoryFacet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CyberObjectFactoryFacet>;
    getContractAt(
      name: "OnCyberAndFriendsFactoryFacet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OnCyberAndFriendsFactoryFacet>;
    getContractAt(
      name: "LibDiamond",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LibDiamond>;
    getContractAt(
      name: "ERC1155URI",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155URI>;
    getContractAt(
      name: "LibAppStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LibAppStorage>;
    getContractAt(
      name: "LibDropStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LibDropStorage>;
    getContractAt(
      name: "OnCyberMultiSender",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OnCyberMultiSender>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
