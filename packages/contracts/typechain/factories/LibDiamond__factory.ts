/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers'
import { Provider, TransactionRequest } from '@ethersproject/providers'
import type { LibDiamond, LibDiamondInterface } from '../LibDiamond'

const _abi = [
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: 'c__0x753e461c',
        type: 'bytes32',
      },
    ],
    name: 'c_0x753e461c',
    outputs: [],
    stateMutability: 'pure',
    type: 'function',
  },
]

const _bytecode =
  '0x60e7610052600b82828239805160001a607314610045577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060335760003560e01c8063449d8760146038575b600080fd5b604e6004803603810190604a91906066565b6050565b005b50565b600081359050606081609d565b92915050565b60006020828403121560795760786098565b5b60006085848285016053565b91505092915050565b6000819050919050565b600080fd5b60a481608e565b811460ae57600080fd5b5056fea264697066735822122055a3c1b6eb28c1532ee2fea983f1f421c04c25dd15b26887f3d1d522d96cb50d64736f6c63430008050033'

export class LibDiamond__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer)
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<LibDiamond> {
    return super.deploy(overrides || {}) as Promise<LibDiamond>
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {})
  }
  attach(address: string): LibDiamond {
    return super.attach(address) as LibDiamond
  }
  connect(signer: Signer): LibDiamond__factory {
    return super.connect(signer) as LibDiamond__factory
  }
  static readonly bytecode = _bytecode
  static readonly abi = _abi
  static createInterface(): LibDiamondInterface {
    return new utils.Interface(_abi) as LibDiamondInterface
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LibDiamond {
    return new Contract(address, _abi, signerOrProvider) as LibDiamond
  }
}
